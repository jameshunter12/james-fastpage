{
  
    
        "post0": {
            "title": "Homework Assignment for 3.3-4",
            "content": "3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Answers 1 . All the steps combined are sequencing . The step &quot;for i in numbers:&quot; is iteration because they go through all the numbers. . &quot;if (numbers[i] % 2 == 0)&quot; is selection because they sort each number to find the even ones. . i = 1 starString = &quot;#&quot; while i &lt;= 10: #this is a iteration because it repeats until it reaches 10 a = 1 while a &lt;= i: #this is a selection because it selectes what a is print (&quot;#&quot;, end= &quot;&quot;) a += 1 print () i += 1 . # ## ### #### ##### ###### ####### ######## ######### ########## . Answers 2 . All the steps are a sequence . &quot;While i &lt;= 5:&quot; is iteration because they repeat until i reaches 5 . &quot;While j &lt;= i:&quot; is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . a=1, b=7, c=3, d=7 | . consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . 1. the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | | the value of hot is true, the value of cold is false | | the value of hot is false, the value of cold is false | | . Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. | Sequencing | num1 = 5 num2 = 10 num3 = 15 num4 = 20 num5 = 25 num1 = num2 + num3 # num1 is now the new num2 + num3 num5 = num2 + num4 # num5 is now the new num2 + num4 . num1 = 25 (num2=10 + num3=15, so 10+15=25) | num5 = 30 (num2=10 + num4=20, so 10+20=30) | . a = 1 b = 2 c = 3 d = 4 e = 5 a = b + c #a is now b + c d = a + e #d is now a + e . a = 5 (b=2 + c=3, so 2+3=5) | d = 6 (a=1 + e=5, so 1+5=6) | . 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) B name &lt;- concat(lastName, var) SmithB email &lt;- concat(name, &quot; @gmail.com&quot;) SmithB@gmail.com DISPLAY(email) . | What would the result be? SmithB@gmail.com . | . . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 4 length2 &lt;- len(word2)/3 3 first &lt;- substring(word1, 2, len1) ompu second &lt;- substring(word2, len2+3, len2) ook newWord &lt;- concat(first, second) DISPLAY(newWord) . | What would the result be? ompuook . | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/2022/11/29/blog-Unit-3-Sections-3-4.html",
            "relUrl": "/2022/11/29/blog-Unit-3-Sections-3-4.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Hacks for 3.1 Part 1",
            "content": "Hacks for 3.1 Part 2 . Answer the practice problems and blog about which one&#39;s you got wrong. After, create at least 6 problems that are alike to what you learned in this portion of the lesson. . . Consider the following code segment: . currentScore ⟵ 10 | highScore ⟵ currentscore | currentScore ⟵ 7 | . DISPLAY (currentScore) . What will the currentScore be after running this code segment? . 17 | 10 | 7 | none of the above | Click for the answer! 3. because that is the latest value that was stored within the variable. What will the highScore be? . 17 | 10 | 7 | none of the above | Click for the answer! 2. because the value stored in a variable will alwasy be the most recent value assigned. . Consider the following code segment: . num1 ⟵ 4 | num2 ⟵ 6 | num1 ⟵ num 2 | . DISPLAY(num1) . DISPLAY(num2) . What is displayed after running this code segment? . 4 6 | 6 4 | 4 4 | 6 6 | Click for the answer! 4. because the value for num 2 becomes the value of num 1 therefore making the first outcome 6 and the second outcome would be six as well because that is the value that num2 is assigned. . Consider the following code segment: . num1 ⟵ 25 | num2 ⟵ 15 | num3 ⟵ 30 | num2 ⟵ num3 | num3 ⟵ num1 | num1 ⟵ num2 | . DISPLAY(num1) . DISPLAY(num2) . DISPLAY(num3) . What is displayed after running this code segment? . 25 15 30 | 30 30 25 | 30 15 30 | 15 30 25 | Click for the answer! 2. because for num 1 the value is replaced by num 3&#39;s value which is 30. For num 2 the value is 30 because its replaced by num 1&#39;s value which was originally 25 but then was replaced by num 3&#39;s value 30. For num 3, the value is 25 because it&#39;s value is replaced by num 2 which num 2&#39;s value was replaced by num 1&#39;s. . Consider the following code segment: . p ⟵ 10 | q ⟵ 20 | r ⟵ 30 | s ⟵ 40 | p ⟵ q | q ⟵ r | s ⟵ q | r ⟵ p | . What is the value of r as a result of running this code segment . 10 | 20 | 30 | 40 | Click for the answer! 2. because q is the variable assigned to p and q&#39;s value is 20. . Consider the following code segment: . first ⟵ true | second ⟵ false | second ⟵ first | first ⟵ second | . Insert Question . The value of first is true, and the value of second is false. | The value of first is false, and the value of second is true. | The value of first is true, and the value of second is true. | The value of first is false, and the value of second is false. | Click for the answer! 3. because the first two statements assign values to the variables. The third statement assigns the value of first (which is true) to second. The fourth statement assigns the value of second (which is true) to first. . Consider the following code segment: . a ⟵ 10 | b ⟵ 20 | c ⟵ 30 | d ⟵ 40 | x ⟵ 20 | b ⟵ x + b | a ⟵ x + 1 | d ⟵ c / d + 2 | . DISPLAY(a) . DISPLAY(b) . DISPLAY(c) . DISPLAY(d) . What is displayed as a result of executing the code segment? . 21 40 30 50 | 10 20 30 40 | 21 40 30 40 | 21 30 40 50 | Click for the answer! 1. because the first five statements assign values to the variables. The sixth statement assigns the value of x + b (which is 40) to b. The seventh statement assigns the value of x + 1 (which is 21) to a. The eighth statement assigns the value of c + d / 2 to d. According to the order of operations, division has higher precedence than addition. Since c is 30 and d / 2 is 20, d is assigned the value 50. The last four statements display the values of a, b, c, and d. Binary Hacks 3.2 Part 2 . Convert these binary notation to decimal notation. (the way we normally count) . The binary number 111 is 7 | . The binary number 1011 is 11 | . The binary number 1101011 is 107 | . Convert the decimal notation to binary notation. (You can use the Binary Math from Mr. Yeung or the one you have) . 12 in binary is 1100 | . 44 in binary is 101100 | . 254 in binary is 11111110 | . Extra Binary Hacks if you changed your bits to 24 . Convert decimal notation to binary notation. . 57345 in binary is 1110000000000001 | . 16777215 in binary is 111111111111111111111111 | . 11184810 in binary is 101010101010101010101010 | . Convert the binary notation to decimal notation . 101011101010 in decimal notation is 2794 | . 10011100000 in decimal notation is 1248 | . 1101001000101000 in decimal notation is 53800 | . Hacks for 3.2 Part 2 . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 | . What are the contents of scores1 after the code segment is executed?: . [89, 78, 92, 63, 95, 88] | [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] | [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] | [92, 79, 97, 63] | Click for the answer! 4. Because the data is not being appended from scores2 into scores1. . Consider the following code segment: . listA &lt;- [&quot;Sam&quot;, &quot;Ann&quot;] | listB &lt;- [&quot;Jamal&quot;, &quot;Tamara&quot;] | listB &lt;- listA | listA &lt;- listB | . What are the contents of listA after the code segment is executed? . [&quot;Sam&quot;, &quot;Ann&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Sam&quot;, &quot;Ann&quot;, &quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;, &quot;Sam&quot;, &quot;Ann&quot;] | Click for the answer! 1. Because all of the data from listA &quot;Sam&quot; and &quot;Ann&quot; replace what is in listB. So if listB replaces what is in listA, &quot;Sam&quot; and &quot;Ann&quot; will still be the only data in that list. . What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 5 | 7 | 6 | 4 | Click for the answer! 3. The length of the list is 6. . What is the index number of &quot;Purple&quot; in this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 7 | 0 | 6 | 5 | Click for the answer! 4. The index count starts at 0, making &quot;Red&quot; 0 and &quot;Purple&quot; index 5. . Which of the following types of data can be stored in a list? . Boolean | String | Float | All of the above | Click for the answer! 4. Any type of data can be stored within a list. A list can contain a mix of types of data. . Which of the following variables is a float? . Apples | -106.2 | 34 | True | Click for the answer! 2. A float is a decimal number. . If a list has a length of 24 items, what is the index number of the 17th item? . 21 | 17 | 16 | 69 | Click for the answer! 3. An index count starts at 0 so the index number of a variable is one less than it&#39;s spot in the length. . A variable is permanent and cannot be changed later on. . True | False | Click for the answer! 2. False. Variables can be changed later on in the code. . Which of the following is true about the list? [&quot;Apples&quot;, 42.0, &quot;Bananas&quot;, 0.5, &quot;Avocado&quot;, -902.2, &quot;Lychee&quot;, 6.9, &quot;Orange&quot;, 7.2] . The list has floats and string variable types. | The ratio of float variables to string variables is 2:1. | The length is 9. | The index of &quot;Avocado&quot; is 4. | All of the above | 1 and 4 | 1, 3, and 4 | Click for the answer! 6. The list has floats or decimals and strings, and the length is 10, the ratio of string to floats is 1:1, and the index number of &quot;Avocado&quot; is 4. . What I Learned . How to replace lists | Converting binary | Learned more about lists, boolean, variables, and integers | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2022/11/28/blog-Unit-3-Sections-1-2.html",
            "relUrl": "/2022/11/28/blog-Unit-3-Sections-1-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://jameshunter12.github.io/james-fastpage/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Adding A Countdown Timer",
            "content": "What did I do . I added a countdown timner for our customers to see | The countdown timer includes a countdown until we release the new products | . Why did I do this . I did this because we would often get customers asking when the new realese was going to be | I also added this because I thought it was a good way to incorporate what I learned in this class | This allows for easier functionability and I thought it was fun and important to add this | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/10/countdown-timer.html",
            "relUrl": "/markdown/2022/11/10/countdown-timer.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "N@TM Experience",
            "content": "What I Liked . I enjoyed showing our project to the parents and students | It was also really cool seeing the other peoples reactions to our project | I think seeing the reactions were worth it | We also answered their questions about how we did it and it is crazy to think that just a couple of months ago I would have had no idea what we were talking about | As we presented I realized how far we had came from the start. Before taking this class I thought it would have been incredibly difficult to create a website, but my perspective has changed. | We did get help from the flask template, so I still feel I have a long way until I can create a website from scratch | It was also interesting looking at other groups projects and how they did it . | One thing I wished I did was looked at more groups projects, because I didn&#39;t look at many and it would have been nice to see what they came up with . | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/09/night@museum.html",
            "relUrl": "/markdown/2022/11/09/night@museum.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "College Board Final Exam Corrections",
            "content": ". My answer was close because it contained a stribng varible and Boolean variable, which are in the correct answer. My answer was wrong because the names of the variables were not meaningful. C is the correct answer because it uses a string variable and a Boolean variable, the Boolean variable is important because it tells us if the statement is true or false (absent or not.) The named also used for the variable works well because they are appropriate and easy to read. . . I chose C because I narrowed it down to two answers (C and D) and I went with C. I knew it was one of those because the 7th line tells us a = 21, the 6th lines tells us b = 40, and the thrid line tells us c = 30. I said d = 40 because I could not figure out where else it was said, so I went with line 4. I now understand my mistake because I added c and d (30+40) and then divided by 2 so I got 35, which made me confused. I realized I had to do d divided by 2 and then add c (40/2=20+30) to get an answer of 50. . . The first part of the answer I selected was wrong, but the second part of it was correct. If I were to have ran the code I would have got &quot;onno&quot;, which is not noon. C is the correct answer because it uses the word &quot;on&quot;. The second line is basically reversing the word, so you would get &quot;no&quot; and then add the original word back (&quot;on&quot;) to the end, which would give you the word &quot;noon&quot;. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/09/collegeboard-final-corrections.html",
            "relUrl": "/markdown/2022/11/09/collegeboard-final-corrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Problems, Solutions, and Accomplihments",
            "content": "Our Problems . Our first problem is our sign in page dedicated for our customers. As of now one are only able to sign into one account we want to make where you can make an account and you can dave products and your products in your cart with save. | Another one of our problems is our cart feature. As of now, when you press the add to cart button it does not work correctly because when you press on your cart the same 2 products are in it. | . Accomplishments . In this last week we have been working on our API and making our website better | For our API we have not finished, but we have our design and how it is going to work on our website site | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/10/28/problems-and-solutions.html",
            "relUrl": "/markdown/2022/10/28/problems-and-solutions.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Fetch of Backend Jokes",
            "content": "Joke HaHa Boohoo .",
            "url": "https://jameshunter12.github.io/james-fastpage/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Jokes API",
            "content": "import requests url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes/&quot; response = requests.get(url) print(response.text) . [{&#34;boohoo&#34;:218363,&#34;haha&#34;:177423,&#34;id&#34;:0,&#34;joke&#34;:&#34;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime.&#34;},{&#34;boohoo&#34;:2025,&#34;haha&#34;:30300,&#34;id&#34;:1,&#34;joke&#34;:&#34;Q: Why did I divide sin by tan? A: Just cos.&#34;},{&#34;boohoo&#34;:1375,&#34;haha&#34;:1863,&#34;id&#34;:2,&#34;joke&#34;:&#34;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&#34;},{&#34;boohoo&#34;:1340,&#34;haha&#34;:1613,&#34;id&#34;:3,&#34;joke&#34;:&#34;Enter any 11-digit prime number to continue.&#34;},{&#34;boohoo&#34;:1781,&#34;haha&#34;:2092,&#34;id&#34;:4,&#34;joke&#34;:&#34;If at first you don&#39;t succeed; call it version 1.0.&#34;},{&#34;boohoo&#34;:5127,&#34;haha&#34;:1340,&#34;id&#34;:5,&#34;joke&#34;:&#34;Java programmers are some of the most materialistic people I know, very object-oriented&#34;},{&#34;boohoo&#34;:454,&#34;haha&#34;:1146,&#34;id&#34;:6,&#34;joke&#34;:&#34;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed.&#34;},{&#34;boohoo&#34;:2437,&#34;haha&#34;:3078,&#34;id&#34;:7,&#34;joke&#34;:&#34;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&#34;},{&#34;boohoo&#34;:122,&#34;haha&#34;:1340,&#34;id&#34;:8,&#34;joke&#34;:&#34;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#34;},{&#34;boohoo&#34;:125,&#34;haha&#34;:1185,&#34;id&#34;:9,&#34;joke&#34;:&#34;Q: What u2019s a aliens favorite computer key? A: the space bar!&#34;},{&#34;boohoo&#34;:17001,&#34;haha&#34;:1771,&#34;id&#34;:10,&#34;joke&#34;:&#34;There are 10 types of people in the world: those who understand binary, and those who don u2019t.&#34;},{&#34;boohoo&#34;:447,&#34;haha&#34;:1780,&#34;id&#34;:11,&#34;joke&#34;:&#34;If it wasn&#39;t for C, we u2019d all be programming in BASI and OBOL.&#34;},{&#34;boohoo&#34;:446,&#34;haha&#34;:1073,&#34;id&#34;:12,&#34;joke&#34;:&#34;Computers make very fast, very accurate mistakes.&#34;},{&#34;boohoo&#34;:452,&#34;haha&#34;:1151,&#34;id&#34;:13,&#34;joke&#34;:&#34;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&#34;},{&#34;boohoo&#34;:452,&#34;haha&#34;:1277,&#34;id&#34;:14,&#34;joke&#34;:&#34;Q: How many programmers does it take to change a light bulb? A: None. It u2019s a hardware problem.&#34;},{&#34;boohoo&#34;:516,&#34;haha&#34;:4274,&#34;id&#34;:15,&#34;joke&#34;:&#34;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&#34;},{&#34;boohoo&#34;:639,&#34;haha&#34;:1090,&#34;id&#34;:16,&#34;joke&#34;:&#34;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&#34;},{&#34;boohoo&#34;:4202,&#34;haha&#34;:6984,&#34;id&#34;:17,&#34;joke&#34;:&#34;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#34;}] . import requests url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes/&quot; response = requests.get(url) json = response.json() #for each joke an entry has the joke in it for entry in json: print(entry) . {&#39;boohoo&#39;: 218363, &#39;haha&#39;: 177423, &#39;id&#39;: 0, &#39;joke&#39;: &#39;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime.&#39;} {&#39;boohoo&#39;: 2025, &#39;haha&#39;: 30300, &#39;id&#39;: 1, &#39;joke&#39;: &#39;Q: Why did I divide sin by tan? A: Just cos.&#39;} {&#39;boohoo&#39;: 1375, &#39;haha&#39;: 1863, &#39;id&#39;: 2, &#39;joke&#39;: &#39;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&#39;} {&#39;boohoo&#39;: 1340, &#39;haha&#39;: 1613, &#39;id&#39;: 3, &#39;joke&#39;: &#39;Enter any 11-digit prime number to continue.&#39;} {&#39;boohoo&#39;: 1781, &#39;haha&#39;: 2092, &#39;id&#39;: 4, &#39;joke&#39;: &#34;If at first you don&#39;t succeed; call it version 1.0.&#34;} {&#39;boohoo&#39;: 5127, &#39;haha&#39;: 1340, &#39;id&#39;: 5, &#39;joke&#39;: &#39;Java programmers are some of the most materialistic people I know, very object-oriented&#39;} {&#39;boohoo&#39;: 454, &#39;haha&#39;: 1146, &#39;id&#39;: 6, &#39;joke&#39;: &#39;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed.&#39;} {&#39;boohoo&#39;: 2437, &#39;haha&#39;: 3078, &#39;id&#39;: 7, &#39;joke&#39;: &#39;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&#39;} {&#39;boohoo&#39;: 122, &#39;haha&#39;: 1340, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} {&#39;boohoo&#39;: 125, &#39;haha&#39;: 1185, &#39;id&#39;: 9, &#39;joke&#39;: &#39;Q: What’s a aliens favorite computer key? A: the space bar!&#39;} {&#39;boohoo&#39;: 17001, &#39;haha&#39;: 1771, &#39;id&#39;: 10, &#39;joke&#39;: &#39;There are 10 types of people in the world: those who understand binary, and those who don’t.&#39;} {&#39;boohoo&#39;: 447, &#39;haha&#39;: 1780, &#39;id&#39;: 11, &#39;joke&#39;: &#34;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&#34;} {&#39;boohoo&#39;: 446, &#39;haha&#39;: 1073, &#39;id&#39;: 12, &#39;joke&#39;: &#39;Computers make very fast, very accurate mistakes.&#39;} {&#39;boohoo&#39;: 452, &#39;haha&#39;: 1151, &#39;id&#39;: 13, &#39;joke&#39;: &#39;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&#39;} {&#39;boohoo&#39;: 452, &#39;haha&#39;: 1277, &#39;id&#39;: 14, &#39;joke&#39;: &#39;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&#39;} {&#39;boohoo&#39;: 516, &#39;haha&#39;: 4274, &#39;id&#39;: 15, &#39;joke&#39;: &#39;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&#39;} {&#39;boohoo&#39;: 639, &#39;haha&#39;: 1090, &#39;id&#39;: 16, &#39;joke&#39;: &#39;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&#39;} {&#39;boohoo&#39;: 4202, &#39;haha&#39;: 6984, &#39;id&#39;: 17, &#39;joke&#39;: &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39;} .",
            "url": "https://jameshunter12.github.io/james-fastpage/python/markdown/2022/10/20/Jokes-API.html",
            "relUrl": "/python/markdown/2022/10/20/Jokes-API.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Javascript Web Page using an API",
            "content": "The code below holds the info that is being generated into an HTML table. . Key things to know: . &lt; table &gt; creates a TABLE | &lt; tr &gt; creates a ROW | &lt; th &gt; makes the text a column HEADER | &lt; tbody id = &quot;results&quot; &gt; defines an element id, to be used within JavaScript | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Joke&lt;/th&gt; &lt;th&gt;HaHa&lt;/th&gt; &lt;th&gt;Boohoo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; . Constant variables are declared here with keyword const . Key things to know: . The document object &quot;result&quot; represents table body in the HTML above. | If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing &quot;result&quot; and defining a &quot;resultContainer&quot; | In the code, in following cells, document elements are created and organized for each Joke, each is added to the &quot;resultContainer&quot; as a row in the table body. | Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend | . // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const HAHA = &quot;haha&quot;; const BOOHOO = &quot;boohoo&quot;; // prepare fetch urls const url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; // haha reaction const jeer_url = url + &quot;/jeer/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method . The below code uses a function called fetch to gather the data from the backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked in case the site is down and returns an error | On successful fetch, the code places each Joke in the HTML table body using a &quot;for&quot; loop and creating document elements from each &quot;row&quot; of the fetched &quot;data&quot;. | The creation of each Haha and Boohoo &quot;onclick&quot; &quot;button&quot; is also done in the same loop. | Updates to backend are setup to occur with each onclick, each click calls the &quot;reaction&quot; function | . // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const joke = document.createElement(&quot;td&quot;); joke.innerHTML = row.id + &quot;. &quot; + row.joke; // add fetched data to innerHTML // td for haha cell with onclick actions const haha = document.createElement(&quot;td&quot;); const haha_but = document.createElement(&#39;button&#39;); haha_but.id = HAHA+row.id // establishes a HAHA JS id for cell haha_but.innerHTML = row.haha; // add fetched &quot;haha count&quot; to innerHTML haha_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(HAHA, like_url+row.id, haha_but.id); }; haha.appendChild(haha_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const boohoo = document.createElement(&quot;td&quot;); const boohoo_but = document.createElement(&#39;button&#39;); boohoo_but.id = BOOHOO+row.id // establishes a BOOHOO JS id for cell boohoo_but.innerHTML = row.boohoo; // add fetched &quot;boohoo count&quot; to innerHTML boohoo_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(BOOHOO, jeer_url+row.id, boohoo_but.id); }; boohoo.appendChild(boohoo_but); // add &quot;boohoo button&quot; to boohoo cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . The below code uses fetch to update backend data using &quot;put_options&quot;. The purpose is to update Hahaa and Bohoo counters in backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked to verify update occurred | The element id of button clicked is updated with the data returned from the API. | Note, the elemID is received as parameter. This data was setup when the button was created in former cell. | . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } . Hacks . The code below relates to the rapidapi you worked with last week. . What are some similarities you see with the javascript for the jokes api? | In a blogpost, break up the code in cells like done above and try to describe what this code is doing. | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/webfrontend",
            "relUrl": "/techtalk/webfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;6fa44ed3a2msh483515e3beca32dp153a87jsn04ee72a909e0&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6fa44ed3a2msh483515e3beca32dp153a87jsn04ee72a909e0&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: # json is calling the data print (f&#39;{coin[&quot;price&quot;]} {coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]}&#39;) #this is the way the data is formatted . 19224.447593601126 BTC Bitcoin 1308.199551212318 ETH Ethereum 1.0000523455427062 USDT Tether USD 1.0002524530884096 USDC USDC 274.74450631272896 BNB Binance Coin 0.5211455214949348 XRP XRP 1.000171247381502 BUSD Binance USD 0.4139552402915634 ADA Cardano 32.454134482189296 SOL Solana 0.06054842848035766 DOGE Dogecoin 6.354403003989721 DOT Polkadot 0.835383532602989 MATIC Polygon 0.000010736474729842 SHIB Shiba Inu 0.999891639898776 DAI Dai 0.06351970963448027 TRX TRON 1308.950203374039 WETH Wrapped Ether 6.352808919826807 UNI Uniswap 16.582266591683975 AVAX Avalanche 4.534812109996118 CAKE PancakeSwap 16.097275035337095 OKB OKB 12.790865904079196 ATOM Cosmos 53.16388872968613 LTC Litecoin 23.87294802061375 FTT FTX Token 25.39839861266645 ETC Ethereum Classic 146.14913616438486 XMR Monero 0.1256703462070973 XLM Stellar 0.32924309203358804 ALGO Algorand 113.34545922204282 BCH Bitcoin Cash 19245.95077301717 BTCB Bitcoin BEP2 0.10541410004274888 CRO Cronos 3.4418393654122696 NEAR NEAR Protocol 0.000293866408536083 LUNC Terra Classic 1.742193550502613 WEMIX WEMIX TOKEN 1.6497345409755526 FLOW Flow 16.524231414902868 ENS EnergySwap 5.292418584086171 FIL Filecoin 0.02320353209595045 VET VeChain 155.68731956157967 QNT Quant 0.6842150594079114 MANA Decentraland 5.624430651470011 ICP Internet Computer (DFINITY) 0.05983121896177806 HBAR Hedera 0.7083305292153628 IMX Immutable X 0.9998613493400573 FRAX Frax 57.322221492067925 EGLD Elrond 1.398063181968517 XTZ Tezos 0.8232983748529789 SAND The Sandbox 0.20047738370702253 CHZ Chiliz 1.340424033760174 LDO Lido DAO Token 5.222843346525186 HT Huobi Token 74.84882436943164 AAVE Aave . import requests url = &quot;https://americanfootballapi.p.rapidapi.com/api/american-football/search/brady&quot; querystring = {&quot;sort&quot;:&quot;new&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6fa44ed3a2msh483515e3beca32dp153a87jsn04ee72a909e0&quot;, &quot;X-RapidAPI-Host&quot;: &quot;americanfootballapi.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) json = response.json().get(&#39;results&#39;) # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for post in json: # countries in a list for posts in post[&quot;entity&quot;]: if posts[&quot;country&quot;].get(&quot;name&quot;) == &quot;USA&quot;: for key, value in post.items(): print(key, value) . {&#34;results&#34;:[{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:853680,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Tom Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;QB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tom&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:false,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4388,&#34;name&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;nameCode&#34;:&#34;TB&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;slug&#34;:&#34;tampa-bay-buccaneers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#d50a0a&#34;,&#34;secondary&#34;:&#34;#34302b&#34;,&#34;text&#34;:&#34;#34302b&#34;},&#34;type&#34;:0,&#34;userCount&#34;:14077},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:10394},&#34;score&#34;:1274827,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:1132339,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Brady Christensen&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;OT&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Christensen&#34;,&#34;slug&#34;:&#34;christensen-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4415,&#34;name&#34;:&#34;Carolina Panthers&#34;,&#34;nameCode&#34;:&#34;CAR&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Carolina Panthers&#34;,&#34;slug&#34;:&#34;carolina-panthers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#3a84c5&#34;,&#34;secondary&#34;:&#34;#07141e&#34;,&#34;text&#34;:&#34;#07141e&#34;},&#34;type&#34;:0,&#34;userCount&#34;:2480},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:2},&#34;score&#34;:205,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:887887,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Brady Sheldon&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;LB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Sheldon&#34;,&#34;slug&#34;:&#34;sheldon-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:984311,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Tyre Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;WR&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tyre&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;}]} . TypeError Traceback (most recent call last) /Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb Cell 7 in &lt;cell line: 22&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; for post in json: # countries in a list &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; for posts in post[&#34;entity&#34;]: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; if posts[&#34;country&#34;].get(&#34;name&#34;) == &#34;USA&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; for key, value in post.items(): &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(key, value) TypeError: string indices must be integers . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "College Board",
            "content": "What I Can Improve . I did solid on the collaboration and program design and development quiz, but I could dfeinity do better on progeam function and purpose quiz. . I need to improve in most of the aspects. I think I can start with improving my vocab because if I understand the vocab then it will make everything a lot easier. If I know the vocab then I can easy tell what the question is asking . I need to go through each lesson to review my understanding because right now I am confused on a lot of topics . I haven&#39;t taken much notes as of now because I forgot to, so once I start taking notes on chapter 1 I think i will greatly imporve my understanding and clear up any confusion . I also realized that there are course resources that I can go through to improve my knowledge and specific resources that I can read if I have confusion on a certain topic. . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/10/03/collegeboard.html",
            "relUrl": "/markdown/2022/10/03/collegeboard.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i]==0: continue if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;burger and fries&quot;: 5.98, &quot;burger and drink&quot;: 4.98, &quot;drink and fries&quot;: 2.98} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu:&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(&quot;&quot;) if item in menu.keys(): print(f&quot;your total will be: {menu[item]}&quot;) print(&quot;Thank you for ordering &quot; + item) print(&quot;Your order with be ready in 15 minutes&quot;) else: print(&quot;That is not on the menu&quot;) # print(&quot;Total=&quot; + &quot; $&quot; + str(v)) . Menu: burger $3.99 fries $1.99 drink $0.99 burger and fries $5.98 burger and drink $4.98 drink and fries $2.98 your total will be: 1.99 Thank you for ordering fries Your order with be ready in 15 minutes . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "College Board Chapter 1 Notes",
            "content": "1.1 Collaboration | 1.2 Program Function and Purpose | 1.3 Program Design and Development | . 1.1 Collaboration Notes . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it | A computing inoovation can be a program and it can be physical or nonphysical | Collaboration that includes diverse perspectives helps to aviod bias | Interpersonal skills learned with collaboration | Communication | . | Consensus Building | . | Conflict Resolution | . | Negotiation | . | Ways to collaborate in APCSP: | Pair Programming- Have one person work while the other person guides them | . | Think-Pair-Share- Think about a problem and share with a partner | . | Leaving Comments- Allows you to communicate with yourself and others | . | . 1.2 Program Function and Purpose Notes . The purpose of computing innovation is to solve problems or to puruse interests through creative expression | An understanding of the purpose of a computing innovation provides developers with an imporved ability to develop that computing innovation | Categories of Innovations: | Applications (things you can download) | . | Physical Devices (devices you can use) | . | Systems (things you can do online like E-mail) | . | Describing the purpose of a computing is important (essential questions) . | Progam inputs are data sent to a computer for processing by a program. Input can come in a variety of forms, such ad tactile, audio, and visual, or text . | An event is associated with an action and supplies input data to a program | Events can be generated when a key is pressed, a mouse is clicked, a program is started, or any other defined action occurs that affects the flow of execution | Inputs usually affect the output produced by a program | Program output can come in a variety of forms, such as tactile, audio, visual, or text | Program output is usually base on a program&#39;s input or prior state (e.g., internal values) | Smart phone/tablet, laptop computer, and gaming consle are receive input and present output | Programs receive input from events that are triggered by some action (mouse clicks, button clicks, keyboard entries, audio trigger, ect) | Input does not always affect output | Certian lines of code are executed depending on the event (doesn&#39;t have to be in order) . | A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software . | A code segment is a collection of program statements that is part of a program | A program needs to work for a variety of inputs and situations | The behavior of a program is how a program functions during execution and is often described by how a user interacts with it | A program can be described broadly by what it does, or in more detail by both what the program does and how the program statements accomplish the function | A program is a collection of statements | A statement is a single command and a group of statements is called a code segment | You should be able to state what the code segment does | . 1.3 Program Design and Development . - .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/10/01/collegeboard-big-idea-1-notes.html",
            "relUrl": "/markdown/2022/10/01/collegeboard-big-idea-1-notes.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Java Script Table",
            "content": "Table . Member Role .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2022/09/25/javascript-table.html",
            "relUrl": "/markdown/java/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;James&quot;; console.log(msg); . James . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(&quot;foo bar&quot;); . foo bar . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf, sport) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.sport = sport; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role, sport: this.sport,}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;coding&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, sport: &#39;coding&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;sport&#34;:&#34;coding&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;James&quot;, &quot;jameshunter12&quot;, 2025, &quot;soccer&quot;), new Person(&quot;Quinn&quot;, &quot;gigtieup&quot;, 2025, &quot;lacrosse&quot;), new Person(&quot;Aaron&quot;, &quot;aaron-rub&quot;, 2025, &quot;swim&quot;), new Person(&quot;Yasha&quot;, &quot;yashakhoshini&quot;, 2025, &quot;soccer&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, sport: &#39;coding&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;James&#39;, ghID: &#39;jameshunter12&#39;, classOf: 2025, sport: &#39;soccer&#39;, role: &#39;Student&#39; }, Person { name: &#39;Quinn&#39;, ghID: &#39;gigtieup&#39;, classOf: 2025, sport: &#39;lacrosse&#39;, role: &#39;Student&#39; }, Person { name: &#39;Aaron&#39;, ghID: &#39;aaron-rub&#39;, classOf: 2025, sport: &#39;swim&#39;, role: &#39;Student&#39; }, Person { name: &#39;Yasha&#39;, ghID: &#39;yashakhoshini&#39;, classOf: 2025, sport: &#39;soccer&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;sport&#34;:&#34;coding&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, sport: &#39;coding&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Sport&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.sport + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDRoleSport . Mr M | jm1021 | Teacher | coding | James | jameshunter12 | Student | soccer | Quinn | gigtieup | Student | lacrosse | Aaron | aaron-rub | Student | swim | Yasha | yashakhoshini | Student | soccer | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Quiz Plan",
            "content": "My quiz plan: . Create a quiz similar to the example that was more complex (so I can understand the program) | Think (What will make my website different)) | Create (Use what I know from the lesson and the brainstorm plan to create what website I had in mind) | Check/ Ask (Ask teacher and classmates if anything needs to be added or changed) | . Drafting: . For my code I used a simple repeating command “on event (“Button name”,”click”, function(){“ (This was used throughout my whole quiz) I wanted to create a question that requires them to type in the answer (code below) . onEvent(“enter”, “click”, function( ) { console.log(“answerbutton entered text: “ + getText(“text-input”)); if (getText(“text-input”) == “Ronaldo”) { setScreen(“end”); } else { setScreen(“incorrect”); } }); . Data Abstraction . An example of Data Abstraction in this program is the “font size” chart. It holds multiple selections that represent different sizes. A random number function takes a random size selection from the list and sets the default font size to that selection. . The point . The point of the assignment was to get comfortable with code.org but specifically java script. . # Managing Complexity . An example of complexity management in this quiz is the layout. The quiz is divided into two parts: pasword and exploration in the program. This can easily be seen in the first part of the code, each command has its own defined function. . Challenges . Since I created a Jeopardy game there were lots of buttons that I had to create so I had to make sure the names were correct, so I could easily find them, I also had a little trouble while making a question with text entry. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2022/09/12/quiz-plan.html",
            "relUrl": "/markdown/java/2022/09/12/quiz-plan.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Changing the Remote Theme",
            "content": ". .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/2022/09/06/theme-change.html",
            "relUrl": "/jupyter/2022/09/06/theme-change.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Dictionary Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer #These are the questions followed by the possible answers question_prompts = [ &quot;What is the name of the syntax that can pass variables in html? n n&quot;, &quot;What is it called for a command you give your computer? n n&quot;, &quot;Is it important to define your varibles? n n&quot;, &quot;If you do not definne your varibles what will happen when you try and run the code? n n&quot;, ] #These are the answers to the questions above questions = [ Question(question_prompts[0], &quot;liquid&quot;), Question(question_prompts[1], &quot;input&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;syntax error&quot;), ] #This is used to tell you your score def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupter/python/2022/09/06/dictionary-quiz.html",
            "relUrl": "/jupter/python/2022/09/06/dictionary-quiz.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "# variable of type string name = &quot;James Hunter&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer age = 15 print(&quot;age&quot;, age, type(age)) # variable of type float weight = 136 print(&quot;weight&quot;, weight, type(weight)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;HTML&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;weight&quot;: weight, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name James Hunter &lt;class &#39;str&#39;&gt; age 15 &lt;class &#39;int&#39;&gt; weight 136 &lt;class &#39;int&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;James Hunter&#39;, &#39;age&#39;: 15, &#39;weight&#39;: 136, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] James Hunter &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;James&quot;, &quot;LastName&quot;: &quot;Hunter&quot;, &quot;DOB&quot;: &quot;February 23&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;12james15545@gmail.com&quot;, &quot;Weight&quot;: [&quot;136&quot;] })#InfoDb[0] InfoDb.append({ &quot;FirstName&quot;: &quot;Nick&quot;, &quot;LastName&quot;: &quot;Hunter&quot;, &quot;DOB&quot;: &quot;June 17th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nick@hunter-il.com&quot;, &quot;Weight&quot;: [&quot;155&quot;] }) # InfoDb[1 print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;James&#39;, &#39;LastName&#39;: &#39;Hunter&#39;, &#39;DOB&#39;: &#39;February 23&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;12james15545@gmail.com&#39;, &#39;Weight&#39;: [&#39;136&#39;]}, {&#39;FirstName&#39;: &#39;Nick&#39;, &#39;LastName&#39;: &#39;Hunter&#39;, &#39;DOB&#39;: &#39;June 17th&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;nick@hunter-il.com&#39;, &#39;Weight&#39;: [&#39;155&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Socer Number: 12&quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . #InfoDb is always than i def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | . for index in range (len(InfoDb)): print_data(InfoDb[index]) . James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . mylist = [1, 2, 3, 4, 5] mylist.reverse() mylist [5, 4, 3, 2, 1] . [5, 4, 3, 2, 1] . a = [10, 20, 30, 40, 50] len(a) . 5 . grades = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;F&#39;] grades.sort(reverse=True) print(grades) . [&#39;F&#39;, &#39;D&#39;, &#39;C&#39;, &#39;B&#39;, &#39;A&#39;] . grades = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;F&#39;] grades.pop(1) . &#39;B&#39; .",
            "url": "https://jameshunter12.github.io/james-fastpage/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Bash Test",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/jameshunter/Library/Jupyter/kernels/bash javascript /Users/jameshunter/Library/Jupyter/kernels/javascript python3 /opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/bash/2022/08/25/Jupyter-Checks.html",
            "relUrl": "/jupyter/bash/2022/08/25/Jupyter-Checks.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "First Quiz",
            "content": "class Question: def __init__(self, prompt, answer): # Defines variables self.prompt = prompt self.answer = answer # This is my list of questions with questions and answer choices question_prompts = [ &quot;How many lines are in a sequence of code? n(a)2 or more n(b)1&quot;, &quot;Does (base) come from Anaconda? nyes/ nno&quot;, &quot;Are we in APCSP? nyes/ nno&quot;, &quot;What grade do you want in this class? (C) n(A) n(B) n(A+)&quot;, ] # Answers questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;yes&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;A+&quot;), ] # Prints score (correct answer = score + 1) def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questionsyou got 2 out of 4 .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/python/2022/08/24/first-quiz.html",
            "relUrl": "/jupyter/python/2022/08/24/first-quiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "James's Important Docs",
            "content": "Here is the link to my World Religions Project . Here is the link to my AP World Schedule . Here is the link to my Integrated 3a Schedule . Here is the link to my HSE4 Schedule .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/08/24/first-doc.html",
            "relUrl": "/markdown/2022/08/24/first-doc.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "James's First Post",
            "content": "My name is James and I enjoy playing soccer and working out! .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/08/22/first-post.html",
            "relUrl": "/markdown/2022/08/22/first-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "My Jupyter Notebooks",
            "content": "print(&quot;hello&quot;) . hello .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/python/2022/08/22/first-notebook.html",
            "relUrl": "/jupyter/python/2022/08/22/first-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Welcome to my page! . Throughout this page you can find some things I have been working on! .",
          "url": "https://jameshunter12.github.io/james-fastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": ". layout: default title: Chapter 1 Notes permalink: /Chapter 1 Notes/ type: pbl —- . 1.1 Collaboration | 1.2 Program Function and Purpose | 1.3 Program Design and Development | . 1.1 Collaboration Notes . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it | A computing inoovation can be a program and it can be physical or nonphysical | Collaboration that includes diverse perspectives helps to aviod bias | Interpersonal skills learned through collaboration | Communication | . | Consensus Building | . | Conflict Resolution | . | Negotiation | . | Ways to collaborate in APCSP: | Pair Programming- Have one person work while the other person guides them | . | Think-Pair-Share- Think about a problem and share with a partner | . | Leaving Comments- Allows you to communicate with yourself and others | . | .",
          "url": "https://jameshunter12.github.io/james-fastpage/_pages/chapter-1-notes.html",
          "relUrl": "/_pages/chapter-1-notes.html",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  

  

  
  

  
  

  
  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jameshunter12.github.io/james-fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}