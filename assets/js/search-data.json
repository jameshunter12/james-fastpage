{
  
    
        "post0": {
            "title": "Lesson Plan Conclusion",
            "content": "def stats(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) print(df) . RANK NAME TEAM POS AGE GP MPG USG% TO% FTA ... 0 1 Devin Booker Pho G 26.5 10 42.3 29.5 11.6 63 ... 1 2 Kawhi Leonard Lac F 31.9 2 40.2 30.0 11.9 17 ... 2 3 Jimmy Butler Mia F 33.7 9 38.9 30.6 9.7 90 ... 3 4 Anthony Edwards Min G 21.8 5 39.7 32.4 6.5 39 ... 4 5 Nikola Jokic Den C 28.2 10 37.8 33.4 14.1 69 ... .. ... ... ... ... ... .. ... ... ... ... ... 211 212 Edmond Sumner Bro G 27.4 1 4.5 0.0 NaN 0 ... 212 213 Omer Yurtseven Mia C 24.9 2 2.2 10.2 100.0 0 ... 213 214 Dewayne Dedmon Phi C 33.7 1 5.0 18.5 50.0 0 ... 214 215 Justin Champagnie Bos G-F 21.9 1 5.0 18.0 0.0 0 ... 215 216 DaQuan Jeffries Nyk G-F 25.7 2 2.3 0.0 NaN 0 ... APG SPG BPG TPG P+R P+A P+R+A VI ORtg DRtg 0 7.1 1.8 0.8 3.0 41.1 43.0 48.2 10.4 132.4 109.9 1 6.0 2.0 0.5 3.0 41.0 40.5 47.0 11.0 129.4 110.8 2 5.6 1.9 0.9 2.2 38.3 37.4 43.9 10.8 128.1 110.3 3 5.2 1.8 2.0 1.6 36.6 36.8 41.8 9.4 122.1 111.0 4 9.5 0.9 0.7 3.6 43.7 40.1 53.2 16.5 125.7 106.0 .. ... ... ... ... ... ... ... ... ... ... 211 1.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 NaN 125.1 212 0.5 0.0 0.0 0.5 0.5 0.5 1.0 0.0 NaN NaN 213 0.0 0.0 0.0 1.0 1.0 0.0 1.0 0.0 0.0 94.9 214 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 99.0 215 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 NaN NaN [216 rows x 29 columns] . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . Stats for Jimmy Butler: PPG RPG APG 2 31.9 6.4 5.6 . def points(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Prompt the user to input a player name and points scored player_name = input(&quot;Enter the player&#39;s name: &quot;) points_line = int(input(&quot;Enter the players points line: &quot;)) # Filter the DataFrame to only include rows for the input player name player_stats = df[df[&#39;NAME&#39;] == player_name] # If the input player name is not found, print an error message and exit if player_stats.empty: print(&quot;Error: Player not found&quot;) exit() # Calculate the player&#39;s average points per game avg_ppg = player_stats[&#39;PPG&#39;].mean() if points_line &gt; avg_ppg: print(points_line , &quot;&gt;&quot; , avg_ppg) else: print(points_line, &quot;&lt;&quot; , avg_ppg) # Compare the input points scored to the player&#39;s average points per game if points_line &gt; avg_ppg: print(&quot;This is a good under bet&quot;) elif points_line == avg_ppg: print(&quot;This bet is 50/50&quot;) else: print(&quot;This is a good over bet&quot;) points() . 1 &lt; 31.9 This is a good over bet . def rebounds(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Prompt the user to input a player name and points scored player_name = input(&quot;Enter the player&#39;s name: &quot;) rebound_line = int(input(&quot;Enter the players rebound line: &quot;)) # Filter the DataFrame to only include rows for the input player name player_stats = df[df[&#39;NAME&#39;] == player_name] # If the input player name is not found, print an error message and exit if player_stats.empty: print(&quot;Error: Player not found&quot;) exit() # Calculate the player&#39;s average points per game avg_RPG = player_stats[&#39;RPG&#39;].mean() if rebound_line &gt; avg_RPG: print(rebound_line , &quot;&gt;&quot; , avg_RPG) else: print(rebound_line, &quot;&lt;&quot; , avg_RPG) # Compare the input points scored to the player&#39;s average points per game if rebound_line &gt; avg_RPG: print(&quot;This is a good under bet&quot;) elif rebound_line == avg_RPG: print(&quot;This bet is 50/50&quot;) else: print(&quot;This is a good over bet&quot;) rebounds() . 1 &lt; 6.4 This is a good over bet . def assists(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Prompt the user to input a player name and points scored player_name = input(&quot;Enter the player&#39;s name: &quot;) assist_line = int(input(&quot;Enter the players assist line: &quot;)) # Filter the DataFrame to only include rows for the input player name player_stats = df[df[&#39;NAME&#39;] == player_name] # If the input player name is not found, print an error message and exit if player_stats.empty: print(&quot;Error: Player not found&quot;) exit() # Calculate the player&#39;s average points per game avg_APG = player_stats[&#39;APG&#39;].mean() if assist_line &gt; avg_APG: print(assist_line , &quot;&gt;&quot; , avg_APG) else: print(assist_line, &quot;&lt;&quot; , avg_APG) # Compare the input points scored to the player&#39;s average points per game if assist_line &gt; avg_APG: print(&quot;This is a good under bet&quot;) elif assist_line == avg_APG: print(&quot;This bet is 50/50&quot;) else: print(&quot;This is a good over bet&quot;) assists() . 2 &lt; 5.6 This is a good over bet . def process(): stats = input(&quot;stats, points, rebounds, and assists&quot;) if stats == &quot;stats&quot;: import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) print(df) elif stats == &quot;points&quot;: def points(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Prompt the user to input a player name and points scored player_name = input(&quot;Enter the player&#39;s name: &quot;) points_line = int(input(&quot;Enter the players points line: &quot;)) # Filter the DataFrame to only include rows for the input player name player_stats = df[df[&#39;NAME&#39;] == player_name] # If the input player name is not found, print an error message and exit if player_stats.empty: print(&quot;Error: Player not found&quot;) exit() # Calculate the player&#39;s average points per game avg_ppg = player_stats[&#39;PPG&#39;].mean() if points_line &gt; avg_ppg: print(points_line , &quot;&gt;&quot; , avg_ppg) else: print(points_line, &quot;&lt;&quot; , avg_ppg) # Compare the input points scored to the player&#39;s average points per game if points_line &gt; avg_ppg: print(&quot;This is a good under bet&quot;) elif points_line == avg_ppg: print(&quot;This bet is 50/50&quot;) else: print(&quot;This is a good over bet&quot;) points() elif stats == &quot;rebounds&quot;: def rebounds(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Prompt the user to input a player name and points scored player_name = input(&quot;Enter the player&#39;s name: &quot;) rebound_line = int(input(&quot;Enter the players rebound line: &quot;)) # Filter the DataFrame to only include rows for the input player name player_stats = df[df[&#39;NAME&#39;] == player_name] # If the input player name is not found, print an error message and exit if player_stats.empty: print(&quot;Error: Player not found&quot;) exit() # Calculate the player&#39;s average points per game avg_RPG = player_stats[&#39;RPG&#39;].mean() if rebound_line &gt; avg_RPG: print(rebound_line , &quot;&gt;&quot; , avg_RPG) else: print(rebound_line, &quot;&lt;&quot; , avg_RPG) # Compare the input points scored to the player&#39;s average points per game if rebound_line &gt; avg_RPG: print(&quot;This is a good under bet&quot;) elif rebound_line == avg_RPG: print(&quot;This bet is 50/50&quot;) else: print(&quot;This is a good over bet&quot;) rebounds() elif stats == &quot;assists&quot;: def assists(): import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_stats.csv&#39;) # Prompt the user to input a player name and points scored player_name = input(&quot;Enter the player&#39;s name: &quot;) assist_line = int(input(&quot;Enter the players assist line: &quot;)) # Filter the DataFrame to only include rows for the input player name player_stats = df[df[&#39;NAME&#39;] == player_name] # If the input player name is not found, print an error message and exit if player_stats.empty: print(&quot;Error: Player not found&quot;) exit() # Calculate the player&#39;s average points per game avg_APG = player_stats[&#39;APG&#39;].mean() if assist_line &gt; avg_APG: print(assist_line , &quot;&gt;&quot; , avg_APG) else: print(assist_line, &quot;&lt;&quot; , avg_APG) # Compare the input points scored to the player&#39;s average points per game if assist_line &gt; avg_APG: print(&quot;This is a good under bet&quot;) elif assist_line == avg_APG: print(&quot;This bet is 50/50&quot;) else: print(&quot;This is a good over bet&quot;) assists() else: print(&quot;Invalid option&quot;) process() . 39 &gt; 31.9 This is a good under bet .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/05/17/tangibles.html",
            "relUrl": "/markdown/2023/05/17/tangibles.html",
            "date": " • May 17, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Space and Time Hacks",
            "content": "Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. | Do some basic research on the different types of sorting algorithms and their time complexity. | Insertion Sort: An algorithm that builds the final sorted array one item at a time. It inserts each element into its proper position in the final sorted array. The time complexity of Insertion Sort is also O(n^2). | . | Selection Sort: An algorithm that sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning. The time complexity of Selection Sort is also O(n^2). | . | Why is time and space complexity important when choosing an algorithm? . | The time complexity of an algorithm refers to the amount of time it takes to execute the algorithm as a function of the input size. In other words, it measures how quickly the algorithm runs as the input size grows larger. An algorithm with a lower time complexity will execute faster than an algorithm with a higher time complexity. When dealing with large input sizes, even small differences in time complexity can have a significant impact on the overall performance of the algorithm. | . | The space complexity of an algorithm refers to the amount of memory space required by the algorithm as a function of the input size. In other words, it measures how much memory the algorithm needs to store and manipulate the input data. An algorithm with a lower space complexity will use less memory than an algorithm with a higher space complexity. When working with limited memory resources, it is important to choose an algorithm with a lower space complexity to avoid memory overflow errors and other performance issues. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . | No, you should not always use a constant time algorithm nor should you never use an exponential time algorithm. | . | The choice of algorithm depends on the problem at hand and the size of the input data. Constant time algorithms are generally preferred as they have a time complexity that does not depend on the size of the input data, and thus, they execute in a constant amount of time regardless of the input size. This means that constant time algorithms can be very efficient for small or fixed-sized input data. However, it is not always possible to design a constant time algorithm for every problem, and sometimes constant time algorithms may not be the most efficient option for larger input sizes. | . | On the other hand, exponential time algorithms are generally avoided as they have a time complexity that grows exponentially with the size of the input data. This means that they can quickly become impractical and inefficient for larger input sizes. However, exponential time algorithms may be the only option for some problems, and sometimes they may be the most efficient option for smaller input sizes. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . | Constant Time Complexity (O(1)): The time complexity is constant if the number of operations performed by the algorithm remains the same, regardless of the input size. Examples of algorithms with constant time complexity include accessing an element in an array or performing arithmetic operations. | . | Linear Time Complexity (O(n)): The time complexity is linear if the number of operations performed by the algorithm increases linearly with the input size. Examples of algorithms with linear time complexity include iterating over an array or linked list, or searching for an element in an unsorted array. | . | Quadratic Time Complexity (O(n^2)): The time complexity is quadratic if the number of operations performed by the algorithm increases quadratically with the input size. Examples of algorithms with quadratic time complexity include nested loops that iterate over an array or matrix. | . | Logarithmic Space Complexity (O(log n)): The space complexity is logarithmic if the amount of memory used by the algorithm increases logarithmically with the input size. Examples of algorithms with logarithmic space complexity include recursive algorithms that divide the input data into smaller subproblems. | . | . Complete the Time and Space Complexity analysis questions linked below. Practice .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/05/17/.spacetimehacks.html",
            "relUrl": "/markdown/2023/05/17/.spacetimehacks.html",
            "date": " • May 17, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F / / / | | -- . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_- ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (-‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - .",
            "url": "https://jameshunter12.github.io/james-fastpage/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "P4-M 4/28 Binary Lesson HACKS",
            "content": "Lesson Note Taker . Fill in the blanks below during the binary presentation. You can visit our website here!^ Due to last minute deployment issues, may need to run a local server . git clone https://github.com/TheoH32/Runtime_Terror.git | run: | bundle install | bundle exec jekyll serve | . Binary . Binary is a base 2 number system. | 0 represents off and 1 represents on. | A bit is the minimum unit of binary information stored in a computer system. | Boolean Expressions . A boolean expression is a logical statement that is either TRUE or FALSE and compares data. | Truth Tables . The logical operations shown in truth tables are AND, OR, NOT, and XOR. | # AND 5 &gt; 3 and 5 == 3 + 2 . True . 5 &lt; 3 and 5 == 5 . False . 5 == 5 or 5 != 5 . True . 5 &lt; 3 or 5 != 5 . False . Real Life Example using Boolean Expressions . Try changing the conditions and/or the logical operation below! Run the code to see if you are eligible to vote. . age = 18 citizen = True if age &gt;= 18 and citizen: print(&quot;You are eligible to vote.&quot;) else: print(&quot;You are not eligible to vote.&quot;) . You are eligible to vote. . Binary Conversions . Binary to Decimal . We can count in binary by using powers of 2. | In binary, we read from right to left. | 0111 has a value of 7. | Binary Search . For a binary search, the list must be sorted. | In a binary search, computers start at the middle. | The number of steps required in a binary search follows the equation: log base 2 of the number of items in the list. | Binary searches also work with a list of strings. We can sort them alphabetically. | Binary searches can be represented in flowchart diagrams. | Hacks . You will NOT be awarded any points for sections that are INCOMPLETE . Note Taker . Fill in all of the blanks above. | Lesson Quiz . Complete the lesson quiz | SCREENSHOT SCORE and paste it here (or paste screenshot with submission) | Binary Game . Complete the Binary game and reach a minimum score of 10! | SCREENSHOT SCORE and paste it here (or with submission) | Binary Conversions Practice . Convert the decimal number &quot;17&quot; into binary. 10001 | Convert the binary number 1010 into decimal. 10 | Convert the decimal number &quot;122&quot; into hexadecimal. 7A | Convert the hexadecimal number &quot;09&quot; into binary. 00001001 | Binary Search Questions . Make a binary search tree of different the list [1,2,4,15,25,30,31] | | . Put this list of strings in a order that can be used for binary search [&quot;Donut”,&quot;Cake”,&quot;Soda”,&quot;Banana”,&quot;Fruit”] | [&quot;Banana&quot;, &quot;Cake&quot;, &quot;Donut&quot;, &quot;Fruit&quot;, &quot;Soda&quot;] This order would make the most sense because it is in alphabetical order | . Explain why Binary Search is more efficient than Sequential Search. | Binary Search is more efficient than Sequential Search because in Binary Search, the list is divided into two halves repeatedly until the target value is found or it is determined that the value is not in the list. On the other hand, Sequential Search checks each element of the list one by one until it either finds the target value or reaches the end of the list. | . Extra Credit: . Translate the binary number, 1001010, into octal (base 8). SHOW YOUR WORK AND EXPLAIN YOUR THINKING. OR | write the best rap line (determined during the lesson by group) | . Hacks Scoring . Hack Comments Grade . Note Taker | fill in the blanks above | 0.1 | . Binary Conversions Practice | if incorrect= 0.2 awarded | 0.2 | . Binary Search Questions | if incorrect= 0.2 awarded | 0.2 | . Extra Credit | MUST SHOW WORK | 0.1 | . Total | expected= 0.9/1 | 1/1 | .",
            "url": "https://jameshunter12.github.io/james-fastpage/binary/lesson",
            "relUrl": "/binary/lesson",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Structures Guide",
            "content": "Objectives: . Students will be able to... . Understand the concept of data structures, including lists, dictionaries, and 2D arrays | Learn how to iterate through data structures using loops | Able to visualize data structures and iteration processes | Able to apply their knowledge to build simulations/interactions using lists and iteration | Learn how to store list and dictionary content in databases | . Lesson 1: Lists and Iteration . Lists (Ethan) . Lists are a type of data structure that can store multiple items in a single variable | Lists are defined using square brackets [ ] | Each item in a list is separated by a comma | Lists are indexed, starting at 0 | . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;grape&quot;] print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;] . Accessing Lists . To access individual items in a list, we use the index of the item. | Python uses zero-based indexing, which means the first item in the list has an index of 0, the second item has an index of 1, and so on. | . print(fruits[0]) print(fruits[2]) . apple orange . Slicing Lists . We can also extract a specific portion of a list using slicing. | We use the colon : operator to specify a range of indices to include. | . print(fruits[0:2]) . [&#39;apple&#39;, &#39;banana&#39;] . Modifying List Items . Lists are mutable, meaning that we can change the value of an item in a list. | To change the value of an item in a list, we can use the indexing operator (square brackets) to access the item and then assign a new value to it. | . fruits[2] = &quot;pear&quot; print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;] . Adding and Removing List Items . Adding . Use the append() method to add an item to the end of a list. | . fruits.append(&quot;kiwi&quot;) # Adds &#39;kiwi&#39; to the end of the list print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the insert() method to add an item to a specific index in a list. | . fruits.insert(1, &quot;peach&quot;) # Inserts &quot;peach&quot; at index 1 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Removing . Use the remove() method to remove the first occurrence of an item from a list. | . fruits.remove(&#39;pear&#39;) # Removes the first occurrence of &#39;pear&#39; print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the pop() method to remove the item at a specific index from a list. | . fruits.pop(2) # Removes the item at index 2 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the clear() method to remove all items from a list. | . fruits.clear() # Removes all items from the list print(fruits) . [] . Function Explanation . InsertToList . This function is designed to insert a new item into a list at a specific index. | It first retrieves the new item to be added and the index at which to add it from the HTML document. | It checks if the retrieved values are both valid integers and if the index is within the range of the list. | If the values are valid, the function uses the splice() method to insert the new item into the list at the specified index. | In JavaScript, the splice() method modifies an array by removing, replacing, or adding elements. | The splice() method takes three arguments:the index at which to start changing the list, the number of elements to remove, and the new item to add. - The item is inserted without removing any elements, so we pass 0 as the second argument. | Finally, the function calls the visualizeList() function to display the updated list on the web page. | . // Get the value of the new item and the index where it should be inserted function insertToList() { let newItem = parseInt(document.getElementById(&quot;newItem&quot;).value); let index = parseInt(document.getElementById(&quot;index&quot;).value); if (!isNaN(newItem) &amp;&amp; !isNaN(index) &amp;&amp; index &gt;= 0 &amp;&amp; index &lt;= myList.length) { // splice() method to insert the new item into the list myList.splice(index - 1, 0, newItem); // Call the visualizeList() function to update the display of the list visualizeList(); } } . SortList . In JavaScript, sort() is a built-in method used to sort the elements of an array in place. The default sort order is ascending, but you can also specify a descending sort order. | In this case, the function sorts myList in ascending order based on their numerical value. | . // Sort myList array in ascending order function sortList() { // The function a - b is used, which subtracts the second element b from the first element a. // If the result is negative, a is sorted before b. If the result is positive, b is sorted before a. If the result is zero, the order of the elements is unchanged. myList.sort((a, b) =&gt; a - b); visualizeList(); } . Applications of Lists . Data processing: Lists are commonly used to store and process large amounts of data. In data analysis and machine learning, lists are often used to store datasets. . | Gaming: Lists are used extensively in game development to store game objects, player statistics, and game maps. . | Finance: Lists are used in finance to store and process financial data, such as stock prices and market trends. The data from these lists can also be used to calculate financial metrics and to create financial models. . | . Hacks (0.3) . Make your own list and manipulate it via accessing specific elements, adding or removing elements, etc. | Extra: Make an interactable visualization that can manipulate elements in a list such as the one demonstrated in our flask repository | . nba = [&quot;bulls&quot;, &quot;bucks&quot;, &quot;knicks&quot;, &quot;lakers&quot;, &quot;suns&quot;] print(nba) nba.pop(2) print(nba) . [&#39;bulls&#39;, &#39;bucks&#39;, &#39;knicks&#39;, &#39;lakers&#39;, &#39;suns&#39;] [&#39;bulls&#39;, &#39;bucks&#39;, &#39;lakers&#39;, &#39;suns&#39;] . Iteration (Alex) . What is iteration? . In programming, iteration refers to the process of repeating a set of instructions until a specific condition is met. This can be achieved using loop structures like for loops and while loops. | . For Loops . A for loop is used to iterate over a sequence (e.g. a list, tuple, string, etc.) and execute a set of statements for each item in the sequence. Here&#39;s the basic syntax of a for loop in Python: | . sequence = [1,2,3,4,5,6,7] for variable in sequence: print(variable) . 1 2 3 4 5 6 7 . my_string = &quot;Hello, World!&quot; for character in my_string: print(character) . H e l l o , W o r l d ! . While Loops A while loop is used to repeat a set of statements as long as a condition is true. Here&#39;s the basic syntax of a while loop in Python: . num = 0 while num &lt; 5: print(num) num += 1 . 0 1 2 3 4 . Applications of Iteration . Iteration is a fundamental concept in computer programming and is used in a variety of real-life applications. Here are some examples:Data Processing . Data processing often involves iterating over large datasets to perform specific operations on each element. For example, in a data analysis task, you might iterate over a list of numbers to compute the average, or iterate over a list of strings to find the longest string. | . User Interfaces . User interfaces often involve iteration to display and handle data from various sources. For example, in a web application, you might iterate over a list of users to display their information in a table. Similarly, in a desktop application, you might iterate over a list of files to display them in a file explorer. | . Machine Learning . Machine learning algorithms often involve iterative processes to train models and improve their accuracy. For example, in a gradient descent algorithm, you might iterate over a set of training data to update the model&#39;s parameters and minimize the loss function. | . Popcorn hack (0.3) . Make a list related to your CPT project | Make a while loop that will print each term in the list | Make a for loop that will print each term in the list | . Simulation mechanics . In Python, pop() is a method that is used to remove and return an element from a list. The syntax for using pop() is as follows: | . CPT_List = [&quot;Canes&quot;, &quot;Daves&quot;, &quot;Hike&quot;, &quot;Park&quot;] for variable in CPT_List: print(variable) . Canes Daves Hike Park . num = 0 while num &lt; 3: print(CPT_List[num]) num += 1 . Canes Daves Hike . my_list = [1, 2, 3, 4, 5] print(my_list) my_list.pop() print(my_list) my_list.pop(1) print(my_list) . [1, 2, 3, 4, 5] [1, 2, 3, 4] [1, 3, 4] . In Python, append() is a built-in method that is used to add an element to the end of a list. The syntax for using append() is as follows: . my_list = [] my_list.append(1) my_list.append(2) my_list.append(3) print(my_list) . [1, 2, 3] . Dictionary Lesson / 2D Arrays . Lesson 2: Dictionary&#39;s and 2 Dimensional Arrays . Advay Shindikar and Amay Advani . Objective: . Understand the concept of dictionaries and how they can be applied | Learn how to add, modify, and delete entries in a dictionary using the assignment operator and the del keyword | Understand the concept of 2D arrays and how they can be used to store data in rows and columns | Learn how to create a 2D array in Python using a nested list | Understand how to access values in a 2D array using row and column indices | Learn how to use indexing and slicing to access a subset of a 2D array | . . student = {&#39;name&#39;: &#39;Advay&#39;, &#39;age&#39;: 16, &#39;Sophomore&#39;} . students = [&#39;advay&#39;, &#39;amay&#39;, &#39;rohin&#39;, &#39;alex&#39;, &#39;ethan&#39;] . . Check In: . Of the above code segments, which is a list and which is a dictionary? | This is the dictionary: student = {&#39;name&#39;: &#39;Advay&#39;, &#39;age&#39;: 16, &#39;Sophomore&#39;}. | What is a dictionary and how is it used? | A dictionary is used to store data in key-value pairs. Each key is unique, and it corresponds to a certain value. | What is a 2D Array? | It is a data structure in programming that contains rows and columns of data. | How are 2D Arrays different from 1D Arrays or Lists and what can they be used for? | The main difference between 2D arrays and 1D arrays or lists is that 2D arrays have two indices to access each element, while 1D arrays or lists have only one index. | . Manipulating Dictionaries . grocery_dict = {} # ask the user to enter grocery items and their prices while True: item = input(&quot;Enter an item for your grocery list (or &#39;done&#39; to exit): &quot;) if item == &quot;done&quot;: break else: price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price # print the grocery list and total cost total_cost = 0 while True: print(&quot;Your grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) # ask the user to choose an action action = input(&quot;What would you like to do? (add/remove/done) &quot;) # add a new item to the grocery list if action == &quot;add&quot;: item = input(&quot;Enter the name of the item you would like to add: &quot;) price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price total_cost += price # remove an item from the j item = input(&quot;Enter the name of the item you would like to remove: &quot;) if item in grocery_dict: total_cost -= grocery_dict[item] del grocery_dict[item] else: print(&quot;Item not found in grocery list!&quot;) # exit the loop and print the final grocery list and total cost elif action == &quot;done&quot;: break print(&quot;Final grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) . Dictionaries (0.3): . my_dict = {&quot;apple&quot;: 1, &quot;banana&quot;: 2, &quot;orange&quot;: 3} print(my_dict[&quot;apple&quot;]) #adding fruit my_dict[&quot;grape&quot;] = 4 print(my_dict) #deleting fruit del my_dict[&quot;banana&quot;] print(my_dict) . 1 {&#39;apple&#39;: 1, &#39;banana&#39;: 2, &#39;orange&#39;: 3, &#39;grape&#39;: 4} {&#39;apple&#39;: 1, &#39;orange&#39;: 3, &#39;grape&#39;: 4} . 2D Arrays (0.3): . import numpy as np my_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) my_array[1][2] = 10 print(my_array) . [[ 1 2 3] [ 4 5 10] [ 7 8 9]] . from PIL import Image import numpy as np # Create a 2D array my_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Convert the array to a data type that PIL can handle my_array = my_array.astype(np.uint8) # Convert the array to an image img = Image.fromarray(my_array) # Display the image img.show() .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/04/27/P4M-DataStructures-TeamEAAR.html",
            "relUrl": "/2023/04/27/P4M-DataStructures-TeamEAAR.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "DevOps Lesson",
            "content": "import socket # Change the following host and see what IP it prints! host = &quot;google.com&quot; # this allows us to translate a host name into an ip adress ip = socket.gethostbyname(host) print(ip) . 142.250.189.14 . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) print(&quot;Successfully connected!&quot;) . Successfully connected! . Check-In . What is an IP address? IP address is used to identify and communicate with devices on a certain network suhc as a computer. | What is a TCP port? TCP allows us to tell if each packet is received correctly. Allows us to abstract and reassemble certain parts of data during a transaction. | with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) # Send a GET request to &quot;/&quot; s.sendall(b&quot;GET / HTTP/1.1 r n r n&quot;) # Recieve &amp; print 2048 bytes of data data = s.recv(2048) print(data.decode()) . HTTP/1.1 200 OK Date: Thu, 27 Apr 2023 20:00:10 GMT Expires: -1 Cache-Control: private, max-age=0 Content-Type: text/html; charset=ISO-8859-1 Content-Security-Policy-Report-Only: object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-SP2mcegfZKgAiTs1Q5oPmw&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp P3P: CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34; Server: gws X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN Set-Cookie: 1P_JAR=2023-04-27-20; expires=Sat, 27-May-2023 20:00:10 GMT; path=/; domain=.google.com; Secure Set-Cookie: AEC=AUEFqZcQUWVPgRRRFqHW8VG-TDYbWzat_l4oj_FRirlwKwhOJqWx0106pwM; expires=Tue, 24-Oct-2023 20:00:10 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax Set-Cookie: NID=511=Ck8OmI53dwHeTh6a0eEjBYvdYAxf7fsVclvZW5eig5tD-xsOGK18yNjB5eURDu8d5fbnRJqCyiqQo-2Bfu6Ymbf70y1O-Rh0afS7fSmmPC7Neu54I2kH6bqzEgHJv4TkRBcNeXxc_LQ3Qbr6Kex3-HgcPGd4E0VE751HpZIRQcU; expires=Fri, 27-Oct-2023 20:00:10 GMT; path=/; domain=.google.com; HttpOnly Accept-Ranges: none Vary: Accept-Encoding Transfer-Encoding: chunked 5966 &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content=&#34;Search the world&#39;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&#39;re looking for.&#34; name=&#34;description&#34;&gt;&lt;meta content=&#34;noodp&#34; name=&#34;robots&#34;&gt;&lt;meta content=&#34;text/html; charset=UTF-8&#34; http-equiv=&#34;Content-Type&#34;&gt;&lt;meta content=&#34;/images/branding/googleg/1x/googleg_standard_color_128dp.png&#34; itemprop=&#34;image&#34;&gt;&lt;title&gt;Google&lt;/title&gt;&lt;script nonce=&#34;SP2mcegfZKgAiTs1Q5oPmw&#34;&gt;(function(){window.google={kEI:&#39;StRKZPe8I8PJkPIP1_aJyA4&#39;,kEXPI:&#39;0,1303458,55951,6059,206,2415,2389,2316,383,246,5,1129120,1197763,631,380097,16114,28684,22430,1362,284,12034,4747,12834,4998,13228,3847,38444,2872,2891,3926,4422,3406,606,30668,27618,2404,15324,432,3,1590,1,16916,2652,4,1528,2304,29062,13065,13658,2980,1457,16786,5830,2527,4094,7596,1 . import requests # Change the URL to whatever you&#39;d like response = requests.get(&quot;https://google.com&quot;) print(&quot;Status code:&quot;, response.status_code) print(&quot;Headers:&quot;, response.headers) print(&quot;Response text:&quot;, response.text[:100]) # Add a line to print the &quot;Content-Type&quot; header of the response # Try an image URL! . Status code: 200 Headers: {&#39;Date&#39;: &#39;Thu, 27 Apr 2023 20:00:12 GMT&#39;, &#39;Expires&#39;: &#39;-1&#39;, &#39;Cache-Control&#39;: &#39;private, max-age=0&#39;, &#39;Content-Type&#39;: &#39;text/html; charset=ISO-8859-1&#39;, &#39;Content-Security-Policy-Report-Only&#39;: &#34;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-ZEYJ4PBue2lU75mPhf-GiA&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&#34;, &#39;P3P&#39;: &#39;CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Server&#39;: &#39;gws&#39;, &#39;X-XSS-Protection&#39;: &#39;0&#39;, &#39;X-Frame-Options&#39;: &#39;SAMEORIGIN&#39;, &#39;Set-Cookie&#39;: &#39;1P_JAR=2023-04-27-20; expires=Sat, 27-May-2023 20:00:12 GMT; path=/; domain=.google.com; Secure, AEC=AUEFqZehjqCqul40lf0erll9TcMmrEVT4rtWQ08whOdt_H10OSvDGyVHXCs; expires=Tue, 24-Oct-2023 20:00:12 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax, NID=511=IfzhNiDYofeptFX5aeBqIWonmtW1RsndjEIhqUUI-aIFo6XlaZtGDwV3fKAQgjr6xGGqzikLB5JralgvSYw8rV2wmcZhBZ8FxKvov-P7VJ_s7Gh9Jdr9WRfI8tDp6egdeL2l2sEuqSA5nmVG0vsr-RJCmlxKOHzCXRfIhfYBjCY; expires=Fri, 27-Oct-2023 20:00:12 GMT; path=/; domain=.google.com; HttpOnly&#39;, &#39;Alt-Svc&#39;: &#39;h3=&#34;:443&#34;; ma=2592000,h3-29=&#34;:443&#34;; ma=2592000&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;} Response text: &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content . NGINX . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws) print(response.text) . &lt;html&gt;&lt;head&gt;&lt;title&gt;ContentKeeper&lt;/title&gt;&lt;/heQad&gt; &lt;body bgcolor=&#34;#A02E5F&#34; text=&#34;White&#34; link=&#34;Lime&#34; vlink=&#34;Aqua&#34;&gt; &lt;center&gt;&lt;br&gt;&lt;h1&gt;ContentKeeper&lt;br&gt;Non-Managed Site&lt;/h1&gt; No access is available to NON-Managed Sites.&lt;br&gt;&lt;br&gt; &lt;table border=&#34;1&#34; cellspacing=&#34;0&#34;&gt; &lt;tr&gt;&lt;td&gt;URL&lt;/td&gt;&lt;td&gt;&lt;b&gt;3.130.255.192&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Username&lt;/td&gt;&lt;td&gt;&lt;b&gt;1924258/pusd&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;/body&gt;&lt;/html&gt; . Configuration . server { // Listen on virtual &quot;port 80&quot; listen 80; listen [::]:80; server_name 3.130.255.192; location / { // Inform server about original client proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; // Forward all requests transparently to the server running on our computer proxy_pass http://localhost:9099; } } . Load Balancing . upstream example.com { server server1.example.com; server server1.example.com; } . HTTP Headers . server { add_header X-Cool-Header &quot;I love APCSP!&quot;; location /pages { add_header X-Cooler-Header &quot;This is my secret header!&quot;; } } . Check In . Research 1 HTTP header and describe, in detail, its purpose. | Another HTTP header that is commonly used is the &quot;Authorization&quot; header. The purpose of the Authorization header is to provide credentials to access a protected resource. The header typically contains some type of authentication information that is used to authenticate the user making the request. | . Write a line in a sample NGINX configuration that will add that specific header to the /information location | location /information { add_header Authorization &quot;Bearer my_access_token&quot;; ... } | . Explain the purpose of the load balancing performed by NGINX | The purpose of load balancing performed by NGINX is to distribute incoming network traffic across multiple servers to improve performance, increase availability, and reduce the risk of downtime due to server failures. | . Modify the following code block to obtain the value of the secret header on /products of the AWS site | Check below | . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws + &quot;/products&quot;) print(&quot;The secret header is: &quot; + response.headers[&#39;X-Cooler-Header&#39;]) . The secret header is: This is my secret header! . Hacks . Complete the above check-in questions and change the hosts (0.1) | Complete the above code-segment to retrieve the secret header (0.1) | . Bonus (0.05) . Create a diagram showing the layers of abstraction that allow us to use HTTP (IP, TCP, etc.) . | . DNS Hacks . What does DNS stand for? | DNS stands for Domain Name System. | . What is the purpose of DNS? | The purpose of DNS is turn domain names into IP addresses. | . How does DNS work? | When a user types a domain name into their web browser, the browser sends a request to a DNS resolver, which is a server that is configured to look up the IP address associated with that domain name. | . What is a DNS resolver? | A DNS resolver is a server that is responsible for finding domain names to IP addresses. When a user types a domain name into their browser, the browser sends a request to a DNS resolver, which then looks up the IP address associated with that domain name. | . Make a canva image on the process of DNS (you can base it off of the previous slide) | | . CORS Hacks . Explain what CORS is and what it stands for | CORS stands for Cross-Origin Resource Sharing. It is a mechanism that allows web servers to specify which domains are allowed to access the resources on the server. By default, web browsers restrict cross-origin HTTP requests initiated from scripts, so CORS is used to lessen these restrictions and allow web applications to access resources from different domains. | . Describe how you would be able to implement CORS into your own websites | To implement CORS in a website, the server-side application needs to set the Access-Control-Allow-Origin header to indicate which origins are allowed to access the server&#39;s resources. Then the server can set other headers to control the types of HTTP methods and headers that are allowed to be used in cross-origin requests. | . Describe why you would want to implement CORS into your own websites | To allow access to resources hosted on a different domain, such as third-party API. | . How could use CORS to benefit yourself in the future? | It can demonstrate my skills in web security, which are highly valued skills in the industry. | . Total: 0.2 points . KASM Hacks . What is the purpose of &quot;sudo&quot; when running commands in terminal? | The &quot;sudo&quot; command is used to run commands with extra privileges in a terminal. It allows a user to execute commands as the root user, which has unrestricted access to the system and can perform administrative tasks that regular users cannot. Using &quot;sudo&quot; is necessary when performing tasks that require administrative privileges, such as installing software. | . What are some commands which allow us to look at how the storage of a machine is set up as? | &quot;df&quot; - displays the amount of disk space used and available on mounted file systems. | . What do you think are some alternatives to running &quot;curl -O&quot; to get the zip file for KASM? | Downloading the zip file manually from the website and saving it to a local directory. | . What kind of commands do you think the &quot;install.sh&quot; command has and why is it necessary to call it? | The &quot;install.sh&quot; command is likely to have commands that install the software that it is associated with. It is necessary to call &quot;install.sh&quot; because it helps the installation process and ensures that all necessary dependencies are installed correctly. | . Explain in at least 3-4 sentences how deploying KASM is related to/requires other topics talked about in the lesson and/or potential ways to add things mentioned in the lesson to this guide. | Setting up microservices to manage and secure application services across many environments is part of the KASM deployment process. Understanding HTTP is necessary for this because it is the protocol used for microservice communication. In order for the process to function, CORS must be set up to allow cross-domain requests between microservices. Total: 0.2 points | . AWS/RDS Hacks () . See the setup post . Create your own database in the EC2 I have created (ec2-database-connect) name it with your first and last name (example: aditya-nawandhar) (0.1) | Create a table using the commands on the link provided. (0.1) | using commands from the link provided make columns and rows with test data (can be anything) (example: “name” and “class” are the columns with rows being something like “Aditya” and “Junior”). At least 4 test rows (0.1) | additional points if the data matches CPT (Bonus: 0.05) | . | . Total: 0.3 .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/04/26/devops-lesson.html",
            "relUrl": "/2023/04/26/devops-lesson.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . - What are some examples of 2d Arrays . - What is a modern day game that could be classified as a 2D array . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . This is a normal array: [&#39;Hello&#39;, &#39;Hi&#39;, &#39;Whats up&#39;] This is a 2D array [&#39;Name&#39;, &#39;ID&#39;, &#39;Age&#39;] [&#39;Kush&#39;, &#39;1&#39;, &#39;16&#39;] [&#39;Finn&#39;, &#39;2&#39;, &#39;16&#39;] . How I used 2D Arrays (game example) . - Describe a 2D array in your own words . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 2: Iteration . &gt; Robot Game:Finn Carpenter- What is the defenition of iteration in your own words . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | Explain how the game relates to itertation | | . How I used iteration (game example) . - What parts of the code use iteration . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # print(List[0]) print(Dict[1]) . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . - Explain which parts of the code use lists . - Explain what list manipulation is happening in that part . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Unscramble the following Computer Science Word: olpo Congratulations, you unscrambled the word! . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | . | Create a code segment with iteration that does something cool | . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works (2D Part) | Give 3 Examples of games that can be made from 2D arrays | . List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries | Make a code block that manipulates either a list or a dictionary | . General . What are some examples of 2d Arrays | Sudoku, Chessboard, Spreadsheet, Tic Tac Toe, and a Calendar | What is a modern day game that could be classified as a 2D array | Minesweeper | Describe a 2D array in your own words | A 2D array is a collection of data elements organized in a grid format consisting of rows and columns. It is a data structure that can be used to store and manipulate data. | What is the defenition of iteration in your own words | Iteration is a process that involves repeating a set of instructions or code multiple times until a specific condition is met or a desired result is achieved. | What parts of the code use iteration | The following parts of the code use iteration: | The &quot;for&quot; loops used to push &#39;up&#39;, &#39;down&#39;, &#39;left&#39;, and &#39;right&#39; movements to the &#39;movements&#39; array use iteration to repeat the code block multiple times. | The &quot;setInterval&quot; function is also an example of iteration, as it executes the provided function repeatedly at a specified interval until the condition of the &quot;if&quot; statement is met. | Explain which parts of the code use lists | The following parts of the code use lists: | The variable &quot;word_list&quot; is a list of words that can be randomly selected for the game. | The line &quot;word = random.choice(word_list)&quot; selects a random word from the &quot;word_list&quot; and assigns it to the variable &quot;word&quot;. | The line &quot;scrambled_word = &quot;&quot;.join(random.sample(word, len(word)))&quot; uses the &quot;random.sample&quot; function to shuffle the letters of the selected word, and then joins them back together into a string. | Explain what list manipulation is happening in that part | The list manipulation happens when creating the scrambled_word variable. It takes a word from the word_list and shuffles its letters using random.sample() to create a new, scrambled version of the word. The join() function then concatenates the shuffled letters back together into a string. This process manipulates the order of the letters in the word to create a new list, which is then turned into a string. | . Iteration . . for i in range(1, 11): print(i * 2) . 2 4 6 8 10 12 14 16 18 20 . 2D Array . The 2D array board is used to represent the Tic-Tac-Toe game board. It is a list of three lists, where each list contains three elements representing a row of the board. Each element can have the value &#39;X&#39;, &#39;O&#39;, or &#39; &#39; (an empty space). | Minesweeper, Battleship, and Connect Four | . List and Dictionaries . A list is an ordered collection of elements that can be of any data type. Elements in a list are stored in a linear sequence and are indexed by their position in the list. Lists can be modified after creation. You can add, remove, or modify elements in a list. You can also access individual elements of a list using indexing operations. | A dictionar is an unordered collection of key-value pairs. Each element in a dictionary is identified by a unique key, which is used to retrieve the corresponding value. Dictionariescan be modified by adding, removing, or updating key-value pairs. Unlike lists, dictionaries are not indexed by position; instead, they are indexed by their keys. | . numbers = [2, 4, 5, 1, 3] numbers.sort() print(numbers) numbers.pop(0) print(numbers) . [1, 2, 3, 4, 5] [2, 3, 4, 5] .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/04/21/EOYPLAYGROUND.html",
            "relUrl": "/2023/04/21/EOYPLAYGROUND.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Tri-3-Lesson",
            "content": "What you should Have to Start . Should have wget this file (tri3-lesson.ipynb) | wget this file: https://raw.githubusercontent.com/JoshuaW03628/Repository-1/master/nba_player_statistics.csv | Copy Path from nba_player_statistics.csv and replace prior path for it. | . Lesson Portion 1: ReIntroduction to Data Analysis, NunPy, and Pandas, Why is it important? . Data Analysis. . Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances. | . What is NunPy and Pandas . Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions. | Imagine you have a lot of toys, but they are all mixed up in a big box. NumPy helps you to put all the same types of toys together, like all the cars in one pile and all the dolls in another. Pandas is like a helper that helps you to remember where each toy is located. So, if you want to find a specific toy, like a red car, you can ask Pandas to find it for you. | Just like how it&#39;s easier to find a toy when they are sorted and organized, it&#39;s easier for grown-ups to understand and analyze big sets of numbers when they use NumPy and Pandas. | . Lesson Portion 2 More into NunPy . What we are covering; . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Examining NumPy arrays | Creating NumPy arrays and performing intermediate array operations | Popcorn Hacks, Make your own percentile NunPy array | . What is NunPy&#39;s use in data analysis/ how to import NunPy. . NumPy is a tool in Python that helps with doing math and data analysis. It&#39;s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It&#39;s used a lot by scientists and people who work with data because it makes their work easier and faster. . import numpy as np . List of NunPy Functions, what they do, and examples. . Link; https://www.educba.com/numpy-functions/ | . Example of Using NunPy in Our Project . This code calculates the total plate appearances for a baseball player using NumPy&#39;s sum() function, similar to the original example. It then uses NumPy to calculate the total number of bases (hits plus walks) for the player, and divides that by the total number of plate appearances to get the on-base percentage. The results are then printed to the console. . import numpy as np # Example data player_hits = np.array([3, 1, 2, 0, 1, 2, 1, 2]) # Player&#39;s hits in each game player_walks = np.array([1, 0, 0, 1, 2, 1, 1, 0]) # Player&#39;s walks in each game player_strikeouts = np.array([2, 1, 0, 2, 1, 1, 0, 1]) # Player&#39;s strikeouts in each game # array to store plate appearances (PA) for the player total_pa = np.sum(player_hits != 0) + np.sum(player_walks) + np.sum(player_strikeouts) # array to store on-base percentage (OBP) for the player total_bases = np.sum(player_hits) + np.sum(player_walks) obp = total_bases / total_pa # Print the total plate appearances and on-base percentage for the player print(f&quot;Total plate appearances: {total_pa}&quot;) print(f&quot;On-base percentage: {obp:.3f}&quot;) . Activity 1; PopCorn Hacks; Creating a NunPy Array and Analyzing the Data using Array Operations . import numpy as np #Create a NumPy array of the heights of players in a basketball team heights = np.array([192, 195, 193, 200, 211, 199, 201, 198, 184, 190, 196, 203, 208, 182, 207]) # Calculate the percentile rank of each player&#39;s height percentiles = np.percentile(heights, [25, 50, 75]) # Print the results print(&quot;The 25th percentile height is&quot;, percentiles[0], &quot;cm.&quot;) print(&quot;The 50th percentile height is&quot;, percentiles[1], &quot;cm.&quot;) print(&quot;The 75th percentile height is&quot;, percentiles[2], &quot;cm.&quot;) # Determine the number of players who are in the top 10% tallest top_10_percent = np.percentile(heights, 90) tallest_players = heights[heights &gt;= top_10_percent] print(&quot;There are&quot;, len(tallest_players), &quot;players in the top 10% tallest.&quot;) . import numpy as np #Create a NumPy array of the x x = np.array([]) # Calculate the percentile rank of x y = np.percentile(x, [1,2,3]) # Print the results print(&quot;&quot;, percentiles[0], &quot;&quot;) print(&quot;&quot;, percentiles[1], &quot;&quot;) print(&quot;&quot;, percentiles[2], &quot;&quot;) # Determine the number of players who are in the top 10% x t = np.percentile(x, 90) z = x[x &gt;= t] print(&quot;There are&quot;, len(z), &quot;players in the top 10% (x).&quot;) . Lesson Portion 3 More into Pandas . What we are Covering . Explanation of Pandas and its uses in data analysis | Importing Pandas library | Loading data into Pandas DataFrames from CSV files | Manipulating and exploring data in Pandas DataFrames | Example of using Pandas for data analysis tasks such as filtering and sorting | . What are pandas and what is its purpose? . Pandas is a software library that is used in Python | Pandas are used for data analysis and data manipulation | Pandas offer data structures and operations for manipulating numerical tables and time series. | Pandas is free | . Things you can do using pandas . Data Cleansing; Identifying and correcting errors, inconsistencies, and inaccuracies in datasets. | Data fill; Filling in missing values in datasets. | Statistical Analysis; Analyzing datasets using statistical techniques to draw conclusions and make predictions. | Data Visualization; Representing datasets visually using graphs, charts, and other visual aids. | Data inspection; Examining datasets to identify potential issues or patterns, such as missing data, outliers, or trends. | . Pandas and Data analysis . The 2 most important data structures in Pandas are: . Series ; A Series is a one-dimensional labeled array that can hold data of any type (integer, float, string, etc.). It is similar to a column in a spreadsheet or a SQL table. Each element in a Series has a label, known as an index. A Series can be created from a list, a NumPy array, a dictionary, or another Pandas Series. | DataFrame ;A DataFrame is a two-dimensional labeled data structure that can hold data of different types (integer, float, string, etc.). It is similar to a spreadsheet or a SQL table. Each column in a DataFrame is a Series, and each row is indexed by a label, known as an index. A DataFrame can be created from a dictionary of Series or NumPy arrays, a list of dictionaries, or other Pandas DataFrame. | . Dataframes . import pandas as pd . pd.__version__ . Importing CSV Data . imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Specifies a player&#39;s name &#39;Jimmy Butler&#39; to filter the DataFrame for that player&#39;s stats. It creates a new DataFrame called &#39;player_stats&#39; which only contains rows where the &#39;NAME&#39; column matches &#39;Jimmy Butler&#39;. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), and assists per game (APG) using the print() function and string formatting. | The code uses the double square brackets [[PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]] to select only the columns corresponding to the player&#39;s points per game, rebounds per game, and assists per game from the player_stats DataFrame. | In summary, the code loads NBA player statistics data from a CSV file, filters it for a specific player, and displays the stats for that player&#39;s PPG, RPG, and APG using a Pandas DataFrame. | . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/Users/josh/Repository-1/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. . The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose. . Imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Asks the user to input a player name using the input() function and assigns it to the variable player_name. | Filters the DataFrame for the specified player name using the df[df[&#39;NAME&#39;] == player_name] syntax, and assigns the resulting DataFrame to the variable player_stats. | Checks if the player_stats DataFrame is empty using the empty attribute. If it is empty, prints &quot;No stats found for that player.&quot; Otherwise, it proceeds to step 6. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), assists per game (APG), and total points + rebounds + assists (P+R+A) using the print() function and string formatting. | In summary, this code loads NBA player statistics data from a CSV file, asks the user to input a player name, filters the DataFrame for that player&#39;s stats, and displays the player&#39;s stats for PPG, RPG, APG, and P+R+A. If the player is not found in the DataFrame, it prints a message indicating that no stats were found. | . import pandas as pd df = pd.read_csv(&#39;/Users/josh/Repository-1/nba_player_statistics.csv&#39;) # Load CSV file into a Pandas DataFrame player_name = input(&quot;Enter player name: &quot;) # Get player name input from user player_stats = df[df[&#39;NAME&#39;] == player_name] # Filter the DataFrame to only include stats for the specified player if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Display the stats for the player inputted. . Lesson Portion 4 . What we will be covering . Example of analyzing data using both NumPy and Pandas libraries | Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library | . Example of analyzing data using both NumPy and Pandas libraries . import numpy as np import pandas as pd # Load CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/Users/josh/Repository-1/nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for the specified player player_name = input(&quot;Enter player name: &quot;) player_stats = df[df[&#39;NAME&#39;] == player_name] if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Convert the player stats to a NumPy array player_stats_np = np.array(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Calculate the average of each statistic for the player player_stats_avg = np.mean(player_stats_np, axis=0) # Print out the average statistics for the player print(f&quot; nAverage stats for {player_name}:&quot;) print(f&quot;PPG: {player_stats_avg[0]:.2f}&quot;) print(f&quot;RPG: {player_stats_avg[1]:.2f}&quot;) print(f&quot;APG: {player_stats_avg[2]:.2f}&quot;) print(f&quot;P+R+A: {player_stats_avg[3]:.2f}&quot;) . NumPy impacts the given code because it performs operations on arrays efficiently. Specifically, it converts a Pandas DataFrame object to a NumPy array object, and then calculates the average statistics for a the player you guys inputted. Without NumPy, it would be more difficult and less efficient to perform these calculations on large data sets. It does the math for us. . Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library . Matplotlib is used essentially to create visuals of data. charts,diagrams,etc. . import numpy as np import pandas as pd import matplotlib.pyplot as plt # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;/Users/josh/Repository-1/nba_player_statistics.csv&#39;) # Print the first 5 rows of the DataFrame print(df.head()) # Calculate the mean, median, and standard deviation of the &#39;Points&#39; column mean_minutes = df[&#39;MPG&#39;].mean() median_minutes = df[&#39;MPG&#39;].median() stddev_minutes = df[&#39;MPG&#39;].std() # Print the results print(&#39;Mean Minutes: &#39;, mean_minutes) print(&#39;Median Minutes: &#39;, median_minutes) print(&#39;Standard Deviation Minutes: &#39;, stddev_minutes) # Create a histogram of the &#39;Points&#39; column using Matplotlib plt.hist(df[&#39;MPG&#39;], bins=20) plt.title(&#39;MPG Histogram&#39;) plt.xlabel(&#39;MPG&#39;) plt.ylabel(&#39;Frequency&#39;) plt.show() . In this example code, we first import the necessary libraries, including NumPy, Pandas, and Matplotlib. We then load the CSV file into a Pandas DataFrame using the pd.read_csv() function. We print the first 5 rows of the DataFrame using the df.head() function. Next, we calculate the mean, median, and standard deviation of the &#39;MPG&#39; column using the appropriate Pandas methods, and print the results. And, we create a histogram of the &#39;MPG&#39; column using Matplotlib by calling the plt.hist() function and setting appropriate axis labels and a title. We then call the plt.show() method to display the plot. Even though NumPy is not directly used in this code, it is an important underlying component of the pandas and Matplotlib libraries, which are used to load, manipulate and visualize data. It allows them to work more efficiently . Lesson Portion 5; Summary . Summary/Goals of Lesson: . One of our goals was to make you understand data analysis and how it can be important in optimizing business performance. We also wanted to make sure you understood the use of Pandas and NumPy libraries in data analysis, with a focus on NumPy. As someone who works with data, we find Pandas incredibly useful for manipulating, analyzing, and visualizing data in Python. The way we use pandas is to calculate individual player and team statistics. We are a group that works with numerical data, so NumPy is one of our favorite tools for working with arrays and applying mathematical functions to them. It is very fast at computing and manipulating arrays making it a very valuable tool for tracking statistics which is important to our group. For example, if you have an array of the points scored by each player in a game, you can use NumPy to calculate the total points scored, average points per player, or the highest and lowest scoring players. . Lesson Portion 6 Hacks . Printing a CSV File (0.5) . Use this link https://github.com/ali-ce/datasets to select csv file of a topic you are interested in, or you may find one online. | Once you select your topic make sure it is a csv file and then you want to press on the button that says raw. | After that copy that information and create a file with a name and .csv at the end and paste your information. | Below is a start that you can use for your hacks. | Your goal is to print 2 specific parts from data (example could be like population and country). | . Popcorn Hacks (0.2) . Lesson Portion 1. #### Answering Questions (0.2) | Found Below. | . Submit By Thursday 8:35 A.M. . How to Submit: Slack a Blog Post that includes all of your hacks to &quot;Joshua Williams&quot; on Slack. | . import pandas as pd # read the CSV file df = pd.read_csv(&quot;blank.csv&quot;) # display the data in a table print(df) . Question Hacks; . What is NumPy and how is it used in data analysis? . What is Pandas and how is it used in data analysis? . How is NunPy different than Pandas for data analysis? . What is a DataFrame? . What are some common operations you can perform with NunPy? . How Can You Incorporate Either of these Data Analysis Tools (NunPy, Pandas) into your project? .",
            "url": "https://jameshunter12.github.io/james-fastpage/notebooks/2023/04/19/tri3_lesson.html",
            "relUrl": "/notebooks/2023/04/19/tri3_lesson.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Lesson Plan Conclusion",
            "content": "(recap important ideas from lesson) . Takeaways From Our Lesson . Importance of data analysis and how it can be used in various fields . Data analysis is the process of examining, cleaning, transforming, and modeling data to extract useful information and insights. It is an important tool in many fields because it allows decision-makers to make more informed decisions based on the available data. . The importance of data analysis can be seen in various fields, such as: . Business: Businesses use data analysis to better understand their customers, identify trends and patterns, and make informed decisions about marketing, sales, and product development. . | Healthcare: Data analysis is used in healthcare to improve patient outcomes, monitor public health, and develop new treatments and therapies. . | Finance: Data analysis is used in finance to identify investment opportunities, manage risk, and analyze market trends. . | Education: Data analysis is used in education to measure student performance, identify areas where students need additional support, and improve the overall effectiveness of teaching. . | Government: Data analysis is used in government to improve public services, monitor policy effectiveness, and make informed decisions about resource allocation. . | In all of these fields, data analysis allows decision-makers to make more informed decisions, which can lead to better outcomes and more efficient use of resources. It also enables organizations to identify opportunities for improvement and make data-driven decisions that can lead to better results. . Resources for further learning about NumPy and Pandas libraries . NumPy and Pandas are two of the most widely used Python libraries for data manipulation, analysis, and visualization. Here are some resources that can help you learn more about these libraries: . NumPy official documentation - https://numpy.org/doc/stable/: This is the official documentation for NumPy, which provides detailed explanations of the various functionalities and features of the library. . | Pandas official documentation - https://pandas.pydata.org/docs/: This is the official documentation for Pandas, which provides detailed explanations of the various functionalities and features of the library. . | NumPy Tutorial - https://numpy.org/doc/stable/user/quickstart.html: This tutorial provides a quick overview of NumPy and its functionalities, and is a good place to start for beginners. . | Pandas Tutorial - https://pandas.pydata.org/docs/getting_started/intro_tutorials/index.html: This tutorial provides a comprehensive introduction to Pandas, including data structures, indexing, and basic operations. . |",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/04/15/lessonplan.html",
            "relUrl": "/markdown/2023/04/15/lessonplan.html",
            "date": " • Apr 15, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "CPT Draft",
            "content": "Procedural Abstraction, discussion on code and abstraction techniques used: Frontend/Backend, Functions, Classes, etc . The program allows for the user to input an activity that they participated in. The list of activities are easily updated with the frontend page, so that it can allow all of the users to see new activities that have been added. | The users are offered 3 boxes that are used to input their information about the activity like the name of the activity, the address of the activity, and their rating of the activity. Once all 3 boxes are filled out the user clicks the “add” button, which then allows their information to be displayed into the table on the site. | The initial call verifies if the response status is 200, in which case the information from the database won&#39;t be displayed on the frontend. | The subsequent call verifies if the information obtained from the database is correct and readable, and if so, it&#39;s displayed on the frontend as a result. . | . | . Data Abstraction, discussion on data used and data structures to support project: JSON, Dictionaries, Lists, and/or Database Tables. . An SQLite Database was used, and within the Database, there was a table that contained all of the data that was being collected about each of the activities. The name of the class, which is “ActivityDay”, has the table called “ActivityTime” inside of it. | The data inside the table of SQLite Database represents all the activities and the associated information with them. This includes the activity name, the address of the activity, and the level of fun. | The table named “ActivityTime” manages complexity because when the user inputs information about an activity the frontend is automatically updated. If I were to use a list it would be a lot worse because you would have to automatically update it, but with an SQLite Database it allows for automatic updates. | The first call is checking if the error response status is equivalent to 200 or not. | The second call is verifying if there is any readable information available in the SQLite Database and if it can be presented on the frontend in a user-friendly format. . | . | . Usage of Control Structures, ie Iteration and Conditional Statements. Areas where you use lists and interation in Frontend Display. Areas were you decide and execulte different paths of code, for instance Create vs Read vs Update vs Delete. Also, show a function where a different parameter or condition causes a differen result. . The function involved is called &quot;read_users()&quot;, and it enables the frontend of the site to display the activities and their corresponding identifiers stored in the database&#39;s table. The function takes in a parameter called &quot;read_options&quot;, which is retrieved using the code snippet provided above. The information retrieved from the database is formatted as JSON and presented in a readable manner on the site&#39;s frontend. | The fetching algorithm includes a constant called &quot;errorMsg&quot; that is printed to the console if certain error conditions are met. The algorithm uses the JavaScript Fetch feature to obtain the required data from the API, and an if-statement is used to filter response errors by checking if the response status is 200. If the status is not 200, iteration is used to search for matching row data in the SQLite Database Table &quot;ActivityTime&quot;. The order of the steps in this function is crucial. When a match is found, the data is displayed in a readable JSON format on the frontend site for all users to see. | The outcome of the first call is that any invalid data won&#39;t be displayed on the frontend of the website for users to read. | The result of the second call is that all valid data is added to the frontend table, and it&#39;s presented in a readable manner for all users of the website feature. . | . | | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/04/10/cptdraft.html",
            "relUrl": "/markdown/2023/04/10/cptdraft.html",
            "date": " • Apr 10, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Internet Hacks",
            "content": "Processor GHz: Usually range from 2.5 GHz to 3.5 GHz. . | Memory in GB: Usually range from 16 GB to 64 GB. . | Storage in GB: Usually range from a few hundred gigabytes to several terabytes of solid-state drive (SSD) storage or on a hard drive. . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/04/01/internet.html",
            "relUrl": "/markdown/2023/04/01/internet.html",
            "date": " • Apr 1, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? #There are 3 outputs #They are in ascending order #No duplicate values # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # They are the same since they cant have duplicates . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . basketball_teams = { &quot;nba&quot;: &quot;basketball&quot;, &quot;top_team&quot;: &quot;Bucks&quot;, &quot;year&quot;: 2023, &quot;champ-contenders&quot;: [&quot;Nuggets&quot;, &quot;Grizzlies&quot;, &quot;Celtics&quot;], &quot;standings&quot;: { 1: &quot;Clippers&quot;, 2: &quot;Knicks&quot;, 3: &quot;Kings&quot;, 4: &quot;Suns&quot;, 5: &quot;Cavs&quot;, 6: &quot;Kings&quot;, 7: &quot;Clippers&quot;, 8: &quot;Sixers&quot;, 9: &quot;Nets&quot;, 10: &quot;Warriors&quot;, 11: &quot;Timberwolves&quot;, 12: &quot;Pelicans&quot;, 13: &quot;Heat&quot;, 14: &quot;Hawks&quot;, 15: &quot;Raptors&quot;, 16: &quot;Lakers&quot;, 17: &quot;Bulls&quot;, 18: &quot;Thunder&quot; } } # What data structures do you see? # Lists # Dictionaries # Printing the dictionary print(basketball_teams) . {&#39;nba&#39;: &#39;basketball&#39;, &#39;top_team&#39;: &#39;Bucks&#39;, &#39;year&#39;: 2023, &#39;champ-contenders&#39;: [&#39;Nuggets&#39;, &#39;Grizzlies&#39;, &#39;Celtics&#39;], &#39;standings&#39;: {1: &#39;Clippers&#39;, 2: &#39;Knicks&#39;, 3: &#39;Kings&#39;, 4: &#39;Suns&#39;, 5: &#39;Cavs&#39;, 6: &#39;Kings&#39;, 7: &#39;Clippers&#39;, 8: &#39;Sixers&#39;, 9: &#39;Nets&#39;, 10: &#39;Warriors&#39;, 11: &#39;Timberwolves&#39;, 12: &#39;Pelicans&#39;, 13: &#39;Heat&#39;, 14: &#39;Hawks&#39;, 15: &#39;Raptors&#39;, 16: &#39;Lakers&#39;, 17: &#39;Bulls&#39;, 18: &#39;Thunder&#39;}} . print(basketball_teams.get(&#39;standings&#39;)) # or print(&quot;Champ Contenders:&quot;) print(basketball_teams[&#39;champ-contenders&#39;]) . # Using conditionals to retrieve a random song answer = input(&quot;Will Lakers win the NBA title? &quot;) if answer.lower() == &quot;never&quot;: print(&quot;Finally a some one that understands basketball.&quot;) else: print(&quot;Lakers will never win another NBA title!&quot;) . basketball_teams[&quot;best&quot;] = list(set([&#39;LeBron&#39;, &#39;MJ&#39;, &#39;Kobe&#39;, &#39;LeBron&#39; ])) # What can you change to make sure there are no duplicate producers? # # Use a set to remove duplicates # Printing the dictionary print(&quot;the best NBA players are:&quot;) print(basketball_teams[&quot;best&quot;]) . basketball_teams[&quot;standings&quot;].update({18: &quot;DNHS&quot;}) basketball_teams[&quot;players&quot;] = &quot;Ben, Jaden, Zion&quot; # How would add an additional genre to the dictionary, like electropop? # You cant use update since this is not a dictionary # &quot;basketball_teams[genre] = electropop&quot; # Printing the dictionary print(basketball_teams) . {&#39;nba&#39;: &#39;basketball&#39;, &#39;top_team&#39;: &#39;Bucks&#39;, &#39;year&#39;: 2023, &#39;champ-contenders&#39;: [&#39;Nuggets&#39;, &#39;Grizzlies&#39;, &#39;Celtics&#39;], &#39;standings&#39;: {1: &#39;Clippers&#39;, 2: &#39;Knicks&#39;, 3: &#39;Kings&#39;, 4: &#39;Suns&#39;, 5: &#39;Cavs&#39;, 6: &#39;Kings&#39;, 7: &#39;Clippers&#39;, 8: &#39;Sixers&#39;, 9: &#39;Nets&#39;, 10: &#39;Warriors&#39;, 11: &#39;Timberwolves&#39;, 12: &#39;Pelicans&#39;, 13: &#39;Heat&#39;, 14: &#39;Hawks&#39;, 15: &#39;Raptors&#39;, 16: &#39;Lakers&#39;, 17: &#39;Bulls&#39;, 18: &#39;DNHS&#39;}, &#39;players&#39;: &#39;Ben, Jaden, Zion&#39;} . for k,v in basketball_teams.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . nba: basketball top_team: Bucks year: 2023 champ-contenders: [&#39;Nuggets&#39;, &#39;Grizzlies&#39;, &#39;Celtics&#39;] standings: {1: &#39;Clippers&#39;, 2: &#39;Knicks&#39;, 3: &#39;Kings&#39;, 4: &#39;Suns&#39;, 5: &#39;Cavs&#39;, 6: &#39;Kings&#39;, 7: &#39;Clippers&#39;, 8: &#39;Sixers&#39;, 9: &#39;Nets&#39;, 10: &#39;Warriors&#39;, 11: &#39;Timberwolves&#39;, 12: &#39;Pelicans&#39;, 13: &#39;Heat&#39;, 14: &#39;Hawks&#39;, 15: &#39;Raptors&#39;, 16: &#39;Lakers&#39;, 17: &#39;Bulls&#39;, 18: &#39;DNHS&#39;} players: Ben, Jaden, Zion . import random eastteams = {&quot;bucks&quot;: &quot;Milwaukee Bucks&quot;, &quot;celtics&quot;: &quot;Boston Celtics&quot;, &quot;nets&quot;: &quot;New Jersey Nets&quot;, &quot;knicks&quot;: &quot;New York Knicks&quot;, &quot;sixers&quot;: &quot;Philadelphia 76ers&quot;, &quot;raptors&quot;: &quot;Toronto Raptors&quot;, &quot;bulls&quot;: &quot;Chicago Bulls&quot;, &quot;cavs&quot;: &quot;Cleveland Cavaliers&quot;, &quot;pistons&quot;: &quot;Detroit Pistons&quot;, &quot;pacers&quot;: &quot;Indiana Pacers&quot;, &quot;hawks&quot;: &quot;Atlanta Hawks&quot;, &quot;hornets&quot;: &quot;Charlotte Hornets&quot;, &quot;heat&quot;: &quot;Miami Heat&quot;, &quot;magic&quot;: &quot;Orlando Magic&quot;, &quot;wizards&quot;: &quot;Washington Wizards&quot;} def search(): options = list(eastteams.keys()) search = input(f&quot;What NBA team from the eastern conference do you want to know about? Options: {options} n&quot;) search = search.lower() if search not in eastteams: print(&quot;They are not in the eastern conference.&quot;) else: team = eastteams[search] print(f&quot;{team} is a team apart of the Eastern Confrence.&quot;) random_eastteam = random.choice([&quot;LaVine&quot;, &quot;Giannis&quot;, &quot;Tatum&quot;, &quot;Mikal&quot;, &quot;Brunson&quot;, &quot;Embiid&quot;, &quot;Siakam&quot;, &quot;Mitchell&quot;, &quot;Ivey&quot;, &quot;Tyrese&quot;, &quot;Trae&quot;, &quot;LaMelo&quot;, &quot;Butler&quot;, &quot;Banchero&quot;, &quot;Porzingis&quot;]) print(f&quot;Here&#39;s the best player on the {team}: {random_eastteam}&quot;) if search == &quot;bulls&quot;: print(&quot;You are very smart&quot;) search() # This is a very basic code segment, how can you improve upon this code? # My improved code is in the segment below. . Chicago Bulls is a team apart of the Eastern Confrence. Here&#39;s the best player on the Chicago Bulls: Tyrese You are very smart . . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed No comment . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/03/29/hashmaphacks.html",
            "relUrl": "/2023/03/29/hashmaphacks.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "CPT PLAN",
            "content": "We plan to create a website that tracks basketball statistics for players and teams, providing detailed analysis and insights into performance. We will use advanced data collection methods, including tracking player movements, shots, and other key metrics, to create comprehensive reports and visualizations. We might also offer customized solutions for specific needs, such as player scouting or game strategy optimization. Overall we want to track individual player statistics that can be used to predict their performance in their next game, which can help sports bettors. | . 1. Project Definition . Define the scope and purpose of the project. | Determine what programming languages and frameworks will be used. | Identify the features and functionalities that the basketball code project will have. ## 2. Research and Design . | Conduct research on basketball game rules, mechanics and regulations. . | Create a software design document that outlines the architecture and components of the code project. | Sketch out the user interface and design of the project. ## 3. Development | . | Write code for the different components of the project, including the game engine, user interface, and database. . | Test and debug code to ensure it functions as intended. | Integrate any necessary libraries or APIs into the project. ## 4. Deployment . | Prepare the code project for deployment to the intended platform(s). . | Conduct final testing to ensure everything is working correctly. | Deploy the project to the intended platform(s). ## 5. Maintenance . | Address any bugs or issues that arise after deployment. . | Implement updates and new features as needed. | Monitor the performance and stability of the project. ## 6. Documentation . | Write documentation on how to use and maintain the project. . | Create a user manual or help guide. | Keep the documentation up to date as the project evolves. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/03/28/cpt-plan.html",
            "relUrl": "/markdown/2023/03/28/cpt-plan.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Cal State San Marcos Extra Credit Notes",
            "content": "Ashley . Works in a quantum computing group | Cal State San Marcos is one of the only places that you could major in physics | Even with lots of failtures she was able to keep working to her goal | . John . He had 2 associates, one in math and one is computer science | He transfered to Cal State for his last year of college | . Fun Facts . It is a newer school | Cal State is creating a new building for science | . Pathways . Chemistry | Applied Physics | Biological Sciences | Computer Engineering | Mathematics | Electrical Engineering | . Csusm Clubs . Cybersecurtiy | Robotics | 3D Printing | Women in STEM | Society of Women | Society of Physics | . Internships . Ad of work experienced offered by an organization for a limtiied period of time | . How to join . Join Clubs | Check Your Emails | Go to campus events | . Tips . Try and aviod unpaid | Apply even if you don&#39;t think you can get it | . Had 3 more sections but they got deleted and I couldn&#39;t find out how to restore them :( . Activity/Photos . Link to Toothbrush Activity Video . . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/03/28/CAL.html",
            "relUrl": "/markdown/2023/03/28/CAL.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Big Idea 2 Quiz Corrections",
            "content": ". My answer is incorrect because B is the correct answer because of the ability to keep data secure is not a primary function of a compression algorithm. . . My answer is incorrect because the total dollar amount of food and drinks sold during a show may be correlated with the attendance at the show, but cannot be used to determine the exact number of attendees. . . My answer is incorrect because the information can be determined using the data collected, but not the way described in this option. One way to determine the method of payment that was used in the greatest number of transactions during the 7-day period is to sort the data by the method of payment as described. Instead of adding the number of items purchased for each type of payment, a count of each payment type needs to be computed. If the counts are stored in a new field, then the counts can be sorted to find the method of payment used in the greatest number of transactions. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/03/24/big-idea.html",
            "relUrl": "/markdown/2023/03/24/big-idea.html",
            "date": " • Mar 24, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "2.4a & 2.4b Hacks",
            "content": "from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlitestats.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _hitrate = db.Column(db.String(255), unique=True, nullable=False) def __init__(self, name, hitrate): self._name = name # variables with self prefix become part of the object, self._hitrate = hitrate @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def hitrate(self): return self._hitrate # a setter function, allows uid to be updated after initial object creation @hitrate.setter def uid(self, hitrate): self._hitrate = hitrate def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;hitrate&quot;: self.hitrate, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, hitrate=&quot;&quot;): self.name = name db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # just a definition . def initUsers(): with app.app_context(): db.create_all() u1 = User(name=&#39;Zach LaVine OVER Assists&#39;, hitrate=&quot;60%&quot;) u2 = User(name=&#39;Kelly Oubre Jr OVER Points&#39;, hitrate=&quot;80%&quot;) u3 = User(name=&#39;Joel Embiid OVER 1H PRA&#39;, hitrate=&quot;100%&quot;) u4 = User(name=&#39;James Harden OVER Points&#39;, hitrate=&quot;20%&quot;) u5 = User(name=&#39;Mitchell Robinson OVER Points&#39;, hitrate=&quot;40%&quot;) u6 = User(name=&#39;Jalen Bruson UNDER 1H PRA&#39;, hitrate=&quot;0%&quot;) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid 60%, or error. Records exist uid 80%, or error. Records exist uid 100%, or error. Records exist uid 20%, or error. Records exist uid 40%, or error. Records exist uid 0%, or error. . def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Zachy&#39;, &#39;hitrate&#39;: &#39;60%&#39;}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Kelly Oubre Jr OVER Points&#39;, &#39;hitrate&#39;: &#39;80%&#39;}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Joel Embiid OVER 1H PRA&#39;, &#39;hitrate&#39;: &#39;100%&#39;}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;James Harden OVER Points&#39;, &#39;hitrate&#39;: &#39;20%&#39;}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Mitchell Robinson OVER Points&#39;, &#39;hitrate&#39;: &#39;40%&#39;}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Jalen Bruson UNDER 1H PRA&#39;, &#39;hitrate&#39;: &#39;0%&#39;}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Austin Reaves OVER Points&#39;, &#39;hitrate&#39;: &#39;99%&#39;}] . def find_by_name(name): with app.app_context(): user = User.query.filter_by(_name=name).first() return user # returns user object def check_credentials(uid, hitrate): # query email and return user record user = find_by_name(uid) if user == 1: return False if hitrate == &quot;60%&quot;: return True return True check_credentials(&quot;1&quot;, &quot;60&quot;) . True . def deleteuser(): id = input(&quot;enter name&quot;) user = find_by_name(id) print(user) if user is not None: with app.app_context(): db.session.delete(user) db.session.commit() print(&quot;User deleted.&quot;) else: print(&quot;User not found.&quot;) deleteuser() print(&quot;new DB&quot;) read() . {&#34;id&#34;: 7, &#34;name&#34;: &#34;Austin Reaves OVER Points&#34;, &#34;hitrate&#34;: &#34;90%&#34;} User deleted. new DB . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Zachy&#39;, &#39;hitrate&#39;: &#39;60%&#39;}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Kelly Oubre Jr OVER Points&#39;, &#39;hitrate&#39;: &#39;80%&#39;}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Joel Embiid OVER 1H PRA&#39;, &#39;hitrate&#39;: &#39;100%&#39;}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;James Harden OVER Points&#39;, &#39;hitrate&#39;: &#39;20%&#39;}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Mitchell Robinson OVER Points&#39;, &#39;hitrate&#39;: &#39;40%&#39;}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Jalen Bruson UNDER 1H PRA&#39;, &#39;hitrate&#39;: &#39;0%&#39;}] . def updateuser(): id2 = input(&quot;id&quot;) name2= input(&quot;new name&quot;) with app.app_context(): user = User.query.filter_by(id=id2).first() user.update(name=name2) db.session.commit() def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() updateuser() . def create(): # optimize user time to see if name exists name = input(&quot;Enter your user id:&quot;) user = find_by_name(name) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) hitrate = input(&quot;Enter your hitrate&quot;) # Initialize User object before date user = User(name=name, hitrate=hitrate ) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error name {name}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Austin Reaves OVER Points&#39;, &#39;hitrate&#39;: &#39;90%&#39;} . Menu . def process(): endpoint = input(&quot;read, delete, update, create&quot;) if endpoint == &quot;read&quot;: with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready elif endpoint == &quot;delete&quot;: deleteuser() elif endpoint == &quot;update&quot;: updateuser() elif endpoint == &quot;create&quot;: create() else: print(&#39;function not found&#39;) process() . NameError Traceback (most recent call last) /Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb Cell 11 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; print(&#39;function not found&#39;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; process() /Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb Cell 11 in process() &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; endpoint = input(&#34;read, delete, update, create&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; if endpoint == &#34;read&#34;: -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; with app.app_context(): &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; table = User.query.all() &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/Documents/GitHub/james-fastpage/_notebooks/2023-03-17-2.4Hacks.ipynb#X13sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; json_ready = [user.read() for user in table] # &#34;List Comprehensions&#34;, for each user add user.read() to list NameError: name &#39;app&#39; is not defined .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/03/17/2.4Hacks.html",
            "relUrl": "/markdown/2023/03/17/2.4Hacks.html",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- - The constraints imposed on data to be entered into an SQLite database are referred to as the database schema. . What is the function of the identity column in a SQL database? | The purpose of the ID column is to distinguish each user from one another based on their unique ID. | . | What is the purpose of a primary key in a SQL database? | Similar to the identity column, the primary key distinguishes each user, enabling code to interact with the intended object. | . | What are some of the data types that can be found in an SQL table? | SQL tables may include data types such as floats, integers, strings, dates, and more. | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? ** . | A connection object is an instance of a class that represents a connection to a database. From my research, it appears that a connection object is used to manage the connection between a Python program and a database server. It provides a way to send queries to the database and to receive results back. . | A cursor object is another instance of a class that is used to traverse through the results of a query. It is used to execute SQL statements and retrieve data from a database. It provides a way to navigate through the results and access individual rows of data. The attributes in the connection and cursor objects depend on the specific database API and the implementation of the class. In general, a connection object may have attributes such as the server address, port number, username, and password. A cursor object may have attributes such as the query string and the results of the query. To see the attributes of a specific object, you would need to inspect it in the debugger or use the object&#39;s methods to retrieve the attribute values. | &quot;Results&quot; may or may not be an object, depending on the context in which it is being used. In general, &quot;results&quot; is a generic term that can refer to any data returned from a query, such as a set of rows or a single value. If &quot;results&quot; is being used as a variable name in a program, it could potentially refer to an object that holds the data returned from a query. However, without additional context or information, it is impossible to determine whether &quot;results&quot; is an object or not. | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$NHm2ZEtWToTVLSMI$260527ce3229fff0d8d2580bea6a302a46ed1512a921dd000e3a4eb44d789d52&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$w7pzaJw2DIEnzx9w$f0918afbaab60ee319ebbdc20379bf28e699c2ebe055e9281853e266bf05ed34&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$ZXYmRYccNg2DwioO$f85258931f5e25d051f66149e615c5ac63b40b16aebd263dfb96451951a429fb&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$K5bhBrjZbzc7OpCt$131df92b9b647ccad6d538c37fb9b326a1c2859a7d1e0b4eb75a7a8f317a703f&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$0xWOf4BeQow4di6m$83523e6cf236373e2ef8ac37a8fc55a7b7178f3cfda583aa41f4ccd7283d5a0b&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$2OyGoQSiGNRSRkM6$0ea237269955a10c5e5530a9feeaee8711c90f8a30ccce694dd645a756348e01&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): #Class User is defining the template for users. It is a class definition template. # We are going to use this templete to create objetcs of type users. # This code is not going to do anything right away, but we are going to use this code later to create objects # (db.Model) is used as a template for the data base. __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) # This init method enables us to create an object from our user class def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object # Setters enable us to change the atribute (if you put the wrong dob you can reset it with the setter) # Getters (Property) enable us to get information out of the object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "import pandas as pd df = pd.read_json(&quot;../football/footballdataset.json&quot;) print(df) . AC AF AR AS AST AY AwayTeam B365A B365D B365H ... PSCH 0 4 12 0 6 3 1 Leicester 6.50 4.50 1.53 ... 1.49 1 10 9 0 14 4 2 Man City 1.33 5.50 11.00 ... 11.75 2 5 11 0 10 5 3 Burnley 15.00 6.50 1.25 ... 1.33 3 9 19 0 8 6 3 Huddersfield 5.00 3.60 1.83 ... 1.79 4 7 10 0 9 1 1 Stoke 5.75 3.80 1.70 ... 1.82 .. .. .. .. .. ... .. ... ... ... ... ... ... 375 2 10 0 6 2 1 Chelsea 1.60 4.20 6.50 ... 4.85 376 12 10 0 13 2 1 Man City 1.39 5.00 9.00 ... 6.32 377 0 9 0 8 5 2 Stoke 4.20 3.79 1.90 ... 2.08 378 4 13 0 16 9 2 Leicester 9.00 6.00 1.33 ... 1.38 379 6 13 0 14 7 1 Everton 3.00 3.50 2.45 ... 2.35 PSD PSH Referee VCA VCD VCH WHA WHD WHH 0 4.55 1.53 M Dean 6.50 4.50 1.53 6.00 4.20 1.53 1 5.55 10.95 M Oliver 1.33 5.50 10.00 1.33 4.80 10.00 2 6.30 1.26 C Pawson 15.00 6.25 1.25 13.00 5.50 1.25 3 3.58 1.83 J Moss 5.00 3.60 1.83 5.00 3.30 1.80 4 3.83 1.70 N Swarbrick 5.75 3.80 1.70 5.50 3.50 1.70 .. ... ... ... ... ... ... ... ... ... 375 4.22 5.96 M Atkinson 1.60 4.20 6.00 1.57 4.00 6.50 376 5.11 8.06 A Marriner 1.44 5.00 7.50 1.40 4.50 8.50 377 3.72 1.91 A Taylor 4.20 3.75 1.90 4.00 3.75 1.91 378 5.95 1.33 C Pawson 9.50 5.75 1.33 9.00 6.00 1.30 379 3.51 2.36 G Scott 3.10 3.50 2.40 3.10 3.30 2.40 [380 rows x 65 columns] . print(df[[&#39;Referee&#39;, &#39;AST&#39;, &#39;AS&#39;, &#39;AwayTeam&#39;, &#39;HomeTeam&#39;]].to_string(index=False)) . Referee AST AS AwayTeam HomeTeam M Dean 3 6 Leicester Arsenal M Oliver 4 14 Man City Brighton C Pawson 5 10 Burnley Chelsea J Moss 6 8 Huddersfield Crystal Palace N Swarbrick 1 9 Stoke Everton M Jones 0 4 Swansea Southampton A Taylor 5 14 Liverpool Watford R Madley 2 9 Bournemouth West Brom M Atkinson 1 9 West Ham Man United A Marriner 6 18 Tottenham Newcastle R East 7 19 Watford Bournemouth M Atkinson 1 8 West Brom Burnley L Probert 2 5 Brighton Leicester K Friend 1 4 Crystal Palace Liverpool L Mason 8 16 West Ham Southampton A Marriner 6 18 Arsenal Stoke J Moss 8 17 Man United Swansea C Pawson 5 13 Newcastle Huddersfield A Taylor 2 9 Chelsea Tottenham R Madley 2 7 Everton Man City M Dean 8 19 Man City Bournemouth A Marriner 3 7 Swansea Crystal Palace S Attwell 3 6 Southampton Huddersfield M Oliver 4 11 Leicester Man United N Swarbrick 3 8 West Ham Newcastle G Scott 2 16 Brighton Watford J Moss 0 7 Everton Chelsea C Pawson 0 8 Arsenal Liverpool L Mason 3 13 Burnley Tottenham A Taylor 2 16 Stoke West Brom A Taylor 1 6 Bournemouth Arsenal C Kavanagh 3 12 West Brom Brighton G Scott 6 15 Tottenham Everton L Mason 6 16 Chelsea Leicester J Moss 3 10 Liverpool Man City L Probert 3 12 Watford Southampton N Swarbrick 8 18 Man United Stoke M Oliver 5 23 Crystal Palace Burnley M Jones 8 16 Newcastle Swansea K Friend 2 10 Huddersfield West Ham C Pawson 2 9 Brighton Bournemouth R Madley 4 13 Southampton Crystal Palace J Moss 1 10 Leicester Huddersfield R East 4 5 Burnley Liverpool S Attwell 4 13 Stoke Newcastle M Dean 0 4 Swansea Tottenham A Taylor 10 28 Man City Watford P Tierney 1 9 West Ham West Brom M Oliver 2 11 Arsenal Chelsea A Marriner 3 7 Everton Man United C Kavanagh 2 9 Huddersfield Burnley M Atkinson 4 8 Bournemouth Everton A Taylor 6 23 Liverpool Leicester N Swarbrick 0 5 Crystal Palace Man City C Pawson 4 9 Man United Southampton M Dean 4 7 Chelsea Stoke L Mason 4 8 Watford Swansea M Oliver 5 15 Tottenham West Ham A Marriner 5 17 Newcastle Brighton R Madley 3 7 West Brom Arsenal G Scott 1 8 Leicester Bournemouth M Atkinson 6 17 Man City Chelsea N Swarbrick 7 14 Tottenham Huddersfield M Dean 1 6 Crystal Palace Man United M Jones 3 21 Southampton Stoke M Oliver 3 15 Watford West Brom R East 1 6 Swansea West Ham K Friend 1 9 Brighton Arsenal J Moss 2 5 Burnley Everton C Pawson 2 17 Liverpool Newcastle S Attwell 6 8 West Ham Burnley A Marriner 5 15 Chelsea Crystal Palace M Atkinson 1 6 Man United Liverpool C Pawson 1 5 Stoke Man City P Tierney 2 7 Huddersfield Swansea R Madley 1 5 Bournemouth Tottenham N Swarbrick 6 9 Arsenal Watford M Oliver 6 13 Everton Brighton K Friend 5 19 Newcastle Southampton M Dean 1 5 West Brom Leicester M Atkinson 5 7 Brighton West Ham J Moss 5 16 Watford Chelsea L Mason 3 9 Man United Huddersfield R East 0 6 Burnley Man City S Attwell 0 10 Crystal Palace Newcastle G Scott 2 7 West Brom Southampton L Probert 3 7 Bournemouth Stoke M Oliver 6 11 Leicester Swansea C Pawson 14 30 Arsenal Everton A Marriner 7 12 Liverpool Tottenham L Mason 2 4 Swansea Arsenal C Pawson 5 18 Chelsea Bournemouth R Madley 2 6 West Ham Crystal Palace K Friend 0 1 Huddersfield Liverpool J Moss 4 13 Tottenham Man United M Oliver 2 6 Stoke Watford M Jones 5 15 Man City West Brom N Swarbrick 1 6 Southampton Brighton A Marriner 2 16 Everton Leicester M Dean 5 12 Newcastle Burnley R East 3 9 West Brom Huddersfield P Tierney 6 16 Bournemouth Newcastle L Probert 1 5 Burnley Southampton R Madley 4 14 Leicester Stoke M Dean 2 5 Brighton Swansea N Swarbrick 7 15 Liverpool West Ham A Taylor 2 10 Man United Chelsea G Scott 3 11 Watford Everton M Oliver 3 6 Arsenal Man City K Friend 3 11 Crystal Palace Tottenham M Dean 4 14 Tottenham Arsenal L Probert 3 20 Huddersfield Bournemouth M Atkinson 1 13 Swansea Burnley A Taylor 5 8 Everton Crystal Palace G Scott 4 12 Man City Leicester M Jones 0 5 Southampton Liverpool C Pawson 5 12 Newcastle Man United J Moss 7 11 Chelsea West Brom A Marriner 6 10 West Ham Watford L Mason 6 13 Stoke Brighton M Atkinson 2 7 Leicester West Ham M Dean 3 9 Stoke Crystal Palace M Oliver 3 11 Chelsea Liverpool N Swarbrick 2 8 Brighton Man United C Kavanagh 4 12 Watford Newcastle S Attwell 5 9 Bournemouth Swansea M Jones 2 5 West Brom Tottenham L Mason 2 17 Arsenal Burnley C Pawson 5 14 Man City Huddersfield K Friend 2 5 Everton Southampton A Marriner 4 10 Crystal Palace Brighton A Taylor 6 18 Tottenham Leicester J Moss 7 15 Man United Watford L Probert 4 14 Newcastle West Brom G Scott 2 7 Huddersfield Arsenal R East 4 10 Burnley Bournemouth N Swarbrick 0 2 Swansea Chelsea M Oliver 3 7 West Ham Everton P Tierney 2 7 Southampton Man City M Atkinson 7 14 Liverpool Stoke A Marriner 4 8 Man United Arsenal G Scott 6 12 Liverpool Brighton K Friend 2 8 Newcastle Chelsea C Kavanagh 3 5 Huddersfield Everton P Tierney 4 14 Burnley Leicester C Pawson 3 10 Swansea Stoke M Atkinson 2 8 Tottenham Watford M Oliver 2 10 Crystal Palace West Brom J Moss 4 15 Southampton Bournemouth M Dean 4 7 West Ham Man City L Probert 2 11 Watford Burnley K Friend 5 11 Bournemouth Crystal Palace S Attwell 2 7 Brighton Huddersfield N Swarbrick 5 13 Leicester Newcastle M Dean 1 7 West Brom Swansea R East 3 4 Stoke Tottenham A Taylor 2 19 Chelsea West Ham C Pawson 2 3 Everton Liverpool M Oliver 7 14 Man City Man United R Madley 6 11 Arsenal Southampton M Jones 7 14 Stoke Burnley L Mason 2 7 Watford Crystal Palace A Marriner 5 12 Chelsea Huddersfield P Tierney 1 6 West Brom Liverpool G Scott 7 14 Bournemouth Man United M Atkinson 4 7 Everton Newcastle C Kavanagh 11 16 Leicester Southampton A Taylor 10 23 Man City Swansea R Madley 4 7 Brighton Tottenham J Moss 3 22 Arsenal West Ham S Attwell 2 10 Newcastle Arsenal C Kavanagh 6 11 Burnley Brighton R East 2 6 Southampton Chelsea M Atkinson 6 13 Crystal Palace Leicester C Pawson 2 7 Tottenham Man City G Scott 7 14 West Ham Stoke M Oliver 9 15 Huddersfield Watford A Marriner 7 21 Liverpool Bournemouth A Taylor 3 8 Man United West Brom J Moss 3 8 Swansea Everton M Atkinson 9 14 Liverpool Arsenal P Tierney 1 13 Watford Brighton M Oliver 8 18 Tottenham Burnley R Madley 8 25 Chelsea Everton J Moss 6 19 Man United Leicester M Jones 1 5 Bournemouth Man City L Probert 3 10 Huddersfield Southampton N Swarbrick 7 17 West Brom Stoke C Pawson 5 13 Crystal Palace Swansea L Mason 4 11 Newcastle West Ham S Attwell 5 10 West Ham Bournemouth M Dean 1 8 Brighton Chelsea A Taylor 7 15 Stoke Huddersfield K Friend 4 7 Swansea Liverpool M Atkinson 2 3 Burnley Man United G Scott 6 16 Southampton Tottenham C Kavanagh 5 11 Leicester Watford R East 3 7 Everton West Brom A Marriner 6 22 Man City Newcastle M Oliver 9 16 Arsenal Crystal Palace L Probert 1 6 Everton Bournemouth K Friend 1 1 Stoke Chelsea P Tierney 4 11 Burnley Huddersfield N Swarbrick 1 7 Leicester Liverpool C Pawson 3 8 Southampton Man United A Taylor 3 10 Brighton Newcastle M Atkinson 4 9 Swansea Watford J Moss 4 15 Man City Crystal Palace M Dean 4 14 Arsenal West Brom M Oliver 8 26 Bournemouth Brighton R East 5 19 Liverpool Burnley A Marriner 6 21 Man United Everton G Scott 1 6 Huddersfield Leicester C Kavanagh 6 14 Newcastle Stoke L Mason 4 7 Watford Man City S Attwell 4 11 Crystal Palace Southampton R Madley 5 12 Tottenham Swansea M Jones 3 10 West Brom West Ham A Taylor 6 19 Chelsea Arsenal M Dean 1 3 West Ham Tottenham M Jones 1 14 Leicester Chelsea M Oliver 2 8 Burnley Crystal Palace J Moss 6 8 West Ham Huddersfield G Scott 5 8 Swansea Newcastle C Pawson 0 7 Everton Tottenham R East 4 10 Southampton Watford M Atkinson 1 13 Brighton West Brom K Friend 3 12 Arsenal Bournemouth A Marriner 4 11 Man City Liverpool A Taylor 5 11 Stoke Man United C Kavanagh 5 9 Crystal Palace Arsenal J Moss 10 14 Chelsea Brighton M Dean 2 12 Man United Burnley S Attwell 5 15 West Brom Everton L Probert 3 11 Watford Leicester P Tierney 4 6 Newcastle Man City M Oliver 3 6 Huddersfield Stoke M Atkinson 3 8 Bournemouth West Ham K Friend 2 17 Tottenham Southampton N Swarbrick 4 21 Liverpool Swansea K Friend 7 14 Liverpool Huddersfield L Mason 4 9 Arsenal Swansea N Swarbrick 3 9 Crystal Palace West Ham L Probert 5 11 Bournemouth Chelsea C Kavanagh 1 8 Leicester Everton R Madley 1 3 West Brom Man City S Hooper 2 11 Burnley Newcastle M Dean 2 9 Brighton Southampton J Moss 2 12 Watford Stoke A Marriner 3 6 Man United Tottenham N Swarbrick 2 11 Everton Arsenal P Tierney 4 13 Stoke Bournemouth R East 1 4 West Ham Brighton M Atkinson 7 20 Man City Burnley A Taylor 1 3 Swansea Leicester S Attwell 0 4 Huddersfield Man United M Oliver 5 13 Southampton West Brom A Marriner 8 11 Newcastle Crystal Palace J Moss 6 13 Tottenham Liverpool M Dean 3 7 Chelsea Watford J Moss 4 16 Crystal Palace Everton M Jones 2 2 Leicester Man City R Madley 6 14 Brighton Stoke A Marriner 1 13 Burnley Swansea A Taylor 1 6 Arsenal Tottenham G Scott 4 11 Watford West Ham M Oliver 2 7 Bournemouth Huddersfield C Pawson 6 13 Man United Newcastle M Atkinson 4 16 Liverpool Southampton L Mason 1 8 West Brom Chelsea R East 4 15 Newcastle Bournemouth M Dean 1 11 Swansea Brighton R Madley 6 13 Southampton Burnley M Oliver 2 6 Stoke Leicester S Attwell 4 7 West Ham Liverpool A Taylor 2 7 Everton Watford J Moss 7 16 Huddersfield West Brom K Friend 4 14 Tottenham Crystal Palace M Atkinson 7 14 Chelsea Man United A Marriner 5 9 Man City Arsenal C Kavanagh 4 10 Everton Burnley L Probert 3 8 Bournemouth Leicester G Scott 2 7 Newcastle Liverpool A Taylor 3 12 Stoke Southampton M Atkinson 2 7 West Ham Swansea K Friend 3 3 Huddersfield Tottenham P Tierney 2 9 West Brom Watford S Attwell 7 15 Arsenal Brighton M Oliver 0 3 Chelsea Man City N Swarbrick 8 17 Man United Crystal Palace A Taylor 2 9 Crystal Palace Chelsea R East 4 10 Brighton Everton M Oliver 0 0 Swansea Huddersfield C Pawson 2 14 Liverpool Man United A Marriner 2 6 Southampton Newcastle R Madley 6 14 Leicester West Brom L Mason 4 7 Burnley West Ham M Atkinson 4 11 Watford Arsenal M Dean 8 12 Tottenham Bournemouth J Moss 6 17 Man City Stoke G Scott 6 11 West Brom Bournemouth M Dean 6 17 Crystal Palace Huddersfield A Taylor 1 4 Watford Liverpool M Atkinson 9 17 Everton Stoke C Kavanagh 4 6 Leicester Brighton N Swarbrick 6 16 Liverpool Crystal Palace P Tierney 4 18 Man City Everton R Madley 2 3 Swansea Man United M Atkinson 0 4 Huddersfield Newcastle A Marriner 6 13 Bournemouth Watford L Probert 4 11 Burnley West Brom J Moss 0 9 Southampton West Ham C Pawson 2 8 Stoke Arsenal A Marriner 7 12 Tottenham Chelsea J Moss 6 13 Crystal Palace Bournemouth A Taylor 5 14 Huddersfield Brighton M Oliver 3 10 Liverpool Everton S Attwell 4 8 Newcastle Leicester M Atkinson 4 5 Man United Man City G Scott 4 15 Tottenham Stoke P Tierney 4 7 Burnley Watford R East 1 7 Swansea West Brom A Marriner 8 15 Southampton Arsenal K Friend 2 5 West Ham Chelsea M Atkinson 6 15 Leicester Burnley A Marriner 3 12 Brighton Crystal Palace C Pawson 2 4 Watford Huddersfield C Kavanagh 1 6 Bournemouth Liverpool M Dean 5 17 Chelsea Southampton L Mason 3 12 Everton Swansea J Moss 6 17 Man City Tottenham P Tierney 4 10 West Brom Man United A Taylor 3 15 Arsenal Newcastle M Oliver 7 11 Stoke West Ham K Friend 6 16 Tottenham Brighton G Scott 4 13 Man United Bournemouth R Madley 5 16 Chelsea Burnley R East 2 6 Southampton Leicester C Kavanagh 1 6 Crystal Palace Watford S Attwell 3 9 Liverpool West Brom L Mason 4 11 West Ham Arsenal C Pawson 1 4 Swansea Man City M Dean 7 16 Burnley Stoke R Madley 2 9 Newcastle Everton R East 1 9 Brighton Burnley M Dean 1 6 Leicester Crystal Palace L Probert 5 7 Everton Huddersfield A Marriner 1 5 Stoke Liverpool D Coote 2 9 West Brom Newcastle A Taylor 7 14 Bournemouth Southampton J Moss 3 11 Chelsea Swansea K Friend 3 8 Arsenal Man United N Swarbrick 7 19 Man City West Ham M Oliver 5 13 Watford Tottenham C Pawson 3 16 Man United Brighton K Friend 3 12 Swansea Bournemouth J Moss 5 11 Southampton Everton C Kavanagh 3 13 West Ham Leicester M Atkinson 2 13 Crystal Palace Stoke R East 1 9 Newcastle Watford M Jones 5 18 Tottenham West Brom A Marriner 2 6 Burnley Arsenal A Taylor 5 10 Liverpool Chelsea M Dean 3 5 Huddersfield Man City M Oliver 8 13 Southampton Swansea L Mason 2 3 Huddersfield Chelsea G Scott 7 14 Arsenal Leicester P Tierney 3 6 Brighton Man City N Swarbrick 3 14 Newcastle Tottenham J Moss 6 16 Man United West Ham P Tierney 5 16 Bournemouth Burnley J Moss 1 7 West Brom Crystal Palace M Oliver 4 9 Arsenal Huddersfield K Friend 1 2 Brighton Liverpool L Mason 3 7 Watford Man United M Atkinson 2 6 Chelsea Newcastle A Marriner 2 13 Man City Southampton A Taylor 5 8 Stoke Swansea C Pawson 9 16 Leicester Tottenham G Scott 7 14 Everton West Ham . print(df[(df.HomeTeam == &quot;Arsenal&quot;) | (df.AwayTeam == &quot;Arsenal&quot;)]) . AC AF AR AS AST AY AwayTeam B365A B365D B365H ... PSCH 0 4 12 0 6 3 1 Leicester 6.50 4.50 1.53 ... 1.49 15 9 11 0 18 6 0 Arsenal 1.85 3.80 4.50 ... 4.37 27 3 9 0 8 0 4 Arsenal 3.50 3.70 2.15 ... 2.21 30 2 8 0 6 1 1 Bournemouth 9.00 5.50 1.36 ... 1.31 48 1 15 0 11 2 3 Arsenal 4.50 4.00 1.80 ... 1.77 59 4 17 0 7 3 4 West Brom 11.00 5.50 1.33 ... 1.34 67 5 8 0 9 1 2 Brighton 13.00 6.50 1.20 ... 1.26 76 5 10 0 9 6 0 Arsenal 1.65 4.33 5.25 ... 5.00 88 7 14 0 30 14 1 Arsenal 2.04 3.60 3.79 ... 4.70 90 2 9 0 4 2 0 Swansea 12.00 7.00 1.25 ... 1.20 108 5 15 0 6 3 6 Arsenal 7.50 5.50 1.39 ... 1.41 110 4 16 0 14 4 1 Tottenham 2.89 3.60 2.50 ... 2.49 127 5 14 0 17 2 0 Arsenal 1.53 4.50 6.50 ... 6.25 134 2 12 0 7 2 1 Huddersfield 17.00 7.50 1.19 ... 1.18 140 1 10 1 8 4 2 Man United 3.00 3.39 2.50 ... 2.32 159 5 10 0 11 6 2 Arsenal 1.95 3.75 4.00 ... 4.20 169 7 9 0 22 3 0 Arsenal 1.66 4.20 5.25 ... 5.45 170 5 9 0 10 2 1 Newcastle 14.00 6.50 1.25 ... 1.26 180 8 11 0 14 9 0 Liverpool 2.79 3.60 2.54 ... 2.68 199 4 7 0 16 9 1 Arsenal 1.80 4.00 4.50 ... 4.82 208 6 9 0 14 4 3 Arsenal 1.72 4.00 5.00 ... 5.70 218 8 11 0 19 6 2 Chelsea 2.60 3.39 2.60 ... 3.32 227 5 10 0 12 3 2 Arsenal 1.75 4.20 4.75 ... 3.81 230 10 8 0 9 5 0 Crystal Palace 7.00 4.75 1.50 ... 1.44 241 3 8 0 9 4 3 Arsenal 1.50 4.59 7.00 ... 7.10 250 6 8 0 11 2 0 Everton 12.00 5.75 1.30 ... 1.37 264 2 9 0 6 1 1 Arsenal 3.50 3.60 2.00 ... 1.93 279 1 11 0 9 5 1 Man City 1.72 4.00 4.50 ... 4.75 287 11 12 0 15 7 3 Arsenal 1.90 3.79 4.20 ... 4.25 297 9 9 0 11 4 1 Watford 7.50 5.00 1.44 ... 1.52 312 5 13 0 8 2 2 Stoke 10.00 5.50 1.28 ... 1.31 322 6 7 1 15 8 1 Southampton 6.00 4.50 1.57 ... 1.79 332 5 9 0 15 3 0 Arsenal 2.25 3.60 3.29 ... 2.90 340 6 9 0 11 4 2 West Ham 6.00 4.59 1.55 ... 1.53 351 0 7 0 8 3 1 Arsenal 8.00 4.75 1.44 ... 1.41 361 5 7 0 6 2 1 Burnley 6.50 4.20 1.57 ... 1.47 366 6 12 1 14 7 2 Arsenal 2.00 3.79 3.75 ... 3.89 372 4 7 0 9 4 0 Arsenal 1.60 4.33 6.00 ... 5.70 PSD PSH Referee VCA VCD VCH WHA WHD WHH 0 4.55 1.53 M Dean 6.50 4.50 1.53 6.00 4.20 1.53 15 3.85 4.39 A Marriner 1.83 3.80 4.60 1.80 3.50 4.50 27 3.72 2.16 C Pawson 3.30 3.70 2.20 3.40 3.25 2.20 30 5.59 1.39 A Taylor 9.00 5.50 1.36 8.00 5.00 1.36 48 4.02 1.81 M Oliver 4.50 4.00 1.80 4.50 3.50 1.80 59 5.45 1.36 R Madley 10.50 5.40 1.33 9.00 5.00 1.33 67 6.65 1.27 K Friend 12.00 6.50 1.25 13.00 6.00 1.22 76 4.37 5.49 N Swarbrick 1.62 4.40 5.50 1.62 4.20 5.50 88 3.71 3.84 C Pawson 2.00 3.60 4.00 2.05 3.30 4.00 90 7.35 1.24 L Mason 13.00 7.00 1.25 13.00 7.00 1.22 108 5.20 1.43 M Oliver 7.50 5.50 1.40 7.00 4.80 1.44 110 3.62 2.50 M Dean 2.90 3.60 2.50 2.80 3.50 2.50 127 4.47 5.89 L Mason 1.57 4.33 6.25 1.57 4.20 6.00 134 7.23 1.23 G Scott 19.00 7.00 1.20 15.00 7.00 1.20 140 3.42 2.44 A Marriner 3.10 3.40 2.45 3.00 3.20 2.50 159 3.79 3.85 R Madley 1.95 3.70 4.00 1.91 3.60 3.80 169 4.44 5.36 J Moss 1.65 4.30 5.40 1.65 4.00 5.50 170 6.80 1.27 S Attwell 15.00 6.50 1.25 13.00 6.00 1.25 180 3.71 2.51 M Atkinson 2.80 3.75 2.50 2.80 3.60 2.45 199 4.00 4.54 M Oliver 1.80 4.00 4.50 1.75 3.80 4.80 208 4.06 5.39 M Dean 1.70 4.00 5.25 1.73 3.75 4.50 218 3.51 2.80 A Taylor 2.63 3.50 2.75 2.70 3.30 2.70 227 4.22 4.63 K Friend 1.75 4.20 4.60 1.75 4.00 4.50 230 4.73 1.49 C Kavanagh 7.00 4.60 1.50 7.00 4.33 1.50 241 4.62 7.00 L Mason 1.50 4.40 7.50 1.50 4.33 7.00 250 5.85 1.32 N Swarbrick 11.00 5.75 1.30 11.00 5.00 1.33 264 3.85 2.04 A Taylor 3.60 3.90 2.05 3.40 3.75 2.00 279 4.06 4.58 A Marriner 1.80 4.00 4.60 1.73 3.80 4.50 287 3.70 4.04 S Attwell 2.00 3.70 4.00 1.91 3.75 4.00 297 4.81 1.48 M Atkinson 7.00 5.00 1.45 7.00 4.33 1.50 312 6.10 1.31 C Pawson 11.00 6.00 1.30 10.00 5.50 1.30 322 4.45 1.56 A Marriner 6.25 4.50 1.55 6.00 4.20 1.57 332 3.65 3.27 A Taylor 2.25 3.60 3.30 2.20 3.50 3.30 340 4.65 1.55 L Mason 6.50 4.60 1.53 5.50 4.50 1.57 351 4.83 1.45 K Friend 8.50 4.80 1.40 8.00 4.33 1.44 361 4.35 1.57 A Marriner 6.50 4.33 1.55 7.00 3.75 1.57 366 3.90 3.75 G Scott 2.00 3.90 3.70 2.00 3.75 3.60 372 4.48 5.88 M Oliver 1.57 4.40 6.00 1.60 4.20 5.50 [38 rows x 65 columns] . Arsenal_homesgames = df.loc[(df.HomeTeam == &quot;Arsenal&quot;), [&#39;HomeTeam&#39;, &#39;FTHG&#39;, &#39;FTAG&#39;, &#39;AwayTeam&#39;, ]] Arsenal_awaygames = df.loc[(df.AwayTeam == &quot;Arsenal&quot;), [&#39;HomeTeam&#39;, &#39;FTHG&#39;, &#39;FTAG&#39;, &#39;AwayTeam&#39;,]] print(Arsenal_homesgames.to_string(index=False)) print(Arsenal_awaygames.to_string(index=False)) . Arsenal_away_losses = Arsenal_awaygames.loc[Arsenal_awaygames.FTAG &lt; Arsenal_awaygames.FTHG] print(Arsenal_away_losses.to_string (index=False)) . HomeTeam FTHG FTAG AwayTeam Stoke 1 0 Arsenal Liverpool 4 0 Arsenal Watford 2 1 Arsenal Man City 3 1 Arsenal Bournemouth 2 1 Arsenal Swansea 3 1 Arsenal Tottenham 1 0 Arsenal Brighton 2 1 Arsenal Newcastle 2 1 Arsenal Man United 2 1 Arsenal Leicester 3 1 Arsenal . import base64 text = &quot;J A M&quot; encoded_bytes = base64.b64encode(text.encode(&#39;utf-8&#39;)) encoded_text = encoded_bytes.decode(&#39;utf-8&#39;) print(encoded_text) . SiBBIE0= .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. AP Prep | In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "College Board Test 3 Corrections",
            "content": "My Corrections . My answer is wrong because mine only selects one students that is an odd number and one student that is an even number. It is also missing step 4 which is important (The student who was selected in the previous step is assigned 0. All other students are reassigned a unique integer from 1 to 29) this means any possible pair of students is equally likely to be selected. . My answer is wrong because it uses one crucial word (not) in that last sentence which makes it incorrect. With the answer I selected the algorithm will turn on the motor in some cases when the gate sensor is not activated. D is correct because after the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and then it continues past the third check if the gate is not open. Performing the checks in this order will make sure the gate is open only when it should be. . My answer is wrong because it says to turn left after moving 2 blocks foward when it should really say to move right. Answer D is correct because the robot first moves forward three spaces, then turns to the left, then after it moves forward two spaces, turns to the right, and moves forward three spaces and arrives at the gray square. . My answer is wrong because when scoreC &gt; scoreB &gt; scoreA, the code segment incorrectly identifies Team B as the winner instead of Team C. My answer defines the wrong winner. A is the correct answer because If scoreA is greater than both scoreB and scoreC (the first two IF statements), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE statement) and scoreC (the IF statment in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. . My answer is wrong because I thought the order was flipped, so the 1st line was going to be displayed 2nd, but it was displayed 1st and vice versa with the second line, no idea why I thought this. I new it started with a number, because it prints (num) first and then the 2 strings. B is correct because The first call to printArgs displays the number 1, followed by the string &quot;*&quot;, followed by the number 1. The second call to printArgs displays the number 2, followed by the string &quot;&quot;, followed by the number 2. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/03/06/collegeboard-final.html",
            "relUrl": "/markdown/2023/03/06/collegeboard-final.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "CPT WORK (Write Up + Video)",
            "content": "WRITE UP: file:///Users/jameshunter/Downloads/CPT%20Write%20Up%20(2).pdf . VIDEO: https://www.loom.com/share/1cf9251fadc241c8ae1b6facf598dcf0 .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/02/28/cptwork.html",
            "relUrl": "/markdown/2023/02/28/cptwork.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Managing Frontend and Backend",
            "content": "Frontend . When working on frontend code the way you present it is very important. You want to make your code/cite look as professional as possible, so things like punctuation and capitalization can play a big role. Other things like the font you select and the color scheme can really make or break your project. . | Break your code into smaller, more manageable modules that can be easily reused and maintained. This will make it easier to track changes, debug errors and update your code in the future. . | Creating space for users to input their own ideas is very important as it keeps them engaged in your cite. Buttons and areas where users can type are great ways to keep users interacted. . | Write clean and organized code: Make sure your code is readable and organized, with consistent naming conventions and indentation. This will make it easier to understand, update and maintain your code. . | . Use version control: Version control tools like Git can help you manage changes to your code, collaborate with others and track your progress. This is particularly important when working on larger projects with multiple team members. | . Backend . Similar to frontend write clean and organized code and make sure your code is readable and organized, with consistent naming conventions and indentation. This will make it easier to understand, update and maintain your code. It is also important to remove unnecessary lines of code as it can make your code more complicated than it needs to be. . | Testing your code first is very important, so using something like a local server is very important. You do not want to push code that is incorrect and could potentially break your cite. It is always good to be safe and make sure your code works before you do anything major. . | Creating comments is also something that is very important because it will not only allow you to understand your own code, but it can be used to teach others about your code. There can sometimes be lots of lines that are confusing, so it is important to clarify the pupose of those lines. . | Double check to make sure you user.api and user.py is correct as that will cause problems. It is also important to make sure you are updating your main.py files because that will allow you to test your code locally. . | . Both . When working with a team COMMUNICATION is so important as it connects the team together. If you are not communicating then you could be creating things that some one has already made or it could lead to problems with your cite. For example if some one commits and doesn&#39;t tell anyone to pull that would lead to unnecessary problems that could have been easily fixed. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/02/27/review-guide-blog.html",
            "relUrl": "/markdown/2023/02/27/review-guide-blog.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "N@tM",
            "content": "Summary of N@TM . This event took place on February 16, 2023 and my group and I arrived at 6:20 because our presenting time was at 6:30 and we wanted to have time to set up. Once we were all ready we walked around for a little bit and looked at some of the other groups projects, but when 6:30 came we all sat down and got ready to present. When the time came, Caleb had to take care of something, so he was not ready, but we still continued on. We presented to mostly parents and a few other students. Some of the parents and students just listened, while some of them asked questions like, &quot;how are you generating these locations?&quot; and, &quot;what is it deployed through?&quot;. We tried waiting for Caleb, but it was getting too close to the end, so we just decided to present and Mr.Yeung and everything went well and I think he liked it. Caleb was able to show up right at the end and he was able to present to Mr.Yeung. Once our time period was up (7:00), we walked around and looked at other CSP projects, 3D animation, photography, and ceramics. . Projects from Other Classes . Once the clock struck 7:00 I went around and started too look at other projects like 3D Animation, Photography, Ceramics, and other CSP projects. I was very impressed by the other students in the other CSP classes that they were so capable of doing some of the things they did. The 3D animation was also very impressive to me because some of them had so much detail that it seemed impossible to recreate. Some of the photography photos didnt even look real, which surprised me. Once I saw how good some of the other CSP projects were, it inspired me to make mine even better. -Below are some of the photos I took and what I thought about them. . Projects from CSP . . This game is called cooler math games and there are various math games you can chose from | They had a minesweeper game, tic tac toe, and a select your own game | I thought this was interesting because my group and the other groups in my period didn&#39;t do games, so I thought this one stood out | I also liked the leaderboard they had | . . This one caught my eye because I am interested into stocks | Their website had parts where you could open charts of the stock and they had a page where it told you the percent the stock was up or down | They also had a game that I thought was interesting where you got a certain amount of money you could use | They used an api that generated different stocks | . 3D Animation . . This 3D animation project had a whole kitche, which I though was unique | The coffee and the donut still stood out even with the whole kitchen, which I thought was good | I thought it was very impressive that they even included the backyard through the window | I also liked the person they added washing their hands | . Photography . . This photo featured a lit up building in the night down by the water | This one stood out to me because of lights that outlined the building | I also think the reflection off of the water made this photo a lot more unique | This photo reminded me of something I would see on my windows laptop before I log in (like a featured photo) | . Final Thoughts . I really enjoyed my expericne at the N@TM because it was very interesting seeing what the other students in CSP created and what the students om the other classes have been working on this trimester. I thought it was interesting what the other groups in CSP came up with because so many poeple had different and unique ideas and I enjoyed looking at the games people created. The art and cool to see and the photography was very cool because so many people had photos in different settings. Overall I would recomend going if you like looking at art work and student created projects. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/02/26/n@tm-blog.html",
            "relUrl": "/markdown/2023/02/26/n@tm-blog.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Big Idea 5.5-5.6 Hacks",
            "content": "Big Idea 5.5 Legal and Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . The license that my group decided to use was the MIT license and the Apache license because we felt it would fit our group the best. The MIT license is good because it allows free use and it very flexible. We also used the Apache license because it made for collaboration and on this project we need that, it also allows free use and it allows the users to build upon their work. Overall the MIT and Apache license are pretty similar. MIT and GPL are both open-source licenses, but they have different goals and restrictions. Both of the licenses are accessible to all, but the difference is if you are looking for more protection of users rights then GPL is the better option, but if you are looking for more flexibility MIT is the better option. | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . Software licenses: There are various distinct kinds of software licenses, including proprietary licenses, copyleft licenses (GPL), and permissive licenses (like the MIT License and Apache License). The project&#39;s objectives and the software&#39;s intended use will determine the license to use. | Digital rights: The era of technology has brought both new difficulties and chances for defending the rights of users and authors. For software developers, enterprises, and consumers alike, issues including copyright, patent law, and data privacy are becoming more and more significant. | Legal and ethical issues: When creating and publishing software, many different legal and ethical issues must be taken into account. These could relate to things like data protection, consumer privacy, and intellectual property rights. | . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . For our CPT project the license that my group decided to use was the MIT license and the Apache license because we felt it would fit our group the best. The MIT license is good because it allows free use and it very flexible. We also used the Apache license because it made for collaboration and on this project we need that, it also allows free use and it allows the users to build upon their work. Overall the MIT and Apache license are pretty similar. For my personal (blog) I decided to use MIT because I wanted to have a lot of freedom. This license also does not have many restrictions, which allows me be more flexible. I wanted a simple and straightfoward license that is easy to understand and one that gets the job done. | . Big Idea 5.6 Safe Computing . Describe PII you have seen on project in CompSci Principles. . PII I have seen in the projects in CompSci are login and user information. This can consist of usernames and passwords created by the users, which typically contain important information. I have also seen location as apart of PII. For our porject we are a house renting service in San Diego, so location is important. | . What are your feelings about PII and your personal exposure? . I feel that PII and my personal exposure is very important because that type of information is very important to me as a person and that information is apart of my identity. This is why I try and make sure I can make my account as secure as possible, with things like 2FA. I also try and look out for potiential viruses or links that could expose my personal data. | . Describe good and bad passwords? What is another step that is used to assist in authentication. . Good passwords are ones that contain at least 8-12 characters, ones that contain special characters, numbers, and upper and lowercase letters. The good passwords are typically complex. A bad password on the other hand is a password that is esay to guess, short, doesn&#39;t contain any special characters, and contains the users name. Another step to assist in authentication is 2FA. 2FA keeps a certian code on file or generates a code and then sends it user. The user must use this code in order to login into their account, so people who do not have access to the email or phone number cannot get in. | . Try to describe Symmetric and Asymmetric encryption. . With Symmetric encryption only one key is used to both encrypt and decrypt electronic information. With Asymmetric encryption there are two keys: one public key and one private key, that are used to to protect a message from unauthorized access or use. | . Provide an example of encryption we used in AWS deployment. . AWS provides a key management service, AWS Key Management Service (KMS), which can allow to easily control and securely store your encryption keys. | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . I have never actually learned about phishing the hard way or at least I cant remember a time I learned about phishing the hard way. I am very cautious when it comes to my personal information, so I stay away from random links that are texted to me and random emails that I recieve. I also use an ad blocker some times to limit the chances of me falling for something. Type of phishing technique that I have encountered is when a random phone number sends you a text message and says you have a reward to claim and you have to click on the link they sent to claim that reward and then when you click on the link your information can be given away. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/02/12/5.5-5.6-hacks.html",
            "relUrl": "/markdown/2023/02/12/5.5-5.6-hacks.html",
            "date": " • Feb 12, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Big Idea 5.3-5.4 Hacks",
            "content": "Big Idea 5.3 Computing Bias . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Google “What age groups use Facebook” vs “… TikTok”? I think the data shows that Facebook is used by an older audience while TikTok is used by a younger audience, but they both have a good amount of users in the 20-30 year old category. I think this datt makes sense because Tiktok is directed at a younger audience due to its bright colors and dancing trends, while Facebook is directed towards at a older audience due to it duller colors and it has been around longer. | Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. I think that virtual assistants have female voices because they are trying to represent a mother and mothers usually symbolize comfort. Female voices can also be perceived as friendly and helpful and people potentially could just prefer female voices as they tend to be more comforting. | Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple, Netflix, Google) I think most of these companies specifically Amazon they track what you search and then they provide products that are similar to what you have been looking at. I also do feel other companies do the same thing, it might not be what you search, but really anything you interact with (ex: liking a post and then it will give you similar posts to the one you liked) | Does the owner of the computer think this was intentional? No I do not think the owner of the computer did this intentionally. I think this happened because when they were testing the camera they tried it on little to no people of color. It is harmful because the camera may not work for everyone, but I don&#39;t think they meant to do thim. I think this should be corrected and to do that they should try it on people of color, so then they know it works for everyone. | . Big Idea 5.4 Crowdsourcing . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . Since we are working on our projects we can create a survey that people can fill out anonymously and provide feedback and suggest changes that could make someones project better. Another idea is we can create a website that everyone can work on and sumbit their own ideas and then collaborate with others to develop the idea. | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . We can use Del Norte students and staff to come up with ideas that could make the school a better place and we could also find things people don&#39;t like about the school and fix those problems. Our project could be better with crowdsourcing because if we ask other people about things they don&#39;t like then we can change them. We can also ask people about what places they like to vacation (we are a hosue renting service,) so then our project can actually be used to help people. | . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . At the N@tM I think it would be important to collect how important our project is to each person on a scale of 1-10. With this data we can show how our project can be useful in the real world or how it would not be useful. This also provides us with feedback and the thoughts of others outside of our group. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/02/05/5.2-5.4-hacks.html",
            "relUrl": "/markdown/2023/02/05/5.2-5.4-hacks.html",
            "date": " • Feb 5, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Quiz 2 Results & Corrections",
            "content": "My Score . My Corrections . My answer is wrong because mine is not multplying by 3 the command that says repeat 3 times indicates multiplication and I used addition. This is also in correct because iff the value of y was 2, the inner loop would repeat two times and the outer loop would repeat three times. The statement result &lt; result + 1 would be executed 3 times 2, or six times. When y = 2, the value of y + 3 is 5, not 6. . My answer is wrong because eventually the loop will reach 7 wheras with 6 it won&#39;t because the number is always going to be odd. This is also incorrect because the value of the variable j starts at 1 and increases by 2. If &lt; MISSING CONDITION &gt; is replaced with the expression j = 7, the expression will evaluate to true when j is 7 and the loop will end. . The robot can only be in one of four squares in the grid, given that p is a positive integer. These squares include the starting position, two squares above facing up, two squares above and two to the right facing right, or two to the right facing left. The position depicted is not a possible final location. . I got part of the question correct, but B is not correct because it will not get the robot to the gray square, but C will, so the answers are A and C. A is correct because with each iteration of the Repeat 4 times loop, the robot will move one square to the left and one square up and will remain facing up. After four of these iterations, the robot will finish in the gray square. . A is wrong because it should draw the circle after the radius and y value is adjusted, this is also why B is correct. D has the same error it draws the circle before the y and r values are adjusted, which is why C is correct, so the 2 answers are C and B. . A is incorrect because only at some times value will be 2 and make the procedure true, but everytime the number is going to be even, which is why C is correct. A is also incorrect because if the initial value of number is 4, the REPEAT UNTIL loop will reduce the value of number to 2, and then to 0, at which point the loop will terminate. The procedure will return true, not false. . C is not correct because there is no way for the robot to end above the starting position (it either goes left or right,) which is why B must be correct. It is also incorrect because the robot turns right one, two, or three times and could end up in a square to the left of its initial position. It cannot end up in a square above its initial position. . This question was confusing and I did not really understand what they were asking for, but I put B and C and the answers were A and D. According to college board the answer is not B becuase, The statement Random (1, 5) could evaluate to 1, 2, 3, 4, or 5. There is a two out of five, or 40 percent, chance that it could evaluate to 1 or 2. If this happens, the value of sum is increased by 1, which simulates a person voting for the candidate. This does not match the goal of the program, which is to simulate an election in which a certain candidate is expected to receive 20 percent of the vote. . Answer B is incorrect (interchanging line 5 and line 6) because since they are both inside of FOR EACH loop interchanging them will not affect the number of operations performed. Answer D is correct (interchanging line 7 and line 8) because then you will be able to find the final average instead of having it keep repeating and getting different averages. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/01/30/quiz2-corrections.html",
            "relUrl": "/markdown/2023/01/30/quiz2-corrections.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "College Board Plan",
            "content": "College Board Criteria (Sign Up) . Row 1: It will function as an input and output because the user will input the parameters of their personal data that will then be stored and then it can be used in the furture for them to log in with. | Row 2: Data will be stored through this feature as it will use the users input to save the information about the user and then that data will be inputted in the database. | Row 3: I will use data abstraction to allow my code to be as minimal as possible while managing complexity. I will try and use other ways than a list to store my data. | Row 4: The parameters of username, birthday, and password will be set as a result of calling these procedures, but there will not be any output, the data will just be stored. | Row 5: I can implement a selection that can be used to select a good password. If the password is weak it will not be selected and they will have to make a better password. | Row 6: There will be inputs from the user that will be stored and they will use to sign in after they sign up. | . Code Plan . The code plan is to first setup the frontend by 2/3 getting all buttons and user input sections displayed to fast pages. Then I will create the databases of each of the users. After I will code the buttons in order to fetch the from the database using fetch in javascript, database with python, and frontend with sass and html. This will take me a couple of weeks but it will need a lot of planning to make sure that there is there is time to correct error and get perfection. I also want to have enough time to create a confirm password and a password strength checker. | . Video Plan . In the video I will create scenarios where a person wants to sign up and I will create features that allows them to sign up and then sign in. I can show my use of parameters and procedures by adding a username, password, and confirm password. The user information will be stored and then they can use that information to login in. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/01/30/feature-for-project.html",
            "relUrl": "/markdown/2023/01/30/feature-for-project.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Circle Blog Post Reflection",
            "content": "5.1 Reflection . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing . Video Games: - Benefits of video games are they can be a hoddy, job, or a way to interact with friends online. - A harmful effect of video games is they release dopamine and they can cause people to get addicted and not do things they are supposed to do like their homework. . | Social Medial: - Benefits of social media is that it allows you to meet new people and it allows you to educate yourself. - A harmful effect of social media is people could have a higher chance of being bullied and social could be a distraction. . | Smart Watch: - Benefits of a smart watch is that it makes it easier to answer calls and respond to texts. - A harmful effect of a smart watch is that you could be easily distracted in class due to how easy it is to access the watch. . | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . I think there are many dopamine issues with students personal study and success in High School. Since video games and social media release many amounts of dopamine and they can distract students from their work. Personally I feel like video games get in the way of my High School work because I will act like I dont need to study, so then I can play video games. | . 5.2 &#8211; Digital Empowerment . How does someone empower themself in a digital world? . Having a set of digital skills can be very beneficial. In the digital world if you have digital skills it can lead to you having job advantages and better communication. Understanding how the digital world works can help you identify security risks and help you prevent youself from falling for one. Being involved in the digital world can allow you to stay up to date with digital trends and it can allow you to access new opportunities. | . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . Someone that is empowered can help someone that is not empowered by becoming almost like a mentor for them by teaching and showing their skills, so that person that is not empowered will be able to become empowered. At Del Norte HS I can teach some of the people about APCSP and show they how the skills I am learning can be very useful in the real world and how them can empower someone. | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . I think paper in some ways is blocking digital empowerment because people that have grown up with paper are going to be more inclined to use paper over technology. There are also some other things that are blocking digital empowerment like the expense of it and the limited access some people have. I dont think there are such barriers at Del Norte because almost every student at one point was working online during covid, so everyone has had some experience with technology. Also for the people that have a hard time accessing technology at Del Norte stduents are able to get their own chromebooks. On the other hand some people may not be as fortunate, so I do see the expense of technology blocking digital empowerment. | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2023/01/24/classtalk-reflection.html",
            "relUrl": "/markdown/2023/01/24/classtalk-reflection.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "PT.3 Performance Task Blog",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The video shows a program that allows the user to input their choice of rock, paper, or scissors and the computer will randomly select one as well. The output will show the result of the match and give the user the option to play again. The program&#39;s purpose is to make a decision. | . Data Abstraction | 0 | 0 | Two code segments are shown, one storing data in a list named RPS, and the other does not access the data. The data stored in the list are the options that the computer can select as its input. | . Managing Complexity | 0 | 0 | The response explains that the program can be written without using a list by setting the variable &quot;cpuPlay&quot; using an if statement based on a random number, but it would not affect the complexity or ease of development/maintenance of the program. | . Procedural Abstraction | 0 | 0 | The response includes a student-developed procedure, &quot;rpsGame&quot;, which takes one parameter, &quot;yourPlay&quot; and uses it in a series of if-else statements to output a result based on both user&#39;s and computer&#39;s inputs. The procedure contributes to the overall program by allowing for smooth execution, but it does not specify how. | . Algorithm Implementation | 1 | 1 | The response explains that the student-developed algorithm within procedure, &quot;rpsGame&quot;, includes sequencing, selection (if statement), and iteration through use of recursion. The algorithm randomly selects an item from a list, saves it in a variable &quot;cpuPlay&quot;, displays the computer&#39;s choice, compares it with the user&#39;s input through a series of if-else statements, prints the result, and offers the user to play again. If the user inputs &quot;Yes&quot; the function is called again, if the user inputs &quot;No&quot; the computer prints &quot;Goodbye&quot;. | . Testing | 1 | 1 | The response describes two calls to the procedure with different arguments, leading to different results. The conditions being tested for the two procedure calls are if the user&#39;s input is equal to &quot;Rock&quot; and the computer&#39;s input is &quot;Paper&quot; in the first case and if the user&#39;s input is equal to &quot;Paper&quot; and the computer&#39;s input is &quot;Rock&quot; in the second case. If the conditions are true, the function displays &quot;You Lose!&quot; in the first case and &quot;You Win...&quot; in the second case. | . . Submission 2 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The video shows a program that helps users recognize new words and expand their vocabulary. The user inputs letters into a text field, the program outputs the letter in the correct spot of the randomly generated word or reduces the number of lives if the letter is not found, and shows a winning screen if the word is completed. Input includes letters, numbers, symbols and multiple letters in a single guess. | . Data Abstraction | 1 | 1 | Two code segments are provided, the first one stores data in a list named letOfGuessWord, and the second one accesses the data from the list in a for loop. The list holds the individual letters of the word that the user is trying to guess. | . Managing Complexity | 1 | 1 | The response includes a code that uses a list to manage complexity by storing the letters of the word to be guessed. The list is scanned based on its length, which allows for implementation of longer words. The response explains that if the program were to run without the list, it would be inefficient and more complicated as it would require 5 new variables to store individual letters and a for loop to check for a match between the user&#39;s input and the word. | . Procedural Abstraction | 1 | 1 | The response includes a student-developed procedure, &quot;guessWords&quot; which takes a parameter and uses it to compare the user&#39;s input to the letters of the randomly generated word. If the user&#39;s input matches the letter, it will display the letter in the correct spot and if the program does not find the letter in the word, it will take a life away from the user. The procedure contributes to the overall functionality of the program by doing the work of comparing the letters and determining the result. | . Algorithm Implementation | 1 | 1 | The student-developed algorithm within procedure, &quot;guessWords&quot;, includes sequencing, selection (if statement), and iteration (for loop). The algorithm uses a for loop to loop through the entire list by the length of the word that the user is trying to guess, then uses an if statement to compare the letter that the user inputted to all of the letters in the randomly generated word. If the if statement condition is true, it sets the letter that the user inputted to the index of where the letter was found in the randomly generated word, sets a boolean &quot;check&quot; to true, and adds 1 to &quot;count&quot; to keep track of how many times the user has guessed a letter correctly. | . Testing | 1 | 1 | The response describes two different calls to a procedure that results in different code being executed. The user inputs the number &quot;1&quot; and the letter &quot;h&quot; when the word to be guessed is &quot;hello&quot;. The conditions being tested are the number &quot;1&quot; not being found in &quot;hello&quot; and the letter &quot;h&quot; being found in &quot;hello&quot;. The results of the two calls are false for the first call and true for the second call. | . . Submission 3 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The video shows an app that helps with memorization or learning something new by displaying general information, such as the state flag, area, and population, of a selected state from a drop-down list, and allowing the user to select more information. The input is the selected state and the chosen information, the output is the general information and the selected information displayed on the screen. | . Data Abstraction | 0 | 0 | Two code segments are provided, the second one shows data being stored in a list named stateList, containing all the information the user will see on the general information screen like State name, Flag, Population, Capital, and Population. However, the code fragment provided only shows the state name stored in the list. | . Managing Complexity | 0 | 0 | The response includes code that uses lists to manage complexity, but it does not explain how the code would be more complex or inefficient without them. The response states that it would take a long time and be inefficient without the use of a list. | . Procedural Abstraction | 0 | 0 | The response includes a student-developed procedure &quot;updateScreen&quot; but it does not have any parameter and it is not called in the second code segment. The response describes the procedure inaccurately as it does not update the state screen but only sets an index and does not explain how it contributes to the overall functionality of the program. | . Algorithm Implementation | 0 | 0 | The response partially explains the algorithm in the procedure &quot;updateScreen&quot; which includes sequencing and selection using if/else statements, but does not include iteration. The algorithm uses else if statements to narrow down the user&#39;s selected state and sets the index value based on the match, but the response does not explain the specific value set for each U.S. state. | . Testing | 0 | 0 | The response describes two calls from the specified procedure, but it is not an implicit parameter, it is assigned after the call is made. It describes the two separate operations the user performs, not the conditions being tested by the given parameter. The response does not specify the results of the two calls, but the results that appear on the screen. | . . Submission 4 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The video demonstrates a program that allows the user to control a boat&#39;s movement and catch fish, with the purpose of lessening boredom. The input is the user pressing keys &#39;a&#39; and &#39;d&#39; and the output is the boat&#39;s left and right movement. The video also includes scorekeeping for total score and tracking the amount of each fish caught in time. | . Data Abstraction | 1 | 1 | The response explains that a list called fishtypes is used to store information about the types of fish caught, and the number of each type caught. The code also shows that this data is accessed in a for loop. | . Managing Complexity | 1 | 1 | The response includes a list of lists that manages complexity by storing fish data, including type and number caught. The response explains that the code can be written without lists by creating new variables for each added fish, but this would be less efficient and would require more changes to the program. | . Procedural Abstraction | 1 | 1 | The response includes a student-developed procedure, &quot;clone+movement+range,&quot; that uses five parameters. The procedure determines where a clone of a sprite spawns, how far it can move, and where it goes when it reaches the end of the screen. The procedure makes the game more challenging by causing each fish clone to spawn and move randomly at a range of speeds or height. | . Algorithm Implementation | 1 | 1 | The response describes a procedure called &quot;clone+movement+range&quot; which uses sequencing, selection, and iteration to determine the spawning, movement, and end positions of a clone sprite. The procedure starts by moving a newly spawned clone to a random x position within the screen and a random height within a range specified by the ‘y1’ and ‘y2’ parameters. Then, a loop begins until either the game ends or the clone touches the hook. Inside the loop, there is an if-else statement where if the clone touches the edge of the right side of the screen, the clone would teleport left to a position specified by the ‘rt state’ (return state) and to random height within a range specified by ‘y1’ and ‘y2’ parameters. | . Testing | 0 | 0 | The response does not specify the arguments passed to the procedure and how they affect the procedure&#39;s behavior. Instead, it explains alternative coding segments that could be used. The response describes conditions being tested, but it does not correspond to how the parameters are used in the program. The response also describes the code segments rather than the result of the procedure call. | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2023/01/22/pt.3-performancetask.html",
            "relUrl": "/markdown/java/2023/01/22/pt.3-performancetask.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Database/Model, Backend, OOP, Python",
            "content": "Database and Table Terms . The foundations of database is defining one or more Tables. In Python, a database can be constructed using the foundations we learned in modeling a Class. . A &quot;Table&quot; is a Model/Schema within a Database. | A &quot;Table&quot; definition in Python/SQLAlchemy is manifested by defining a &quot;Class&quot; and &quot;Attributes&quot; in Python. | A Python Class can inherit database functionality from SQLAlchemy. This is a method Python developers use to turn a Class into a Table within a SQL Database. | Writing methods in the Class for Create, Read, Update, Delete (CRUD) is how a developer initiates database operations. | . Reference . SQLAlchemy | Python Backend with Flask, SQLite | Python Backend starting Controller | . Outline for Backend Model and Database . OOP modeling with SQLAlchemy enables CRUD operations. . Users Table Schema | Database Properties . | Initial Database Setup (call) . | Initial Database Setup (add records) . | OOP CRUD operations . | User Table Schema . The db.Model is inherited into the class User(db.model), Each db.Column is provided properties according to capabilities of SQL. See init.py for db object definition. . db = SQLAlchemy(app) . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # Defines a relationship between User record and Notes table, one-to-many (one user to many notes) posts = db.relationship(&quot;Post&quot;, cascade=&#39;all, delete&#39;, backref=&#39;users&#39;, lazy=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=date.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob . User Table CRUD operations . All these def&#39;s are methods of the User Class. . def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, &quot;posts&quot;: [post.read() for post in self.posts] } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Outline to understand Devops and Databases . DevOps and the SQLite database requires file management and configuring Python to work in local and deployment environment. . Volumes in Deployment | Database URI (deployment) . | Review Dockerfile . | Database URI (testing) . | Exclude/Ignore Testing Database . | Port and Host (testing) . | Run locally as you develop Select main.py file in VSCode and press Play button, or press down arrow next to Play button to activate Debug testing. The below dialog will appear in Terminal. . | (base) machine:flask_portfolio user$ cd /Users/user/vscode/flask_portfolio ; /usr/bin/env /Users/user/opt/anaconda3/bin/python /Users/user/.vscode/extensions/ms-python.python-2022.20.2/pythonFiles/lib/python/debugpy/adapter/../../debugpy/launcher 61127 -- /Users/user/vscode/flask_portfolio/main.py * Serving Flask app &quot;__init__&quot; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on all addresses. WARNING: This is a development server. Do not use it in a production deployment. * Running on http://192.168.1.75:8086/ (Press CTRL+C to quit) * Restarting with watchdog (fsevents) * Debugger is active! * Debugger PIN: 403-552-045 . Run with Docker prior to commit and deployment It is much simpler to debug Docker issues in VSCode prior to Deployment on AWS. This will create production database sample, which will show up commits. Simply delete file after run session, do not commit it. | (base) machine:flask_portfolio user$ pwd # verify directory /Users/user/vscode/flask_portfolio (base) machine:flask_portfolio user$ docker-compose build # run docker build [+] Building 16.0s (10/10) FINISHED =&gt; [internal] load build definition from Dockerfile 0.0s ... =&gt; [1/6] FROM docker.io/library/python:3.10@sha256:e9f824eec86879b1ffe8da9ef3eb4677dd6e89b63e8bce8cb35c572f550751d8 0.0s =&gt; CACHED [2/6] RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git 0.0s =&gt; [3/6] COPY . / 0.2s =&gt; [4/6] RUN pip install --no-cache-dir -r requirements.txt 9.7s =&gt; [5/6] RUN pip install ... =&gt; =&gt; writing image sha256:47ccd2a3ca839139727dd8c8f57fc1ad6a36e670962059d960d21b3ad0cba292 0.0s =&gt; =&gt; naming to docker.io/library/flask_port_v1 0.0s (base) machine:flask_portfolio user$ docker-compose up # enable for browser testing, no -d! This allows ctl-C to stop and all errors will appear in Terminal [+] Running 1/1 ⠿ Container flask_portfolio-web-1 Recreated 0.1s Attaching to flask_portfolio-web-1 flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [1] [INFO] Starting gunicorn 20.1.0 flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [1] [INFO] Listening at: http://0.0.0.0:8086 (1) flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [1] [INFO] Using worker: sync flask_portfolio-web-1 | [2023-01-15 13:08:19 +0000] [7] [INFO] Booting worker with pid: 7 . docker-compose.yml has a volume mount. . Docker run in a container, its own virtual computer. Outside of the Docker container is where we desire to keep the SQLite database, thus there is a mount to a files accessible by developers. This ensures data is saved after Docker virtual computer up/down. The Left side of volume says ./volumes is a relative location on computer where docker-compose build/up was run, this is were database can always be seen. The Right side /volumes is where the Docker container see the volume. . version:&#39;3&#39;services: web: image: flask_port_v1 build: . ports: - &quot;8086:8086&quot; volumes: - ./volumes:/volumes restart: unless-stopped . init.py contains project settings. . This file contains app variables that can be referenced anywhere the app elements is imported (from __init__ import app, db). This is a way of sharing configuration across the many python/flask files in the project. Review the below file and become familiar with the settings ... . from flask import Flask from flask_login import LoginManager from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate &quot;&quot;&quot; These object can be used throughout project. 1.) Objects from this file can be included in many blueprints 2.) Isolating these object definitions avoids duplication and circular dependencies &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) dbURI = &#39;sqlite:////volumes/flask_portfolio.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = dbURI app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy(app) Migrate(app, db) # Images storage app.config[&#39;MAX_CONTENT_LENGTH&#39;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&#39;UPLOAD_EXTENSIONS&#39;] = [&#39;.jpg&#39;, &#39;.png&#39;, &#39;.gif&#39;] # supported file types app.config[&#39;UPLOAD_FOLDER&#39;] = &#39;volumes/uploads/&#39; # location of user uploaded content . Outline of SQL Administration Tools . Learning SQL basics using SQLite tools. . Install SQLite Viewer in VSCode marketplace, click on SQL database to review schema and see rows. . | Install SQLite and review SQLite Explorer. . | SQLite3 Website describes the command line SQL administration tool. To install on Mac terminal brew install sqlite3, on WSL terminal sudo apt install sqlite3. . | SQL Cheat Sheet. These commands can be done using SQLite3 and perhaps in Market Place tooling. | Loading SQLite3 from volumes directory . (base) machine:volumes user$ sqlite3 sqlite.db . Review content in users table . sqlite&gt; select id, _name, _uid, _dob from users; 1|Thomas Edison|toby|1847-02-11 2|Nicholas Tesla|niko|2023-01-14 3|Alexander Graham Bell|lex|2023-01-14 4|Eli Whitney|whit|2023-01-14 5|John Mortensen|jm1021|1959-10-21 6|Hedy Lamar|hedy|2023-01-14 7|Hedy Lamarr|heddy|2023-01-14 8|Marie Currie|marie|2023-01-14 9|Wilma Flintstone|wilma|2023-01-14 10|Fred Flintstone|fred|0010-01-01 . Delete content in users table, redisplay . sqlite&gt; delete from users where id=7; sqlite&gt; select id, _name, _uid, _dob from users; 1|Thomas Edison|toby|1847-02-11 2|Nicholas Tesla|niko|2023-01-14 3|Alexander Graham Bell|lex|2023-01-14 4|Eli Whitney|whit|2023-01-14 5|John Mortensen|jm1021|1959-10-21 6|Hedy Lamar|hedy|2023-01-14 8|Marie Currie|marie|2023-01-14 9|Wilma Flintstone|wilma|2023-01-14 10|Fred Flintstone|fred|0010-01-01 . Quit SQLite3 and return to prompt . sqlite&gt; .quit . SQLite Explorer . id _name _uid _password _dob . 1 | Thomas Edison | toby | sha256$Yj69CENuKWaRDHw3$dcb731d06dd59b7a316a853944b6603197876aa3a9553a758865d849a2b0a502 | 1847-02-11 | . 2 | Nicholas Tesla | niko | sha256$muQZzhqAFgXLERzC$cc7a02c80fc80190cd0b052d0dd010272cc8bc81971a7fe3cad6cee4a13e55e7 | 2023-01-14 | . 3 | Alexander Graham Bell | lex | sha256$rBKtyle2TI1vY7y9$ace54fb1e44640213f4aa284d6fe05cd27bfbcd1f7ac6d2ba697400d0b78cb7e | 2023-01-14 | . 4 | Eli Whitney | whit | sha256$j31DNBdcLtDALA4x$d39828e9e016c675b6c27ce1e6a08e196ffa5b7740978d6b313d039e60756375 | 2023-01-14 | . 5 | John Mortensen | jm1021 | sha256$5gt0IT2TiQm0UWi5$3d74775d35d2e2b0865deefb8f59e22e2b35d8c19ab4b1c26c7e50a27d3bf9fd | 1959-10-21 | . Hacks . The Big Picture purpose of this hack is to build a database. Being able to create an SQLite table and populate test data within it is the major goal. To do this effectively it is imperative to show the following. . Build Schema for a table, make a new model file and use users.py as an example. Start slow and simple and build up. | Build an initXXXXX() method and use it to add preliminary/test data to the table. Once again use users.py as an example. | Make a 30-60 second video where you show a Debugging session of making new rows in the table. Use sqlite marketplace tools and/or sqlite3 command line tool to show success in creating table and adding data. | Hack Helper . Here are some tips. . Become familiar with initUsers(). Observe it is called/activated from main.py. This function activates after you run the main.py and activate the web application in the browser. Observe that the sqlite.db file will appear in the volumes directory in conjunction with home screen of site appearing in browser. . | Delete sqlite.db from volumes directory on your development machine. Set breakpoint on initUsers() and run main.py using debug. Use the step into option on the debugger and observe the creation of data. . | . @app.before_first_request def activate_job():initJokes() initUsers() . Make your own XXXXX.py file under model directory. Follow users.py and develop your own schema from the OOP code you did in last Hacks. Follow the pattern in users.py to make a initXXXX() function top populate some test data. . | In main.py, add your initXXXX() method to def activate_job() function shown above. Use this as basis of your video debugging session. Debugging is hugely important at this level to understand your database success prior to building an API. Building initXXXX() method, adding database records, and debugging will enable you to verify CRUD operations as you develop. . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/01/17/PBL-database.html",
            "relUrl": "/2023/01/17/PBL-database.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "PT.2 Performance Task Blog",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 0 | 0 | The purpose of the program is stated as &quot;for you to see all the animals and to identify them when you&#39;re asked later&quot; but it does not state the problem being solved or creative interest being pursued. The response also does not accurately describe the functionality demonstrated in the video and confuses input and output. | . Data Abstraction | 0 | 0 | Two code segments are provided, one showing storage of data in a list named animalImages, and the other showing another list named animalList. However, animalList is not used in either code segment. The response describes the data contained in animalList, but it also describes the images from animalImages, which are stated to be in the list. | . Managing Complexity | 0 | 0 | The response does not include a program code segment that uses a list to manage complexity. Both code segments show data being stored in a list, but neither contain code using a list. The code is not complex. The response also does not explain how the list manages complexity, it just states that the array allows you to store more than one variable making it shorter and more complex, but it does not explain how it would be written differently without the list. | . Procedural Abstraction | 0 | 0 | The response includes a student-developed procedure called evaluateGuess with one explicit parameter, guess, and a call to this procedure in a second code segment using the argument guess. The response describes the functionality of the procedure as determining if the user&#39;s guess is right or wrong. However, the response does not describe how this procedure contributes to the overall functionality of the program. | . Algorithm Implementation | 0 | 0 | The student-developed algorithm within the procedure, evaluateGuess, includes sequencing, iteration (a for loop) and selection (an if statement). The response provides a minimal description of the algorithm, but it does not provide enough detail for someone to recreate it. | . Testing | 1 | 1 | The first call is for &quot;dog&quot; which is a correct guess. The second call is for &quot;mouse&quot; which is an incorrect guess. The response also describes the conditions being tested in the procedure, which are whether the guess is equal to one of the animals in animalList or not. The response also states the different results of the two calls, the first call results in &quot;You got a point!&quot; and the second call results in &quot;That&#39;s 1 strike.&quot; | . . Submission 2 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The purpose of the program is specified as to explore the user&#39;s creativity through the expression of poetry using their words. The response also describes the functionality, showing the poems according to the user&#39;s inputs of words and setting of articles, resulting in multiple different poems with different word orders and another generation of poems with different words and no articles. The response also describes the input and output of the program. | . Data Abstraction | 1 | 1 | Two code segments are provided, the first shows data being stored in a list named nounList and the second shows the data being accessed from the list under a new name, wordList, since it is passed as a parameter. The response identifies what is stored in the list, stating that the data contains nouns that must be in certain specific locations within the poem to make logical sense. | . Managing Complexity | 1 | 1 | The response includes code that uses lists of words to manage complexity when generating poetry. It mentions that without the list, the noun inputs would have to be stored in different variables and would have to be invoked separately. Another method would have to be used to randomize selection such as generating a random integer, which would require writing individual statements for each possible int generated and making the code more cluttered. | . Procedural Abstraction | 1 | 1 | The response includes a student-developed procedure called createPoems, with four parameters that are used in the procedure. The response also describes how the procedure contributes to the overall program by stating that it is used in conjunction with the user inputs and builds poems according to how many poems the user specified and whether the user wanted articles in the poems. | . Algorithm Implementation | 1 | 1 | The student-developed algorithm within the procedure, createPoems, includes sequencing, selection (if statement), and iteration (while loop). The response explains in detail how the algorithm works, it sequentially first defines a variable to count the number of poems generated and defines an empty string, then it has iteration that generates as many poems as the user specified by running through the selection statements which call articlePoem or noArticlePoem each time. | . Testing | 1 | 1 | The response describes two calls to a specific procedure, createPoems, that result in different code being executed by varying the argument for the last parameter. The first call is createPoems(nounList, verbList, adverbList, 1) and the second call is createPoems(nounList, verbList, adverbList, 0). The last parameter represents the article preference setting. The response describes the conditions being tested by the code, which are whether the user input is 1 or 0 for the article preference setting. | . . Submission 3 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 0 | The video demonstrates a program that allows the user to select two Marvel characters from a drop-down menu, displaying their rankings and the winner of the battle using an image. The response describes the program&#39;s function, functionality demonstrated in the video, input and output. The response describes the input as the different button clicks to change the screens and the character names selected from each drop-down box. | . Data Abstraction | 1 | 1 | Two code segments are provided, the first showing data being stored in a list named firstCharacterList and the second accessing the data from that list in a loop. The response identifies the data stored in the list as the power rankings and URL for the image of a character selected from a drop-down box. | . Managing Complexity | 1 | 1 | The response includes a list that combines six rankings and an image URL for a character into one collection, managing complexity in the program code. The response explains that the list condenses the code, and without it the program would need more parameters and more steps to find the winner. | . Procedural Abstraction | 1 | 1 | The response describes a procedure called findWinner that compares the average power rankings of two Marvel characters passed as parameters. The procedure changes the winner screen to display the character with the higher average and if the averages are the same, it displays a &quot;tie&quot; image. The procedure contributes to the overall program by determining the hypothetical winner in a battle between characters. | . Algorithm Implementation | 1 | 1 | The student-developed algorithm in the findWinner procedure uses sequencing, selection, and iteration to compare the average power rankings of two characters selected from a drop-down menu. The algorithm iterates through the list of each character, sums up the rankings, and divides by 6 to get the average. It then compares the averages using a conditional statement to determine the winner and display their name and image on the winner screen. | . Testing | 1 | 1 | The response describes two calls to a procedure, findWinner, with different arguments (Vision and Bishop; Carnage and Venom) that lead to different results. The response explains how the procedure uses an if-else statement to determine the winner based on average ranking and displays the winner&#39;s image and name or a tie image. | . . Submission 4 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The video demonstrates a program that tests critical thinking skills by collecting input through a text entry field for guessing an 8-letter word, and displays the matching letters. The user inputs words, correctly guessing &quot;touching&quot; in 4 tries, but failing to guess &quot;sandwich&quot; in 6 tries. The input is a word the user inputs, and the output is the color scheme of the corresponding letters. | . Data Abstraction | 0 | 0 | Two code segments are provided, the first shows data being stored in a list named &#39;guesses&#39; but in the second segment, data stored in the list is not being used, only the length of the list is accessed. The response states that the data in the list represents all the user&#39;s word inputs. | . Managing Complexity | 1 | 0 | The response describes a program code segment that uses a list named &quot;guesses&quot; to keep track of the user&#39;s guesses, but the list is not used to manage complexity and can be replaced with a single counter variable. The response does not explain how the list manages complexity and instead mentions that the list&#39;s purpose is to stop the game after 6 guesses. | . Procedural Abstraction | 1 | 1 | The response includes a student-developed procedure, isitcorrect, which compares a user input guess to the correct word or letter positions. The procedure is called in the program with the argument answer. The procedure checks the user&#39;s answer every time they input a guess and contributes to the overall program. | . Algorithm Implementation | 1 | 1 | The response describes a student-developed algorithm called isitcorrect that includes sequencing, selection, and iteration. The algorithm checks if a user&#39;s input is 8 letters, if so it checks for position and accuracy of each letter, turning the output letters green, yellow or red accordingly, it also determines when the &#39;You Win&#39; or &#39;You Lose&#39; screen will show up based on the input. | . Testing | 0 | 0 | The response describes the conditions being tested in a procedure, specifically &quot;whether or not the user inputs the right letter in the right position&quot; and &quot;whether or not the user inputs the right letter in the wrong position.&quot; It also describes the result of these conditions, with the letter color changing to green or yellow respectively. The response does not provide specific arguments used in the procedure call. | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2023/01/16/pt.2-performancetask.html",
            "relUrl": "/markdown/java/2023/01/16/pt.2-performancetask.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, classof, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self._classof = classof self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def classof(self): return self._classof @classof.setter def classof(self, classof): self.classof = classof # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;classof&quot; : self.classof, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, classof={self._classof} password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, classof=&#39;1867&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;classof&#34;: &#34;1867&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_classof&#39;: &#39;1867&#39;, &#39;_password&#39;: &#39;sha256$20URaDWZhMIJclJm$be5992a31b187fdf834a7f726190563603a58aff25b90554b95af83522aec497&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classof&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classof&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, classof=1867 password=sha256$20URaDWZhMIJclJm$be5992a31b187fdf834a7f726190563603a58aff25b90554b95af83522aec497,dob=1847-02-11) . Hacks (code is added in section above) &#8593; . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Hacks for project is on group repository . we added partysize attribute to define the party size of the customer | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Preformance Task Blog 2",
            "content": "Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | Their program has user input, the program functions well, and there is an output for the program. The purpose was there (simulated John Conways Game of Life.) Describes how the code is functioning. States the input for the program and output for the program. | . Data Abstraction | 1 | 1 | Their answer includes 2 program code segments with 1 storing data and the other is a part of fullfilling the programs purpose. They also identify the variable used (startGrid.) They also describe how the data is stored:the status of one of the 10,800(120 x 90) possible cells on screen. A 0 being dead, and a 1 being alive. | . Managing Complexity | 1 | 1 | They use a code segment that manages complexity by using a list to store all of the data in one place. The list makes it easier to keep track of the data and easily change data. The explanation is also very detailed about how the code manages complexity. | . Procedural Abstraction | 1 | 1 | They deserve a 2 because they include a student created procedure with 2 parameters (current and replacement) and they also createcd a code segment that defined what was being call in the above procedure. They also include the functionality of the procedure in the response by saying, &quot;This procedure takes as inputs identifying numbers for two lists. The first will be copied over to replace the second.&quot; | . Algorithm Implementation | 1 | 1 | The student uses sequencing, selection (if statement), and iteration (repeat loop) in their student developed algorithm. Their explanation is good enough to where some one would be able to recreate their code. They state, &quot;The algorithm uses nested if-else statements to identify which list will be copied from, by looking at the first parameter. Inside the if statement matching that parameter, are another set of if statements to determine where the list should be copied over to.&quot; | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2023/01/04/performancetask(2).html",
            "relUrl": "/markdown/java/2023/01/04/performancetask(2).html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Preformance Task Blog 1",
            "content": "Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 0 | I gave them a 1 because I felt they answered all of the requirements. I think College Board gave them a 0 because the video was not very good and they did not explain each point very well | . Data Abstraction | 1 | 1 | I all of the required points were there and they went into dept about each topic and explained the code pretty well | . Managing Complexity | 0 | 0 | The list they used does not manage complexity, which is the main point of this question, which makes them get a 0 | . Procedural Abstraction | 1 | 1 | This meets all of College Board Requirements because it has 2 student created pieces of code with more than 1 parameter | . Algorithm Implementation | N/A | N/A | N/A | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2023/01/04/performancetask(1).html",
            "relUrl": "/markdown/java/2023/01/04/performancetask(1).html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Grades for All Lessons",
            "content": "Links For Work: . 3.1-3.2 | 3.3-3.4 | 3.5-3.7 | 3.8-3.10 | 3.9-3.11 | 3.12-3.13 (My Group) | 3.14-3.15 | 3.16 | 3.17-3.18 | . Lesson Grades &lt;/tr&gt; 3.1-3.2 | 1.0 | . 3.3-3.4 | 1.0 | . 3.5-3.7 | 0.9 | . 3.8-3.10 | 0.8 | . 3.9-3.11 | 0.9 | . 3.12-3.13 | My Group | . 3.14-3.15 | 0.9 | . 3.16 | 0.95 | . 3.17-3.18 | 1.0 | . &lt;/tr&gt; .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2022/12/15/reflection.html",
            "relUrl": "/markdown/java/2022/12/15/reflection.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "3.17-3.18 Homework and Hacks",
            "content": "Important Vocab/Notes . There are 4 types of algorithms, 1 step, 2 step, 3 step, and 4 step | An example of a 1 step is: 2 * n | An example of a 2 step is: 2^n | An example of a 3 step is: (2 * n)^2 | An example of a 4 step is: 5! = 5 4 3 2 1 = 120 | There are problems that computers cannot solve | If a computer can solve a problem it may take an unreasonable amount of time | Undecidable problem: problems for which no algorithms can be built that can provide a correct yes or no answer or a solution | Decidable problem: problems for which algorthms could be written to solve/produce a correct output for all inputs. | . HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . The difference between an decidable problem and an undecidable problem is that an undecidable problem has no algorithms that provide a solution whereas a decidable problem has algorithms that are solutions. | . def ben(): z = 0 i = 1 while z != 1: i = i + 1 print(i) ben() . vardaan = 5 if vardaan &gt; 10: print(&quot;greater than 10&quot;) else: print(&quot;not greater than 10&quot;) . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . This is the answer because there is 3 steps (3 x 8) and then you have to put it to the power of 2, which is another 2 steps (24 x 2 x 2) this makes a total of 3 steps. | . D. None of the above . E. All of the above . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Rewritten One: . function peakFinder(array) { let peak = 0; let peakIndex = 0; for (let i = 0; i &lt; array.length; i++) { if (i === 0 &amp;&amp; array[i] &gt;= array[i + 1]) { peak = array[i]; peakIndex = i; break; } else if (i === array.length - 1 &amp;&amp; array[i] &gt;= array[i - 1]) { peak = array[i]; peakIndex = i; break; } else if (array[i] &gt; array[i - 1] &amp;&amp; array[i] &gt; array[i + 1]) { peak = array[i]; peakIndex = i; break; } } return `The ${peakIndex} indexed number, ${peak} is a peak`; } . Rewritten One . This was hard to do because I am not too good at JavaScript, so I used what I new and made the code more efficient with binary search | . HACK 4: Rewrite this Python Code in a More Efficient Way . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] print(&quot;This is the unsorted data:&quot;, data) data.sort() print(&quot;This is the sorted data&quot;, data) . Instead of having all of the extra code I simply used a sort function to sort the data. | . HACK 5: Rewrite this Python Code in a More Efficient Way . from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm): print (i) . (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1) . This version of the function uses an in-place algorithm, which means that it does not create a new list for each permutation. | . Blog/Final Thoughts . Found out there are undecidable problems are | Also found out what a 1 step, 2 step, and 4 step, functions are | These were things that I did not even no about before | For creating the more effiecient code I understood it a little, but it was pretty hard to understand what to do, at least for #3 | Hack 3 and 5 for probably the hardest and 3 was pretty confusing | Also learned how to make code more effective and simplify it | . Extra . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;] heap_permutation(data, len(data)) . [&#39;apple&#39;, &#39;banana&#39;, &#39;carrot&#39;] [&#39;banana&#39;, &#39;apple&#39;, &#39;carrot&#39;] [&#39;carrot&#39;, &#39;apple&#39;, &#39;banana&#39;] [&#39;apple&#39;, &#39;carrot&#39;, &#39;banana&#39;] [&#39;banana&#39;, &#39;carrot&#39;, &#39;apple&#39;] [&#39;carrot&#39;, &#39;banana&#39;, &#39;apple&#39;] . from itertools import permutations perm = permutations([&quot;apple&quot;, &quot;banana&quot;, &quot;carrot&quot;]) for i in list(perm): print (i) . (&#39;apple&#39;, &#39;banana&#39;, &#39;carrot&#39;) (&#39;apple&#39;, &#39;carrot&#39;, &#39;banana&#39;) (&#39;banana&#39;, &#39;apple&#39;, &#39;carrot&#39;) (&#39;banana&#39;, &#39;carrot&#39;, &#39;apple&#39;) (&#39;carrot&#39;, &#39;apple&#39;, &#39;banana&#39;) (&#39;carrot&#39;, &#39;banana&#39;, &#39;apple&#39;) .",
            "url": "https://jameshunter12.github.io/james-fastpage/2022/12/14/blog-Sections-17-18.html",
            "relUrl": "/2022/12/14/blog-Sections-17-18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Technical Business Extra Credit",
            "content": "Kathyleen Beveridge Notes . Lived in Spain and moved to San Diego in 2004 | Was a finace major and when graduated worked at Wells Fargo | Worked as a broker | Started her high tech carrer HP | Switched and then worked at Qualcomm | HP Inc: Create technology that makes life better for everyone, every where | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer | At Thermo Fisher her job is to think if the product fits with the market | . Kris Porter Notes . Software Engineer- SRE, DevOps, Infrastructure | Livermore High School alum and enjoyed STEM classes | Enrolled in UCLA for electrical engineering | Masters degrees in Electrical Engineering from Cal State LA | Did research at an undergraduate school | Worked to make a robot that deployed in Costa Rica and scoutted the environment | Systems of engineer at a start up, GPM | Intro to Devops, transition to Qualcomm | Began working at Twitter | CCNA training | Streaming Media infrastructure | Twitter Projects: New DataCenter Deployment and Migrating HomeTimelineto GraphQl | . Extra Notes . Continuous learning is important | The best people to work with listen to the requirements and then they translate it to how technology can solve the requirement | Problem solving can be used in other carrers that don&#39;t necessary require coding | Coding can help to investment and finace because you can use understanding of algorithms and patterns | . Photos . .",
            "url": "https://jameshunter12.github.io/james-fastpage/2022/12/13/technical-business-extracredit.html",
            "relUrl": "/2022/12/13/technical-business-extracredit.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "3.16 Homework and Hacks",
            "content": "Important Notes/Vocab . A simulation is an simpler abstraction of an very complicated natural phenomena | It removes details that are unnecessary or are too difficult to simulate | Simulations make it safer, less expensive, repeatable, and can make predictions | You can remove details that do not matter | The difference between simulations and experiments is that experiments are held in the real world and simulations replicate the real world | A pseudo-random number generator could be used to randomly roll the dice | Simulations can not always be used for situations | Simulations are more of a prediction, while experiments are the actual outcome | An example of removing details from a simulation: when rolling a dice, things like particles in the air and the velocity of the throw are what really determine what you will roll. However simulating that would be unnecessary. | . Answer table . Comment on this blog post to submit your hacks. Fill out the table with your full name and the LETTER of each answer for every question. In order to receive any credit you must fill out the answer table according to the directions! Each question is worth .1 points. To get &gt;0.9/1 you can show your understanding in the area labeled extra. . Question Answer . Name(First+Last) | James Hunter | . 1 | N/A | . 2 | N/A | . 3 | C: because sudo code can make code more accurate then normal code | . 4 | B: because there is almost always another plain flying in the air | . 5 | C: Situation considered because most of the time the same situation is considered | . 6 | A: Simulation because it is a safer way to operate | . 7 | A: Simulation because they are guessing, so it would be a simulation | . 8 | N/A | . 9 | B: Experiment/calculation because they are calculating the grades, no point in making a simulation | . Extra . import random num_rolls = int(input(&quot;how many times would you like to roll?&quot;)) for i in range(num_rolls): roll = random.randint(1, 6) print(f&#39;Roll {i+1}: {roll}&#39;) . Roll 1: 1 Roll 2: 6 . This is a simulation that takes the amount of roles a person inputs and then roles a dice that many times and then dsiplays the output of each role. | . Blog/Final Thoughts . Learned about simulations | Compared simulations to experiments | Learned you can factor out unnecessary factors | Also now I understand when to not and when to use a simulation | .",
            "url": "https://jameshunter12.github.io/james-fastpage/2022/12/13/blog.Sections-16.html",
            "relUrl": "/2022/12/13/blog.Sections-16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "3.14-3.15 Homework and Hacks",
            "content": "Important Vocab/Notes . Documentation Text is text explains the what, how, or why of your code. | Libraries is a collection of prewritten code or procedures that coders can use to maximize their efficiency | Application Programming Interface (API) is a type of software through several computers are able to communicate information amongst eachother | Software libraries contain procedures used in creating novel programs. | random.choice picks a random item from a list | random.shuffle shuffles a the items in a list | radint: this allows you to generate a random integer from a set range | radrange:can be written like randrange(start, stop, step) where start is the minimum value, stop is the maximum value (like the randint function), and step is the incriment the values can be and its default value is 1 | . (1) Reflection . Thorough notes or summary that reflects understanding of today&#39;s lesson. . (2) Multiple Choice . 1. What does the random(a,b) function generate? . 1 . A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. . includes both a and b and any values in between | . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . 2. What is x, y, and z in random.randrange(x, y, z)? . A. x = start, y = stop, z = step . the order is start, stop, step | . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . 3. Which of the following is NOT part of the random library? . A. random.item . process of elimantion leaves this as the answer | . B. random.random . C. random.shuffle . D. random.randint . (3) Short Answer Questions . What is the advantage of using libraries? | An advantage of using libraries is it allows you to reuse code that has already been created, which allows you to save time. A person can simply call that library in order to get the information they need. | . Write a thorough documentation of the following code. | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) random_choice = random.randint(0, num_items - 1) person_who_will_pay = names[random_choice] print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Aiden is going to buy the meal today! . The code starts by having the user put in a set of name and then the code you len(names) to find the amount of people in the list. After the code picks a random value in the list and uses the corresponding name. They then have the information they gathered displayed by saying who is going to pay for the next meal. | . (4) Coding Challenges! . REQUIRED: Create programs in python to complete the two task&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Create a program to pick five random names from a list of at least 15 names | import random names = [&quot;James&quot;, &quot;Ethan&quot;, &quot;Charlie&quot;, &quot;Kai&quot;, &quot;Max&quot;, &quot;Aiden&quot;, &quot;Yasha&quot;, &quot;Brayden&quot;, &quot;Paulo&quot;, &quot;Cam&quot;, &quot;Ashkon&quot;, &quot;Gabe&quot;, &quot;Will&quot;, &quot;Nick&quot;, &quot;Will&quot;] selected_names = random.sample(names, 5) print(&quot;The selected names are:&quot;) for name in selected_names: print(name) . The selected names are: Paulo James Ashkon Max Cam . You can with making a list of 15 names and then you create a new list(selected names) that contains 5 random names. Then it prints each name in the selected names list. | . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | import random def roll_dice(): die1 = random.randint(1, 6) die2 = random.randint(1, 6) return die1 + die2 num_players = 2 player1 = [&quot;James&quot;] player2 = [&quot;Ben&quot;] for player in player1: print(f&quot;{player1[0]},&quot;) jamesscore = roll_dice() print(f&quot;You rolled {jamesscore} in total!&quot;) for player in player2: print(f&quot;{player2[0]},&quot;) benscore = roll_dice() print(f&quot;You rolled {benscore} in total!&quot;) if jamesscore &gt; benscore: print(&quot;James wins&quot;) else: print(&quot;Ben wins&quot;) . James, You rolled 12 in total! Ben, You rolled 7 in total! James wins . Starts by defining what a dice roll is like the possible outcomes. Then you input player 1 and 2 names and then you run the same section of code for each player that rolls 2 dice and adds the 2 numbers together. Then it compares player 1 to player 2 total score. | . Blog/Final Thoughts . Learned what a library was and documentation | Furthered my knowledge on API&#39;s | Learned the different randoms and rads like random.choice, random.shuffle, radint, and radrange | Learned new ways to randomize lists | I feel I understood documentation pretty and the different randomizes | Creating the dice roll problem was a little hard | . &lt;/div&gt; .",
            "url": "https://jameshunter12.github.io/james-fastpage/2022/12/12/blog-Sections-14-15.ipynb.html",
            "relUrl": "/2022/12/12/blog-Sections-14-15.ipynb.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "3.9-3.11 Homework and Hacks",
            "content": "Important Vocab/Notes . Indexes: the number that represents an element in a list | Element a integer or string in a list. | Algorithms can be written in different ways and still accomplish the same tasks | Algorithms that appear similar can yield different side effects or results | Some conditional statements can be written as equivalent Boolean expressions | Some Boolean expressions can be written as equivalent conditional statements | Different algorithms can be developed or used to solve the same problem | Algorithms can be created from an idea, by combining existing algorithms, or by modifying existing algorithms. | . 1. Write this Boolean statement in the form of a conditional (if/else) statement: . stayInside⟵((isCold) OR (isRaining)) . { if(isRaining){ stayInside &lt;- true } if(isCold){ stayInside &lt;- true } else { stayInside &lt;- false } } . This code is saying that if it is raining or cold then you stay inside. If it is not cold or rainy then you dont stay inside. | . 2. Create an algorithm that uses selection and/or iteration that will represent one player&#39;s complete turn. . During a turn, each player gets 4 attempts/chances to get the greatest number possible. . | During each attempt, the player will use a random number generator to select a random number from 1 to 10. . | After they have had 4 chances, their score is the greatest number they received from the random number generator, and their turn is over. . | . import random attempts = [] i = 1 while i &lt;= 4: attempts.append(random.randint(1,10)) i = i + 1 print(attempts) print(&quot;Maximum:&quot;, max(attempts)) . [2, 7, 3, 9] Maximum: 9 . This code generates 4 values in the range 1-10 and then from there they choose the highest value out of those 4 values. | . 3. Create an algorithm that will allow the arrow to reach the gray square: . { if canmoveFoward{ moveFoward } else{ canturnRight{ turnRight } canturnLeft{ turnLeft } } } . This code has you move foawrd until you are not able to and then once you can you have to turn right or left. | . 4. Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . This tree starts at 6 and then on each side it does the same process until you get every value. The process is adding the highest and lowest index and then dividing by 2 and then you choose the corresponding number to that index. | . 5. Explain thorughly how to find the number 69 in the list above (use key words) . Using sequential search you would go through the list comparing 69 to every value in the list until the number (69) matches 69. In the order this list is it will take 7 iterations to find 69 | Using binary search you would start in the middle, you can find this by adding the first and last last ((1+8)/2=4.5). You have to round up to 5 for the index, so you start at number 6 in the list. You do this on either side until you get your desired value. (You would want to get 8 because the index of 8 = 69) | . 6. Make a diagram explaining how you found the list (not tree, include equation) . You first want to find the middle so you do that. Once you do that you do the same process again and you get 11, which is the number wanted. | . 7. Put this list of strings in a order that can be used for binary search . Original: [&quot;store&quot;,&quot;Market&quot;,&quot;Walmart&quot;,Target&quot;,&quot;Ralphs&quot;] | Correct Order: [&quot;Market&quot;,&quot;Ralphs&quot;,&quot;store&quot;,&quot;Target&quot;,&quot;Walmart&quot;] | Alphabetical order would be the best way to put it | . 8. Explain why Binary Search is more efficient than Sequential Search . Binary search is more efficient than sequential search because sequential search goes one by one in the list comparing each value to the value you are looking for. Binary search on the other hand basically divides the amount of answers it could be after each step, making it a lot faster to find a certian number in a large list. | . 9. [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . If I am searching for 36 it would take 2 checks. You would start at 16 because it is the middle index. Then you would do 1 + 3 = 4 and then divide by 2 to get 2 for the index. Index 2 is the number 36, so we would stop there. | . Blog/Final Thoughts . I learned about conditional statements vs boolean | Furthed my knowledge on algorithms | Experienced more with different types of algorithms | I learned about binary search and sequential search | I learned that binary search is more effiecient than sequential search | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/12/08/blog-Sections-9-10.html",
            "relUrl": "/markdown/2022/12/08/blog-Sections-9-10.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "3.8-3.10 Homework and Hacks",
            "content": "Important Vocab/Notes . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | Increment/decrement - Modifies the counter variable after each repetition. | Append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met | . list = [1, 2, 3, 4, 5] # Print this list in reverse order list.reverse() print(&#39;Reversed List:&#39;, list) . Reversed List: [5, 4, 3, 2, 1] . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this list.sort() print(&#39;Sorted List:&#39;, list) . Sorted List: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;listay before sort: {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the listay value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;listay after sort: {list}&quot;) . listay before sort: [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] listay after sort: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . I got question 8 wrong (image wont load) . I selected a because I thought a certain about of time met until a conditon is met | I am not sure why I selecetd b because it was not very close to the answer and did not make much sense | I selected c after because I realized it was saying the code repeats until a conditon is met, which is a While Loop | . I got question 9 wrong (image wont load) . I selected a While Loop because I thought the the code would repeat until a condition is met (the user quits) | I selected a For Loop because the code is going to repeat a certain number of times until the user quits | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/12/06/blog-Sections-8-11.html",
            "relUrl": "/markdown/2022/12/06/blog-Sections-8-11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "3.5-3.7 Homework and Hacks",
            "content": "Important Vocab/Notes . Boolean: binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; | Algorithm: Finite set of instructions that accomplish a specific task | Nested conditional: A conditional inside of a conditional | Conditional statements allow the code to act based on multiple conditions, such as user input or stored data. | If statement and if-else statement | Nested conditionals are often used in algorithms in order to print specific data or run certain tasks. | . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False | . 2. 10(D) ≠ 0110(B) . A. True | B. False | . 3. 56(D) ≥ 111000(B) . A. True | B. False | . 3. 99(D) &lt; 1110011(B) . A. True | B. False | . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 &gt; 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x == y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x &gt; y &gt; z) . False True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;wildebeest&quot; or i == &quot;lion&quot;: # What boolean value does this statement cause? True boolean because shark is included in i. print(i + &quot; lives in the desert&quot;) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion lives in the desert wildebeest lives in the desert . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . ChickenAlfredo = { &quot;name&quot;: &quot;Chicken Alfredo&quot;, &quot;meat&quot;: 5, #pounds &quot;time to prepare(min)&quot;: 60 } CheeseQuesadilla = { &quot;name&quot;: &quot;Cheese Quesadilla&quot;, &quot;meat&quot;: 0, #pounds &quot;time to prepare(min)&quot;: 10 } BeefWellington = { &quot;name&quot;: &quot;Beef Wellington&quot;, &quot;meat&quot;: 10, #pounds &quot;time to prepare(min)&quot;: 150 } def mealfinder(meal): if meal[&quot;meat&quot;] &lt; 1: if meal[&quot;time to prepare(min)&quot;] &lt; 30: print(&quot;You can make &quot; + meal[&quot;name&quot;] + &quot;.&quot;) else: print(&quot;You cannot make &quot; + meal[&quot;name&quot;] + &quot;.&quot;) else: print(meal[&quot;name&quot;] + &quot; to much meat&quot; + &quot; and takes too long to prepare&quot;) mealfinder(ChickenAlfredo) mealfinder(CheeseQuesadilla) mealfinder(BeefWellington) . Chicken Alfredo to much meat and takes too long to prepare You can make Cheese Quesadilla. Beef Wellington to much meat and takes too long to prepare . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . . -They would get 2.0 because they do not have at least 5 tasks completed . Blog/Final Thoughts . For section 3.5 and 3.6 I already understood how to do these taska | They were good though because I was able to get more practice with these ideas | . . 3.7 is where it got a little tricky | Was not able to do it by myself I had to look back at your lesson | Once I reviewed the lesson I was able to understand the code and put it to use | The flowchart though was easy to make | .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/2022/12/01/blog-Section-5-7.html",
            "relUrl": "/jupyter/2022/12/01/blog-Section-5-7.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "3.3-3.4 Homework/Hacks",
            "content": "3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Answers 1 . All the steps combined are sequencing . The step &quot;for i in numbers:&quot; is iteration because they go through all the numbers. . &quot;if (numbers[i] % 2 == 0)&quot; is selection because they sort each number to find the even ones. . i = 1 starString = &quot;#&quot; while i &lt;= 10: #this is a iteration because it repeats until it reaches 10 a = 1 while a &lt;= i: #this is a selection because it selectes what a is print (&quot;#&quot;, end= &quot;&quot;) a += 1 print () i += 1 . # ## ### #### ##### ###### ####### ######## ######### ########## . Answers 2 . All the steps are a sequence . &quot;While i &lt;= 5:&quot; is iteration because they repeat until i reaches 5 . &quot;While j &lt;= i:&quot; is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . a=1, b=7, c=3, d=7 | . consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . 1. the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | | the value of hot is true, the value of cold is false | | the value of hot is false, the value of cold is false | | . Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. | Sequencing | num1 = 5 num2 = 10 num3 = 15 num4 = 20 num5 = 25 num1 = num2 + num3 # num1 is now the new num2 + num3 num5 = num2 + num4 # num5 is now the new num2 + num4 . num1 = 25 (num2=10 + num3=15, so 10+15=25) | num5 = 30 (num2=10 + num4=20, so 10+20=30) | . a = 1 b = 2 c = 3 d = 4 e = 5 a = b + c #a is now b + c d = a + e #d is now a + e . a = 5 (b=2 + c=3, so 2+3=5) | d = 6 (a=1 + e=5, so 1+5=6) | . 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) B name &lt;- concat(lastName, var) SmithB email &lt;- concat(name, &quot; @gmail.com&quot;) SmithB@gmail.com DISPLAY(email) . | What would the result be? SmithB@gmail.com . | . . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 4 length2 &lt;- len(word2)/3 3 first &lt;- substring(word1, 2, len1) ompu second &lt;- substring(word2, len2+3, len2) ook newWord &lt;- concat(first, second) DISPLAY(newWord) . | What would the result be? ompuook . | . . Leanred/Struggles . I knew about most of these terms and how they work | len means the length of the list | If the arrow is facing the left it replaces the word on the left with the work on the right | I learned more ways to add code together ( +, &lt;--, and append) . | I struggled with the last two problems (the email and newWord) . | It was not bad, but it was a lot of steps and I had to be careful . | I did good with the problems that required you to replace a variable and then find what a varible was at the end of the code (&lt;-- and +) . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/29/blog-Unit-3-Sections-3-4.html",
            "relUrl": "/markdown/2022/11/29/blog-Unit-3-Sections-3-4.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "3.3-3.4 Homework/Hacks",
            "content": "3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Answers 1 . All the steps combined are sequencing . The step &quot;for i in numbers:&quot; is iteration because they go through all the numbers. . &quot;if (numbers[i] % 2 == 0)&quot; is selection because they sort each number to find the even ones. . i = 1 starString = &quot;#&quot; while i &lt;= 10: #this is a iteration because it repeats until it reaches 10 a = 1 while a &lt;= i: #this is a selection because it selectes what a is print (&quot;#&quot;, end= &quot;&quot;) a += 1 print () i += 1 . # ## ### #### ##### ###### ####### ######## ######### ########## . Answers 2 . All the steps are a sequence . &quot;While i &lt;= 5:&quot; is iteration because they repeat until i reaches 5 . &quot;While j &lt;= i:&quot; is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . a=1, b=7, c=3, d=7 | . consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . 1. the value of hot is true, the value of cold is true | the value of hot is false, the value of cold is true | | the value of hot is true, the value of cold is false | | the value of hot is false, the value of cold is false | | . Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. | Sequencing | num1 = 5 num2 = 10 num3 = 15 num4 = 20 num5 = 25 num1 = num2 + num3 # num1 is now the new num2 + num3 num5 = num2 + num4 # num5 is now the new num2 + num4 . num1 = 25 (num2=10 + num3=15, so 10+15=25) | num5 = 30 (num2=10 + num4=20, so 10+20=30) | . a = 1 b = 2 c = 3 d = 4 e = 5 a = b + c #a is now b + c d = a + e #d is now a + e . a = 5 (b=2 + c=3, so 2+3=5) | d = 6 (a=1 + e=5, so 1+5=6) | . 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) B name &lt;- concat(lastName, var) SmithB email &lt;- concat(name, &quot; @gmail.com&quot;) SmithB@gmail.com DISPLAY(email) . | What would the result be? SmithB@gmail.com . | . . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 4 length2 &lt;- len(word2)/3 3 first &lt;- substring(word1, 2, len1) ompu second &lt;- substring(word2, len2+3, len2) ook newWord &lt;- concat(first, second) DISPLAY(newWord) . | What would the result be? ompuook . | . . Learned/Struggles . I knew about most of these terms and how they work | len means the length of the list | If the arrow is facing the left it replaces the word on the left with the work on the right | I learned more ways to add code together ( +, &lt;--, and append) . | I struggled with the last two problems (the email and newWord) . | It was not bad, but it was a lot of steps and I had to be careful . | I did good with the problems that required you to replace a variable and then find what a varible was at the end of the code (&lt;-- and +) . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/29/blog-Sections-3-4.html",
            "relUrl": "/markdown/2022/11/29/blog-Sections-3-4.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "3.1-3.2 Homework and Hacks",
            "content": "Hacks for 3.1 Part 1 . You want to store the number of apples in a shop. What is the best variable name and data type? . numApples, integer | apples, text | numApples, string | isApples, boolean | . You are storing true or false in a variable that asks if the classroom is cold. What is the best variable name and data type? . weather, integer | weather, boolean | isCold, boolean | cold, string | . How do you store the ID numbers for the students in the classroom? Choose the best variable name and data type: . IDnumber, string | whatID, integer | IDnumberofthestudentsintheclassroom, boolean | IDnumberofthestudentsintheclassroom, integer | . Is itisRainingtodayinsandiego a better option than isRaining? . Yes | No | . Which of the following types of data is best for a true or false question? . Boolean | String | Float | All of the above | . What is the difference between an integer and string of numbers? . An integer is just a set data type while a string of numbers can be changed with addition and subtraction | An integer can be letters and numbers while a string is just numbers | An integer is just numbers while a string is just words | An integer can be changed with addition and subtraction and a string is a set number or string of letters. | . Now, make at least 3 of your own practice questions making a scenario and then adding the variable name and data type. Add this to you blog! . You are storing player numbers. Choose the best variable name and data type: . Answer: Playernum, string . You are deciding if it is raining. Choose the best variable name and data type: . Answer: isRaining, boolean . You want to track how much money is in your bank account. Choose the best variable name and data type: . Answer: numMoney, integer . Hacks for 3.1 Part 2 . Answer the practice problems and blog about which one&#39;s you got wrong. After, create at least 6 problems that are alike to what you learned in this portion of the lesson. . . Consider the following code segment: . currentScore ⟵ 10 | highScore ⟵ currentscore | currentScore ⟵ 7 | . DISPLAY (currentScore) . What will the currentScore be after running this code segment? . 17 | 10 | 7 | none of the above | What will the highScore be? . 17 | 10 | 7 | none of the above | . Consider the following code segment: . num1 ⟵ 4 | num2 ⟵ 6 | num1 ⟵ num 2 | . DISPLAY(num1) . DISPLAY(num2) . What is displayed after running this code segment? . 4 6 | 6 4 | 4 4 | 6 6 | . Consider the following code segment: . num1 ⟵ 25 | num2 ⟵ 15 | num3 ⟵ 30 | num2 ⟵ num3 | num3 ⟵ num1 | num1 ⟵ num2 | . DISPLAY(num1) . DISPLAY(num2) . DISPLAY(num3) . What is displayed after running this code segment? . 25 15 30 | 30 30 25 | 30 15 30 | 15 30 25 | . Consider the following code segment: . p ⟵ 10 | q ⟵ 20 | r ⟵ 30 | s ⟵ 40 | p ⟵ q | q ⟵ r | s ⟵ q | r ⟵ p | . What is the value of r as a result of running this code segment . 10 | 20 | 30 | 40 | . Consider the following code segment: . first ⟵ true | second ⟵ false | second ⟵ first | first ⟵ second | . Insert Question . The value of first is true, and the value of second is false. | The value of first is false, and the value of second is true. | The value of first is true, and the value of second is true. | The value of first is false, and the value of second is false. | . Consider the following code segment: . a ⟵ 10 | b ⟵ 20 | c ⟵ 30 | d ⟵ 40 | x ⟵ 20 | b ⟵ x + b | a ⟵ x + 1 | d ⟵ c / d + 2 | . DISPLAY(a) . DISPLAY(b) . DISPLAY(c) . DISPLAY(d) . What is displayed as a result of executing the code segment? . 21 40 30 50 | 10 20 30 40 | 21 40 30 40 | 21 30 40 50 | Binary Hacks 3.2 Part 1 . Convert these binary notation to decimal notation. (the way we normally count) . The binary number 111 is 7 | . The binary number 1011 is 11 | . The binary number 1101011 is 107 | . Convert the decimal notation to binary notation. (You can use the Binary Math from Mr. Yeung or the one you have) . 12 in binary is 1100 | . 44 in binary is 101100 | . 254 in binary is 11111110 | . Extra Binary Hacks if you changed your bits to 24 . Convert decimal notation to binary notation. . 57345 in binary is 1110000000000001 | . 16777215 in binary is 111111111111111111111111 | . 11184810 in binary is 101010101010101010101010 | . Convert the binary notation to decimal notation . 101011101010 in decimal notation is 2794 | . 10011100000 in decimal notation is 1248 | . 1101001000101000 in decimal notation is 53800 | . Hacks for 3.2 Part 2 . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 | . What are the contents of scores1 after the code segment is executed?: . [89, 78, 92, 63, 95, 88] | [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] | [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] | [92, 79, 97, 63] | . Consider the following code segment: . listA &lt;- [&quot;Sam&quot;, &quot;Ann&quot;] | listB &lt;- [&quot;Jamal&quot;, &quot;Tamara&quot;] | listB &lt;- listA | listA &lt;- listB | . What are the contents of listA after the code segment is executed? . [&quot;Sam&quot;, &quot;Ann&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Sam&quot;, &quot;Ann&quot;, &quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;, &quot;Sam&quot;, &quot;Ann&quot;] | . What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 5 | 7 | 6 | 4 | . What is the index number of &quot;Purple&quot; in this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 7 | 0 | 6 | 5 | . Which of the following types of data can be stored in a list? . Boolean | String | Float | All of the above | . Which of the following variables is a float? . Apples | -106.2 | 34 | True | . If a list has a length of 24 items, what is the index number of the 17th item? . 21 | 17 | 16 | 69 | . A variable is permanent and cannot be changed later on. . True | False | . Which of the following is true about the list? [&quot;Apples&quot;, 42.0, &quot;Bananas&quot;, 0.5, &quot;Avocado&quot;, -902.2, &quot;Lychee&quot;, 6.9, &quot;Orange&quot;, 7.2] . The list has floats and string variable types. | The ratio of float variables to string variables is 2:1. | The length is 9. | The index of &quot;Avocado&quot; is 4. | All of the above | 1 and 4 | 1, 3, and 4 | . What I Learned . How to replace lists | Converting binary | Learned more about lists, boolean, variables, and integers | Most of this I already knew, but this taught me to read the code better and understand it deeper | .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/2022/11/28/blog-Unit-3-Section-1-2.html",
            "relUrl": "/jupyter/2022/11/28/blog-Unit-3-Section-1-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "3.1-3.2 Homework and Hacks",
            "content": "Hacks for 3.1 Part 1 . You want to store the number of apples in a shop. What is the best variable name and data type? . numApples, integer | apples, text | numApples, string | isApples, boolean | . You are storing true or false in a variable that asks if the classroom is cold. What is the best variable name and data type? . weather, integer | weather, boolean | isCold, boolean | cold, string | . How do you store the ID numbers for the students in the classroom? Choose the best variable name and data type: . IDnumber, string | whatID, integer | IDnumberofthestudentsintheclassroom, boolean | IDnumberofthestudentsintheclassroom, integer | . Is itisRainingtodayinsandiego a better option than isRaining? . Yes | No | . Which of the following types of data is best for a true or false question? . Boolean | String | Float | All of the above | . What is the difference between an integer and string of numbers? . An integer is just a set data type while a string of numbers can be changed with addition and subtraction | An integer can be letters and numbers while a string is just numbers | An integer is just numbers while a string is just words | An integer can be changed with addition and subtraction and a string is a set number or string of letters. | . Now, make at least 3 of your own practice questions making a scenario and then adding the variable name and data type. Add this to you blog! . You are storing player numbers. Choose the best variable name and data type: . Answer: Playernum, string . You are deciding if it is raining. Choose the best variable name and data type: . Answer: isRaining, boolean . You want to track how much money is in your bank account. Choose the best variable name and data type: . Answer: numMoney, integer . Hacks for 3.1 Part 2 . Answer the practice problems and blog about which one&#39;s you got wrong. After, create at least 6 problems that are alike to what you learned in this portion of the lesson. . . Consider the following code segment: . currentScore ⟵ 10 | highScore ⟵ currentscore | currentScore ⟵ 7 | . DISPLAY (currentScore) . What will the currentScore be after running this code segment? . 17 | 10 | 7 | none of the above | What will the highScore be? . 17 | 10 | 7 | none of the above | . Consider the following code segment: . num1 ⟵ 4 | num2 ⟵ 6 | num1 ⟵ num 2 | . DISPLAY(num1) . DISPLAY(num2) . What is displayed after running this code segment? . 4 6 | 6 4 | 4 4 | 6 6 | . Consider the following code segment: . num1 ⟵ 25 | num2 ⟵ 15 | num3 ⟵ 30 | num2 ⟵ num3 | num3 ⟵ num1 | num1 ⟵ num2 | . DISPLAY(num1) . DISPLAY(num2) . DISPLAY(num3) . What is displayed after running this code segment? . 25 15 30 | 30 30 25 | 30 15 30 | 15 30 25 | . Consider the following code segment: . p ⟵ 10 | q ⟵ 20 | r ⟵ 30 | s ⟵ 40 | p ⟵ q | q ⟵ r | s ⟵ q | r ⟵ p | . What is the value of r as a result of running this code segment . 10 | 20 | 30 | 40 | . Consider the following code segment: . first ⟵ true | second ⟵ false | second ⟵ first | first ⟵ second | . Insert Question . The value of first is true, and the value of second is false. | The value of first is false, and the value of second is true. | The value of first is true, and the value of second is true. | The value of first is false, and the value of second is false. | . Consider the following code segment: . a ⟵ 10 | b ⟵ 20 | c ⟵ 30 | d ⟵ 40 | x ⟵ 20 | b ⟵ x + b | a ⟵ x + 1 | d ⟵ c / d + 2 | . DISPLAY(a) . DISPLAY(b) . DISPLAY(c) . DISPLAY(d) . What is displayed as a result of executing the code segment? . 21 40 30 50 | 10 20 30 40 | 21 40 30 40 | 21 30 40 50 | Binary Hacks 3.2 Part 1 . Convert these binary notation to decimal notation. (the way we normally count) . The binary number 111 is 7 | . The binary number 1011 is 11 | . The binary number 1101011 is 107 | . Convert the decimal notation to binary notation. (You can use the Binary Math from Mr. Yeung or the one you have) . 12 in binary is 1100 | . 44 in binary is 101100 | . 254 in binary is 11111110 | . Extra Binary Hacks if you changed your bits to 24 . Convert decimal notation to binary notation. . 57345 in binary is 1110000000000001 | . 16777215 in binary is 111111111111111111111111 | . 11184810 in binary is 101010101010101010101010 | . Convert the binary notation to decimal notation . 101011101010 in decimal notation is 2794 | . 10011100000 in decimal notation is 1248 | . 1101001000101000 in decimal notation is 53800 | . Hacks for 3.2 Part 2 . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 | . What are the contents of scores1 after the code segment is executed?: . [89, 78, 92, 63, 95, 88] | [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] | [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] | [92, 79, 97, 63] | . Consider the following code segment: . listA &lt;- [&quot;Sam&quot;, &quot;Ann&quot;] | listB &lt;- [&quot;Jamal&quot;, &quot;Tamara&quot;] | listB &lt;- listA | listA &lt;- listB | . What are the contents of listA after the code segment is executed? . [&quot;Sam&quot;, &quot;Ann&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Sam&quot;, &quot;Ann&quot;, &quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;, &quot;Sam&quot;, &quot;Ann&quot;] | . What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 5 | 7 | 6 | 4 | . What is the index number of &quot;Purple&quot; in this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 7 | 0 | 6 | 5 | . Which of the following types of data can be stored in a list? . Boolean | String | Float | All of the above | . Which of the following variables is a float? . Apples | -106.2 | 34 | True | . If a list has a length of 24 items, what is the index number of the 17th item? . 21 | 17 | 16 | 69 | . A variable is permanent and cannot be changed later on. . True | False | . Which of the following is true about the list? [&quot;Apples&quot;, 42.0, &quot;Bananas&quot;, 0.5, &quot;Avocado&quot;, -902.2, &quot;Lychee&quot;, 6.9, &quot;Orange&quot;, 7.2] . The list has floats and string variable types. | The ratio of float variables to string variables is 2:1. | The length is 9. | The index of &quot;Avocado&quot; is 4. | All of the above | 1 and 4 | 1, 3, and 4 | . What I Learned . How to replace lists | Converting binary | Learned more about lists, boolean, variables, and integers | Most of this I already knew, but this taught me to read the code better and understand it deeper | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/28/blog-Section-1-2.html",
            "relUrl": "/markdown/2022/11/28/blog-Section-1-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
  
    
        ,"post48": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://jameshunter12.github.io/james-fastpage/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Adding A Countdown Timer",
            "content": "What did I do . I added a countdown timner for our customers to see | The countdown timer includes a countdown until we release the new products | . Why did I do this . I did this because we would often get customers asking when the new realese was going to be | I also added this because I thought it was a good way to incorporate what I learned in this class | This allows for easier functionability and I thought it was fun and important to add this | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/10/countdown-timer.html",
            "relUrl": "/markdown/2022/11/10/countdown-timer.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "N@TM Experience",
            "content": "What I Liked . I enjoyed showing our project to the parents and students | It was also really cool seeing the other peoples reactions to our project | I think seeing the reactions were worth it | We also answered their questions about how we did it and it is crazy to think that just a couple of months ago I would have had no idea what we were talking about | As we presented I realized how far we had came from the start. Before taking this class I thought it would have been incredibly difficult to create a website, but my perspective has changed. | We did get help from the flask template, so I still feel I have a long way until I can create a website from scratch | It was also interesting looking at other groups projects and how they did it . | One thing I wished I did was looked at more groups projects, because I didn&#39;t look at many and it would have been nice to see what they came up with . | . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/09/night@museum.html",
            "relUrl": "/markdown/2022/11/09/night@museum.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "College Board Final Exam Corrections",
            "content": ". My answer was close because it contained a stribng varible and Boolean variable, which are in the correct answer. My answer was wrong because the names of the variables were not meaningful. C is the correct answer because it uses a string variable and a Boolean variable, the Boolean variable is important because it tells us if the statement is true or false (absent or not.) The named also used for the variable works well because they are appropriate and easy to read. . . I chose C because I narrowed it down to two answers (C and D) and I went with C. I knew it was one of those because the 7th line tells us a = 21, the 6th lines tells us b = 40, and the thrid line tells us c = 30. I said d = 40 because I could not figure out where else it was said, so I went with line 4. I now understand my mistake because I added c and d (30+40) and then divided by 2 so I got 35, which made me confused. I realized I had to do d divided by 2 and then add c (40/2=20+30) to get an answer of 50. . . The first part of the answer I selected was wrong, but the second part of it was correct. If I were to have ran the code I would have got &quot;onno&quot;, which is not noon. C is the correct answer because it uses the word &quot;on&quot;. The second line is basically reversing the word, so you would get &quot;no&quot; and then add the original word back (&quot;on&quot;) to the end, which would give you the word &quot;noon&quot;. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/11/09/collegeboard-final-corrections.html",
            "relUrl": "/markdown/2022/11/09/collegeboard-final-corrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Problems, Solutions, and Accomplihments",
            "content": "Our Problems . Our first problem is our sign in page dedicated for our customers. As of now one are only able to sign into one account we want to make where you can make an account and you can dave products and your products in your cart with save. | Another one of our problems is our cart feature. As of now, when you press the add to cart button it does not work correctly because when you press on your cart the same 2 products are in it. | . Accomplishments . In this last week we have been working on our API and making our website better | For our API we have not finished, but we have our design and how it is going to work on our website site | .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/10/28/problems-and-solutions.html",
            "relUrl": "/markdown/2022/10/28/problems-and-solutions.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Fetch of Backend Jokes",
            "content": "Joke HaHa Boohoo .",
            "url": "https://jameshunter12.github.io/james-fastpage/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Jokes API",
            "content": "import requests url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes/&quot; response = requests.get(url) print(response.text) . [{&#34;boohoo&#34;:218363,&#34;haha&#34;:177423,&#34;id&#34;:0,&#34;joke&#34;:&#34;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime.&#34;},{&#34;boohoo&#34;:2025,&#34;haha&#34;:30300,&#34;id&#34;:1,&#34;joke&#34;:&#34;Q: Why did I divide sin by tan? A: Just cos.&#34;},{&#34;boohoo&#34;:1375,&#34;haha&#34;:1863,&#34;id&#34;:2,&#34;joke&#34;:&#34;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&#34;},{&#34;boohoo&#34;:1340,&#34;haha&#34;:1613,&#34;id&#34;:3,&#34;joke&#34;:&#34;Enter any 11-digit prime number to continue.&#34;},{&#34;boohoo&#34;:1781,&#34;haha&#34;:2092,&#34;id&#34;:4,&#34;joke&#34;:&#34;If at first you don&#39;t succeed; call it version 1.0.&#34;},{&#34;boohoo&#34;:5127,&#34;haha&#34;:1340,&#34;id&#34;:5,&#34;joke&#34;:&#34;Java programmers are some of the most materialistic people I know, very object-oriented&#34;},{&#34;boohoo&#34;:454,&#34;haha&#34;:1146,&#34;id&#34;:6,&#34;joke&#34;:&#34;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed.&#34;},{&#34;boohoo&#34;:2437,&#34;haha&#34;:3078,&#34;id&#34;:7,&#34;joke&#34;:&#34;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&#34;},{&#34;boohoo&#34;:122,&#34;haha&#34;:1340,&#34;id&#34;:8,&#34;joke&#34;:&#34;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#34;},{&#34;boohoo&#34;:125,&#34;haha&#34;:1185,&#34;id&#34;:9,&#34;joke&#34;:&#34;Q: What u2019s a aliens favorite computer key? A: the space bar!&#34;},{&#34;boohoo&#34;:17001,&#34;haha&#34;:1771,&#34;id&#34;:10,&#34;joke&#34;:&#34;There are 10 types of people in the world: those who understand binary, and those who don u2019t.&#34;},{&#34;boohoo&#34;:447,&#34;haha&#34;:1780,&#34;id&#34;:11,&#34;joke&#34;:&#34;If it wasn&#39;t for C, we u2019d all be programming in BASI and OBOL.&#34;},{&#34;boohoo&#34;:446,&#34;haha&#34;:1073,&#34;id&#34;:12,&#34;joke&#34;:&#34;Computers make very fast, very accurate mistakes.&#34;},{&#34;boohoo&#34;:452,&#34;haha&#34;:1151,&#34;id&#34;:13,&#34;joke&#34;:&#34;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&#34;},{&#34;boohoo&#34;:452,&#34;haha&#34;:1277,&#34;id&#34;:14,&#34;joke&#34;:&#34;Q: How many programmers does it take to change a light bulb? A: None. It u2019s a hardware problem.&#34;},{&#34;boohoo&#34;:516,&#34;haha&#34;:4274,&#34;id&#34;:15,&#34;joke&#34;:&#34;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&#34;},{&#34;boohoo&#34;:639,&#34;haha&#34;:1090,&#34;id&#34;:16,&#34;joke&#34;:&#34;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&#34;},{&#34;boohoo&#34;:4202,&#34;haha&#34;:6984,&#34;id&#34;:17,&#34;joke&#34;:&#34;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#34;}] . import requests url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes/&quot; response = requests.get(url) json = response.json() #for each joke an entry has the joke in it for entry in json: print(entry) . {&#39;boohoo&#39;: 218363, &#39;haha&#39;: 177423, &#39;id&#39;: 0, &#39;joke&#39;: &#39;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime.&#39;} {&#39;boohoo&#39;: 2025, &#39;haha&#39;: 30300, &#39;id&#39;: 1, &#39;joke&#39;: &#39;Q: Why did I divide sin by tan? A: Just cos.&#39;} {&#39;boohoo&#39;: 1375, &#39;haha&#39;: 1863, &#39;id&#39;: 2, &#39;joke&#39;: &#39;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&#39;} {&#39;boohoo&#39;: 1340, &#39;haha&#39;: 1613, &#39;id&#39;: 3, &#39;joke&#39;: &#39;Enter any 11-digit prime number to continue.&#39;} {&#39;boohoo&#39;: 1781, &#39;haha&#39;: 2092, &#39;id&#39;: 4, &#39;joke&#39;: &#34;If at first you don&#39;t succeed; call it version 1.0.&#34;} {&#39;boohoo&#39;: 5127, &#39;haha&#39;: 1340, &#39;id&#39;: 5, &#39;joke&#39;: &#39;Java programmers are some of the most materialistic people I know, very object-oriented&#39;} {&#39;boohoo&#39;: 454, &#39;haha&#39;: 1146, &#39;id&#39;: 6, &#39;joke&#39;: &#39;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed.&#39;} {&#39;boohoo&#39;: 2437, &#39;haha&#39;: 3078, &#39;id&#39;: 7, &#39;joke&#39;: &#39;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&#39;} {&#39;boohoo&#39;: 122, &#39;haha&#39;: 1340, &#39;id&#39;: 8, &#39;joke&#39;: &#39;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&#39;} {&#39;boohoo&#39;: 125, &#39;haha&#39;: 1185, &#39;id&#39;: 9, &#39;joke&#39;: &#39;Q: What’s a aliens favorite computer key? A: the space bar!&#39;} {&#39;boohoo&#39;: 17001, &#39;haha&#39;: 1771, &#39;id&#39;: 10, &#39;joke&#39;: &#39;There are 10 types of people in the world: those who understand binary, and those who don’t.&#39;} {&#39;boohoo&#39;: 447, &#39;haha&#39;: 1780, &#39;id&#39;: 11, &#39;joke&#39;: &#34;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&#34;} {&#39;boohoo&#39;: 446, &#39;haha&#39;: 1073, &#39;id&#39;: 12, &#39;joke&#39;: &#39;Computers make very fast, very accurate mistakes.&#39;} {&#39;boohoo&#39;: 452, &#39;haha&#39;: 1151, &#39;id&#39;: 13, &#39;joke&#39;: &#39;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&#39;} {&#39;boohoo&#39;: 452, &#39;haha&#39;: 1277, &#39;id&#39;: 14, &#39;joke&#39;: &#39;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&#39;} {&#39;boohoo&#39;: 516, &#39;haha&#39;: 4274, &#39;id&#39;: 15, &#39;joke&#39;: &#39;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&#39;} {&#39;boohoo&#39;: 639, &#39;haha&#39;: 1090, &#39;id&#39;: 16, &#39;joke&#39;: &#39;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&#39;} {&#39;boohoo&#39;: 4202, &#39;haha&#39;: 6984, &#39;id&#39;: 17, &#39;joke&#39;: &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39;} .",
            "url": "https://jameshunter12.github.io/james-fastpage/python/markdown/2022/10/20/Jokes-API.html",
            "relUrl": "/python/markdown/2022/10/20/Jokes-API.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Javascript Web Page using an API",
            "content": "The code below holds the info that is being generated into an HTML table. . Key things to know: . &lt; table &gt; creates a TABLE | &lt; tr &gt; creates a ROW | &lt; th &gt; makes the text a column HEADER | &lt; tbody id = &quot;results&quot; &gt; defines an element id, to be used within JavaScript | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Joke&lt;/th&gt; &lt;th&gt;HaHa&lt;/th&gt; &lt;th&gt;Boohoo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; . Constant variables are declared here with keyword const . Key things to know: . The document object &quot;result&quot; represents table body in the HTML above. | If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing &quot;result&quot; and defining a &quot;resultContainer&quot; | In the code, in following cells, document elements are created and organized for each Joke, each is added to the &quot;resultContainer&quot; as a row in the table body. | Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend | . // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const HAHA = &quot;haha&quot;; const BOOHOO = &quot;boohoo&quot;; // prepare fetch urls const url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; // haha reaction const jeer_url = url + &quot;/jeer/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method . The below code uses a function called fetch to gather the data from the backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked in case the site is down and returns an error | On successful fetch, the code places each Joke in the HTML table body using a &quot;for&quot; loop and creating document elements from each &quot;row&quot; of the fetched &quot;data&quot;. | The creation of each Haha and Boohoo &quot;onclick&quot; &quot;button&quot; is also done in the same loop. | Updates to backend are setup to occur with each onclick, each click calls the &quot;reaction&quot; function | . // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const joke = document.createElement(&quot;td&quot;); joke.innerHTML = row.id + &quot;. &quot; + row.joke; // add fetched data to innerHTML // td for haha cell with onclick actions const haha = document.createElement(&quot;td&quot;); const haha_but = document.createElement(&#39;button&#39;); haha_but.id = HAHA+row.id // establishes a HAHA JS id for cell haha_but.innerHTML = row.haha; // add fetched &quot;haha count&quot; to innerHTML haha_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(HAHA, like_url+row.id, haha_but.id); }; haha.appendChild(haha_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const boohoo = document.createElement(&quot;td&quot;); const boohoo_but = document.createElement(&#39;button&#39;); boohoo_but.id = BOOHOO+row.id // establishes a BOOHOO JS id for cell boohoo_but.innerHTML = row.boohoo; // add fetched &quot;boohoo count&quot; to innerHTML boohoo_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(BOOHOO, jeer_url+row.id, boohoo_but.id); }; boohoo.appendChild(boohoo_but); // add &quot;boohoo button&quot; to boohoo cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . The below code uses fetch to update backend data using &quot;put_options&quot;. The purpose is to update Hahaa and Bohoo counters in backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked to verify update occurred | The element id of button clicked is updated with the data returned from the API. | Note, the elemID is received as parameter. This data was setup when the button was created in former cell. | . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } . Hacks . The code below relates to the rapidapi you worked with last week. . What are some similarities you see with the javascript for the jokes api? | In a blogpost, break up the code in cells like done above and try to describe what this code is doing. | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/webfrontend",
            "relUrl": "/techtalk/webfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;6fa44ed3a2msh483515e3beca32dp153a87jsn04ee72a909e0&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6fa44ed3a2msh483515e3beca32dp153a87jsn04ee72a909e0&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: # json is calling the data print (f&#39;{coin[&quot;price&quot;]} {coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]}&#39;) #this is the way the data is formatted . 19224.447593601126 BTC Bitcoin 1308.199551212318 ETH Ethereum 1.0000523455427062 USDT Tether USD 1.0002524530884096 USDC USDC 274.74450631272896 BNB Binance Coin 0.5211455214949348 XRP XRP 1.000171247381502 BUSD Binance USD 0.4139552402915634 ADA Cardano 32.454134482189296 SOL Solana 0.06054842848035766 DOGE Dogecoin 6.354403003989721 DOT Polkadot 0.835383532602989 MATIC Polygon 0.000010736474729842 SHIB Shiba Inu 0.999891639898776 DAI Dai 0.06351970963448027 TRX TRON 1308.950203374039 WETH Wrapped Ether 6.352808919826807 UNI Uniswap 16.582266591683975 AVAX Avalanche 4.534812109996118 CAKE PancakeSwap 16.097275035337095 OKB OKB 12.790865904079196 ATOM Cosmos 53.16388872968613 LTC Litecoin 23.87294802061375 FTT FTX Token 25.39839861266645 ETC Ethereum Classic 146.14913616438486 XMR Monero 0.1256703462070973 XLM Stellar 0.32924309203358804 ALGO Algorand 113.34545922204282 BCH Bitcoin Cash 19245.95077301717 BTCB Bitcoin BEP2 0.10541410004274888 CRO Cronos 3.4418393654122696 NEAR NEAR Protocol 0.000293866408536083 LUNC Terra Classic 1.742193550502613 WEMIX WEMIX TOKEN 1.6497345409755526 FLOW Flow 16.524231414902868 ENS EnergySwap 5.292418584086171 FIL Filecoin 0.02320353209595045 VET VeChain 155.68731956157967 QNT Quant 0.6842150594079114 MANA Decentraland 5.624430651470011 ICP Internet Computer (DFINITY) 0.05983121896177806 HBAR Hedera 0.7083305292153628 IMX Immutable X 0.9998613493400573 FRAX Frax 57.322221492067925 EGLD Elrond 1.398063181968517 XTZ Tezos 0.8232983748529789 SAND The Sandbox 0.20047738370702253 CHZ Chiliz 1.340424033760174 LDO Lido DAO Token 5.222843346525186 HT Huobi Token 74.84882436943164 AAVE Aave . import requests url = &quot;https://americanfootballapi.p.rapidapi.com/api/american-football/search/brady&quot; querystring = {&quot;sort&quot;:&quot;new&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6fa44ed3a2msh483515e3beca32dp153a87jsn04ee72a909e0&quot;, &quot;X-RapidAPI-Host&quot;: &quot;americanfootballapi.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) json = response.json().get(&#39;results&#39;) # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for post in json: # countries in a list for posts in post[&quot;entity&quot;]: if posts[&quot;country&quot;].get(&quot;name&quot;) == &quot;USA&quot;: for key, value in post.items(): print(key, value) . {&#34;results&#34;:[{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:853680,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Tom Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;QB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tom&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:false,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4388,&#34;name&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;nameCode&#34;:&#34;TB&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;slug&#34;:&#34;tampa-bay-buccaneers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#d50a0a&#34;,&#34;secondary&#34;:&#34;#34302b&#34;,&#34;text&#34;:&#34;#34302b&#34;},&#34;type&#34;:0,&#34;userCount&#34;:14077},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:10394},&#34;score&#34;:1274827,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:1132339,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Brady Christensen&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;OT&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Christensen&#34;,&#34;slug&#34;:&#34;christensen-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4415,&#34;name&#34;:&#34;Carolina Panthers&#34;,&#34;nameCode&#34;:&#34;CAR&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Carolina Panthers&#34;,&#34;slug&#34;:&#34;carolina-panthers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#3a84c5&#34;,&#34;secondary&#34;:&#34;#07141e&#34;,&#34;text&#34;:&#34;#07141e&#34;},&#34;type&#34;:0,&#34;userCount&#34;:2480},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:2},&#34;score&#34;:205,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:887887,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Brady Sheldon&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;LB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Sheldon&#34;,&#34;slug&#34;:&#34;sheldon-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:984311,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Tyre Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;WR&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tyre&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;}]} . TypeError Traceback (most recent call last) /Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb Cell 7 in &lt;cell line: 22&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; for post in json: # countries in a list &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; for posts in post[&#34;entity&#34;]: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; if posts[&#34;country&#34;].get(&#34;name&#34;) == &#34;USA&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; for key, value in post.items(): &lt;a href=&#39;vscode-notebook-cell:/Users/jameshunter/vscode/james-fastpage/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#W6sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; print(key, value) TypeError: string indices must be integers . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "College Board",
            "content": "What I Can Improve . I did solid on the collaboration and program design and development quiz, but I could dfeinity do better on progeam function and purpose quiz. . I need to improve in most of the aspects. I think I can start with improving my vocab because if I understand the vocab then it will make everything a lot easier. If I know the vocab then I can easy tell what the question is asking . I need to go through each lesson to review my understanding because right now I am confused on a lot of topics . I haven&#39;t taken much notes as of now because I forgot to, so once I start taking notes on chapter 1 I think i will greatly imporve my understanding and clear up any confusion . I also realized that there are course resources that I can go through to improve my knowledge and specific resources that I can read if I have confusion on a certain topic. . .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/10/03/collegeboard.html",
            "relUrl": "/markdown/2022/10/03/collegeboard.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i]==0: continue if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;burger and fries&quot;: 5.98, &quot;burger and drink&quot;: 4.98, &quot;drink and fries&quot;: 2.98} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu:&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(&quot;&quot;) if item in menu.keys(): print(f&quot;your total will be: {menu[item]}&quot;) print(&quot;Thank you for ordering &quot; + item) print(&quot;Your order with be ready in 15 minutes&quot;) else: print(&quot;That is not on the menu&quot;) # print(&quot;Total=&quot; + &quot; $&quot; + str(v)) . Menu: burger $3.99 fries $1.99 drink $0.99 burger and fries $5.98 burger and drink $4.98 drink and fries $2.98 your total will be: 1.99 Thank you for ordering fries Your order with be ready in 15 minutes . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://jameshunter12.github.io/james-fastpage/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "College Board Chapter 1 Notes",
            "content": "1.1 Collaboration | 1.2 Program Function and Purpose | 1.3 Program Design and Development | . 1.1 Collaboration Notes . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it | A computing inoovation can be a program and it can be physical or nonphysical | Collaboration that includes diverse perspectives helps to aviod bias | Interpersonal skills learned with collaboration | Communication | . | Consensus Building | . | Conflict Resolution | . | Negotiation | . | Ways to collaborate in APCSP: | Pair Programming- Have one person work while the other person guides them | . | Think-Pair-Share- Think about a problem and share with a partner | . | Leaving Comments- Allows you to communicate with yourself and others | . | . 1.2 Program Function and Purpose Notes . The purpose of computing innovation is to solve problems or to puruse interests through creative expression | An understanding of the purpose of a computing innovation provides developers with an imporved ability to develop that computing innovation | Categories of Innovations: | Applications (things you can download) | . | Physical Devices (devices you can use) | . | Systems (things you can do online like E-mail) | . | Describing the purpose of a computing is important (essential questions) . | Progam inputs are data sent to a computer for processing by a program. Input can come in a variety of forms, such ad tactile, audio, and visual, or text . | An event is associated with an action and supplies input data to a program | Events can be generated when a key is pressed, a mouse is clicked, a program is started, or any other defined action occurs that affects the flow of execution | Inputs usually affect the output produced by a program | Program output can come in a variety of forms, such as tactile, audio, visual, or text | Program output is usually base on a program&#39;s input or prior state (e.g., internal values) | Smart phone/tablet, laptop computer, and gaming consle are receive input and present output | Programs receive input from events that are triggered by some action (mouse clicks, button clicks, keyboard entries, audio trigger, ect) | Input does not always affect output | Certian lines of code are executed depending on the event (doesn&#39;t have to be in order) . | A program is a collection of program statements that performs a specific task when run by a computer. A program is often referred to as software . | A code segment is a collection of program statements that is part of a program | A program needs to work for a variety of inputs and situations | The behavior of a program is how a program functions during execution and is often described by how a user interacts with it | A program can be described broadly by what it does, or in more detail by both what the program does and how the program statements accomplish the function | A program is a collection of statements | A statement is a single command and a group of statements is called a code segment | You should be able to state what the code segment does | . 1.3 Program Design and Development . - .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/10/01/collegeboard-big-idea-1-notes.html",
            "relUrl": "/markdown/2022/10/01/collegeboard-big-idea-1-notes.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Java Script Table",
            "content": "Table . Member Role .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2022/09/25/javascript-table.html",
            "relUrl": "/markdown/java/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;James&quot;; console.log(msg); . James . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(&quot;foo bar&quot;); . foo bar . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf, sport) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.sport = sport; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role, sport: this.sport,}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;coding&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, sport: &#39;coding&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;sport&#34;:&#34;coding&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;James&quot;, &quot;jameshunter12&quot;, 2025, &quot;soccer&quot;), new Person(&quot;Quinn&quot;, &quot;gigtieup&quot;, 2025, &quot;lacrosse&quot;), new Person(&quot;Aaron&quot;, &quot;aaron-rub&quot;, 2025, &quot;swim&quot;), new Person(&quot;Yasha&quot;, &quot;yashakhoshini&quot;, 2025, &quot;soccer&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, sport: &#39;coding&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;James&#39;, ghID: &#39;jameshunter12&#39;, classOf: 2025, sport: &#39;soccer&#39;, role: &#39;Student&#39; }, Person { name: &#39;Quinn&#39;, ghID: &#39;gigtieup&#39;, classOf: 2025, sport: &#39;lacrosse&#39;, role: &#39;Student&#39; }, Person { name: &#39;Aaron&#39;, ghID: &#39;aaron-rub&#39;, classOf: 2025, sport: &#39;swim&#39;, role: &#39;Student&#39; }, Person { name: &#39;Yasha&#39;, ghID: &#39;yashakhoshini&#39;, classOf: 2025, sport: &#39;soccer&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;sport&#34;:&#34;coding&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, sport: &#39;coding&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Sport&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.sport + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDRoleSport . Mr M | jm1021 | Teacher | coding | James | jameshunter12 | Student | soccer | Quinn | gigtieup | Student | lacrosse | Aaron | aaron-rub | Student | swim | Yasha | yashakhoshini | Student | soccer | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jameshunter12.github.io/james-fastpage/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Quiz Plan",
            "content": "My quiz plan: . Create a quiz similar to the example that was more complex (so I can understand the program) | Think (What will make my website different)) | Create (Use what I know from the lesson and the brainstorm plan to create what website I had in mind) | Check/ Ask (Ask teacher and classmates if anything needs to be added or changed) | . Drafting: . For my code I used a simple repeating command “on event (“Button name”,”click”, function(){“ (This was used throughout my whole quiz) I wanted to create a question that requires them to type in the answer (code below) . onEvent(“enter”, “click”, function( ) { console.log(“answerbutton entered text: “ + getText(“text-input”)); if (getText(“text-input”) == “Ronaldo”) { setScreen(“end”); } else { setScreen(“incorrect”); } }); . Data Abstraction . An example of Data Abstraction in this program is the “font size” chart. It holds multiple selections that represent different sizes. A random number function takes a random size selection from the list and sets the default font size to that selection. . The point . The point of the assignment was to get comfortable with code.org but specifically java script. . # Managing Complexity . An example of complexity management in this quiz is the layout. The quiz is divided into two parts: pasword and exploration in the program. This can easily be seen in the first part of the code, each command has its own defined function. . Challenges . Since I created a Jeopardy game there were lots of buttons that I had to create so I had to make sure the names were correct, so I could easily find them, I also had a little trouble while making a question with text entry. .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/java/2022/09/12/quiz-plan.html",
            "relUrl": "/markdown/java/2022/09/12/quiz-plan.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Changing the Remote Theme",
            "content": ". .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/2022/09/06/theme-change.html",
            "relUrl": "/jupyter/2022/09/06/theme-change.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Dictionary Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer #These are the questions followed by the possible answers question_prompts = [ &quot;What is the name of the syntax that can pass variables in html? n n&quot;, &quot;What is it called for a command you give your computer? n n&quot;, &quot;Is it important to define your varibles? n n&quot;, &quot;If you do not definne your varibles what will happen when you try and run the code? n n&quot;, ] #These are the answers to the questions above questions = [ Question(question_prompts[0], &quot;liquid&quot;), Question(question_prompts[1], &quot;input&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;syntax error&quot;), ] #This is used to tell you your score def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupter/python/2022/09/06/dictionary-quiz.html",
            "relUrl": "/jupter/python/2022/09/06/dictionary-quiz.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "# variable of type string name = &quot;James Hunter&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer age = 15 print(&quot;age&quot;, age, type(age)) # variable of type float weight = 136 print(&quot;weight&quot;, weight, type(weight)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;HTML&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;weight&quot;: weight, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name James Hunter &lt;class &#39;str&#39;&gt; age 15 &lt;class &#39;int&#39;&gt; weight 136 &lt;class &#39;int&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;James Hunter&#39;, &#39;age&#39;: 15, &#39;weight&#39;: 136, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] James Hunter &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;James&quot;, &quot;LastName&quot;: &quot;Hunter&quot;, &quot;DOB&quot;: &quot;February 23&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;12james15545@gmail.com&quot;, &quot;Weight&quot;: [&quot;136&quot;] })#InfoDb[0] InfoDb.append({ &quot;FirstName&quot;: &quot;Nick&quot;, &quot;LastName&quot;: &quot;Hunter&quot;, &quot;DOB&quot;: &quot;June 17th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nick@hunter-il.com&quot;, &quot;Weight&quot;: [&quot;155&quot;] }) # InfoDb[1 print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;James&#39;, &#39;LastName&#39;: &#39;Hunter&#39;, &#39;DOB&#39;: &#39;February 23&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;12james15545@gmail.com&#39;, &#39;Weight&#39;: [&#39;136&#39;]}, {&#39;FirstName&#39;: &#39;Nick&#39;, &#39;LastName&#39;: &#39;Hunter&#39;, &#39;DOB&#39;: &#39;June 17th&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;nick@hunter-il.com&#39;, &#39;Weight&#39;: [&#39;155&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Socer Number: 12&quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . #InfoDb is always than i def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | . for index in range (len(InfoDb)): print_data(InfoDb[index]) . James Hunter Residence: San Diego Birth Day: February 23 Socer Number: 12Nick Hunter Residence: San Diego Birth Day: June 17th Socer Number: 12 . mylist = [1, 2, 3, 4, 5] mylist.reverse() mylist [5, 4, 3, 2, 1] . [5, 4, 3, 2, 1] . a = [10, 20, 30, 40, 50] len(a) . 5 . grades = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;F&#39;] grades.sort(reverse=True) print(grades) . [&#39;F&#39;, &#39;D&#39;, &#39;C&#39;, &#39;B&#39;, &#39;A&#39;] . grades = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;F&#39;] grades.pop(1) . &#39;B&#39; .",
            "url": "https://jameshunter12.github.io/james-fastpage/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Bash Test",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/jameshunter/Library/Jupyter/kernels/bash javascript /Users/jameshunter/Library/Jupyter/kernels/javascript python3 /opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/bash/2022/08/25/Jupyter-Checks.html",
            "relUrl": "/jupyter/bash/2022/08/25/Jupyter-Checks.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "First Quiz",
            "content": "class Question: def __init__(self, prompt, answer): # Defines variables self.prompt = prompt self.answer = answer # This is my list of questions with questions and answer choices question_prompts = [ &quot;How many lines are in a sequence of code? n(a)2 or more n(b)1&quot;, &quot;Does (base) come from Anaconda? nyes/ nno&quot;, &quot;Are we in APCSP? nyes/ nno&quot;, &quot;What grade do you want in this class? (C) n(A) n(B) n(A+)&quot;, ] # Answers questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;yes&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;A+&quot;), ] # Prints score (correct answer = score + 1) def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questionsyou got 2 out of 4 .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/python/2022/08/24/first-quiz.html",
            "relUrl": "/jupyter/python/2022/08/24/first-quiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "James's Important Docs",
            "content": "Here is the link to my World Religions Project . Here is the link to my AP World Schedule . Here is the link to my Integrated 3a Schedule . Here is the link to my HSE4 Schedule .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/08/24/first-doc.html",
            "relUrl": "/markdown/2022/08/24/first-doc.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "James's First Post",
            "content": "My name is James and I enjoy playing soccer and working out! .",
            "url": "https://jameshunter12.github.io/james-fastpage/markdown/2022/08/22/first-post.html",
            "relUrl": "/markdown/2022/08/22/first-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "My Jupyter Notebooks",
            "content": "print(&quot;hello&quot;) . hello .",
            "url": "https://jameshunter12.github.io/james-fastpage/jupyter/python/2022/08/22/first-notebook.html",
            "relUrl": "/jupyter/python/2022/08/22/first-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Welcome to my page! . Throughout this page you can find some things I have been working on! .",
          "url": "https://jameshunter12.github.io/james-fastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": ". layout: base title: Chapter 1 Notes permalink: /Chapter 1 Notes/ type: pbl —- . 1.1 Collaboration | 1.2 Program Function and Purpose | 1.3 Program Design and Development | . 1.1 Collaboration Notes . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it | A computing inoovation can be a program and it can be physical or nonphysical | Collaboration that includes diverse perspectives helps to aviod bias | Interpersonal skills learned through collaboration | Communication | . | Consensus Building | . | Conflict Resolution | . | Negotiation | . | Ways to collaborate in APCSP: | Pair Programming- Have one person work while the other person guides them | . | Think-Pair-Share- Think about a problem and share with a partner | . | Leaving Comments- Allows you to communicate with yourself and others | . | .",
          "url": "https://jameshunter12.github.io/james-fastpage/_pages/chapter-1-notes.html",
          "relUrl": "/_pages/chapter-1-notes.html",
          "date": ""
      }
      
  

  

  

  

  

  
  

  

  
  

  

  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page21": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jameshunter12.github.io/james-fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}